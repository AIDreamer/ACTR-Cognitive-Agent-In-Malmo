(#Y(si::bytecodes nil nil (15 0 14 1 14 2 33 3 12 19 4 4 76 73 39 10 15 5 19 1 6 12 19 1 7 29) #A(t (8) ("GENERAL-PM" *modules* :test string= member "ACT-R-support:general-pm" translate-logical-pathname common-lisp-user::compile-and-load)) #1=#P"C:/Users/Son Pham/Desktop/actr7/core-modules/motor.lisp" 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 15 5 14 6 1 9 12 1 10 7 3 12 14 6 1 11 12 1 12 7 3 12 15 13 15 14 15 15 15 16 15 17 15 18 15 19 15 20 14 6 1 22 12 1 23 7 3 6 11 12 14 24 15 25 15 26 1 26 16 27 6 3 12 15 28 15 29 11 29 16 27 6 3 6 2 6 2 12 19 4 30 29) #2=#A(t (31) (common-lisp-user::motor-module ext::location (defclass common-lisp-user::motor-module) (#1# . 16424) ext::annotate (common-lisp-user::pm-module) :initfunction common-lisp-user::hand make-instance #Y(nil nil nil (26 15 7 19 1 8 29) #2# #1# 16424) (:initform (make-instance 'common-lisp-user::hand) :initargs (:left-hand) :writers ((setf common-lisp-user::left-hand)) :readers (common-lisp-user::left-hand) :name common-lisp-user::left-hand) #Y(nil nil nil (26 15 7 19 1 8 29) #2# #1# 16424) (:initform (make-instance 'common-lisp-user::hand) :initargs (:right-hand) :writers ((setf common-lisp-user::right-hand)) :readers (common-lisp-user::right-hand) :name common-lisp-user::right-hand) (:initform #A(t (2) (0 0)) :initargs (:eff-cursor-loc) :writers ((setf common-lisp-user::eff-cursor-loc)) :readers (common-lisp-user::eff-cursor-loc) :name common-lisp-user::eff-cursor-loc) (:initform 0.05 :initargs (:feat-prep-time) :writers ((setf common-lisp-user::feat-prep-time)) :readers (common-lisp-user::feat-prep-time) :name common-lisp-user::feature-prep-time) (:initform 0.05 :initargs (:init-time) :writers ((setf common-lisp-user::init-time)) :readers (common-lisp-user::init-time) :name common-lisp-user::movement-initiation-time) (:initform 1.0 :initargs (:default-target-width) :writers ((setf common-lisp-user::default-target-width)) :readers (common-lisp-user::default-target-width) :name common-lisp-user::default-target-width) (:initform 0.075 :initargs (:peck-fitts-coeff) :writers ((setf common-lisp-user::peck-fitts-coeff)) :readers (common-lisp-user::peck-fitts-coeff) :name common-lisp-user::peck-fitts-coeff) (:initform 0.1 :initargs (:min-fitts-time) :writers ((setf common-lisp-user::min-fitts-time)) :readers (common-lisp-user::min-fitts-time) :name common-lisp-user::min-fitts-time) (:initform nil :initargs (:incremental-mouse-p) :writers ((setf common-lisp-user::incremental-mouse-p)) :readers (common-lisp-user::incremental-mouse-p) :name common-lisp-user::incremental-mouse-p) (:initform nil :initargs (:cursor-noise) :writers ((setf common-lisp-user::cursor-noise)) :readers (common-lisp-user::cursor-noise) :name common-lisp-user::cursor-noise) make-hash-table #Y(nil nil nil (26 19 0 21 29) #2# #1# 16424) (:allocation :class :initform (make-hash-table) :writers ((setf common-lisp-user::new-requests-table)) :readers (common-lisp-user::new-requests-table) :name common-lisp-user::new-requests-table) :direct-default-initargs :version-string "4.0" constantly :name :motor clos::load-defclass)) #1# 16424) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 15 5 15 6 15 7 1 11 12 14 12 19 6 13 29) #3=#A(t (14) (initialize-instance ext::location (defmethod initialize-instance :after (common-lisp-user::mtr-mod common-lisp-user::motor-module) &key) (#1# . 17725) ext::annotate (:after) (common-lisp-user::motor-module) (common-lisp-user::mtr-mod &key) common-lisp-user::mtr-mod (t) common-lisp-user::home-hands #Y(initialize-instance nil nil (24 45 8 28 9 13 0 19 1 10 29) #3# #1# 17725) t clos::install-method)) #1# 17725) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 15 5 15 6 15 7 1 14 12 14 15 19 6 16 29) #4=#A(t (17) (common-lisp-user::reset-pm-module ext::location (defmethod common-lisp-user::reset-pm-module :after (common-lisp-user::mtr-mod common-lisp-user::motor-module)) (#1# . 17819) ext::annotate (:after) (common-lisp-user::motor-module) (common-lisp-user::mtr-mod) common-lisp-user::mtr-mod #:g12938 #A(t (2) (0 0)) #:g12939 (setf common-lisp-user::eff-cursor-loc) common-lisp-user::home-hands #Y(common-lisp-user::reset-pm-module nil nil (24 45 8 26 10 0 45 9 1 10 45 11 13 0 13 1 33 12 18 2 43 1 43 1 13 0 19 1 13 29) #4# #1# 17819) t clos::install-method)) #1# 17819) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 77 19 4 6 29) #A(t (7) (common-lisp-user::hand ext::location (defclass common-lisp-user::hand) (#1# . 18181) ext::annotate ((:writers ((setf common-lisp-user::loc)) :readers (common-lisp-user::loc) :name common-lisp-user::location) (:initargs (:fingers) :writers ((setf common-lisp-user::fingers)) :readers (common-lisp-user::fingers) :name common-lisp-user::finger-offsets)) clos::load-defclass)) #1# 18181) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 14 7 14 8 14 5 15 6 15 9 15 10 19 7 11 29) #A(t (12) (common-lisp-user::finger-loc ext::location (defgeneric common-lisp-user::finger-loc) (#1# . 18470) ext::annotate :lambda-list (common-lisp-user::the-hand common-lisp-user::finger) :delete-methods t :documentation "Return the absolute XY coordinate of <finger>" ensure-generic-function)) #1# 18470) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 17 12 14 18 19 6 19 29) #5=#A(t (20) (common-lisp-user::finger-loc ext::location (defmethod common-lisp-user::finger-loc (common-lisp-user::the-hand common-lisp-user::hand) common-lisp-user::finger) (#1# . 18582) ext::annotate (common-lisp-user::hand t) (common-lisp-user::the-hand common-lisp-user::finger) common-lisp-user::the-hand common-lisp-user::finger common-lisp-user::fingers assoc second common-lisp-user::fngr-offset common-lisp-user::loc svref + vector #Y(common-lisp-user::finger-loc nil nil (24 45 7 24 45 8 26 13 0 13 1 19 1 9 12 19 2 10 16 11 45 12 13 2 19 1 13 12 8 0 17 14 12 13 0 8 0 17 14 12 19 2 15 12 13 2 19 1 13 12 8 1 17 14 12 13 0 8 1 17 14 12 19 2 15 12 19 2 16 43 1 29) #5# #1# 18582) t clos::install-method)) #1# 18582) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 14 7 14 8 14 5 15 6 15 9 15 10 19 7 11 29) #A(t (12) (common-lisp-user::move-finger ext::location (defgeneric common-lisp-user::move-finger) (#1# . 18805) ext::annotate :lambda-list (common-lisp-user::the-hand common-lisp-user::finger common-lisp-user::r common-lisp-user::theta) :delete-methods t :documentation "Returns new XY loc of finger after a move of r, theta.  Also modifies finger offset." ensure-generic-function)) #1# 18805) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 21 12 14 22 19 6 23 29) #6=#A(t (24) (common-lisp-user::move-finger ext::location (defmethod common-lisp-user::move-finger (common-lisp-user::the-hand common-lisp-user::hand) common-lisp-user::finger common-lisp-user::r common-lisp-user::theta) (#1# . 18965) ext::annotate (common-lisp-user::hand t t t) (common-lisp-user::the-hand common-lisp-user::finger common-lisp-user::r common-lisp-user::theta) common-lisp-user::the-hand common-lisp-user::finger common-lisp-user::r common-lisp-user::theta = common-lisp-user::fingers assoc #:g12946 second vector common-lisp-user::polar-move-xy #:g12947 rplaca common-lisp-user::finger-loc #Y(common-lisp-user::move-finger nil nil (24 45 7 24 45 8 24 45 9 24 45 10 26 13 1 9 0 19 2 11 76 39 55 13 2 13 3 19 1 12 12 19 2 13 45 14 13 3 13 4 19 1 12 12 19 2 13 16 15 12 13 2 13 1 19 2 16 12 19 2 17 45 18 10 1 5 12 10 0 17 19 10 0 43 1 43 1 13 3 13 2 19 2 20 29) #6# #1# 18965) t clos::install-method)) #1# 18965) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 14 7 14 8 14 5 15 6 15 9 15 10 19 7 11 29) #A(t (12) (common-lisp-user::move-hand ext::location (defgeneric common-lisp-user::move-hand) (#1# . 19232) ext::annotate :lambda-list (common-lisp-user::the-hand common-lisp-user::r common-lisp-user::theta) :delete-methods t :documentation "Moves the hand to a new location" ensure-generic-function)) #1# 19232) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 16 12 14 17 19 6 18 29) #7=#A(t (19) (common-lisp-user::move-hand ext::location (defmethod common-lisp-user::move-hand (common-lisp-user::the-hand common-lisp-user::hand) common-lisp-user::r common-lisp-user::theta) (#1# . 19331) ext::annotate (common-lisp-user::hand t t) (common-lisp-user::the-hand common-lisp-user::r common-lisp-user::theta) common-lisp-user::the-hand common-lisp-user::r common-lisp-user::theta #:g12954 common-lisp-user::loc vector common-lisp-user::polar-move-xy #:g12955 (setf common-lisp-user::loc) #Y(common-lisp-user::move-hand nil nil (24 45 7 24 45 8 24 45 9 26 10 2 45 10 13 3 19 1 11 12 13 2 13 1 19 2 12 12 19 2 13 45 14 13 0 13 1 33 15 18 2 43 1 43 1 29) #7# #1# 19331) t clos::install-method)) #1# 19331) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 14 7 14 8 14 5 15 6 15 9 15 10 19 7 11 29) #A(t (12) (common-lisp-user::move-a-finger ext::location (defgeneric common-lisp-user::move-a-finger) (#1# . 19452) ext::annotate :lambda-list (common-lisp-user::mtr-mod common-lisp-user::hand common-lisp-user::finger common-lisp-user::r common-lisp-user::theta) :delete-methods t :documentation "Moves a finger, returning the new XY location" ensure-generic-function)) #1# 19452) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 20 12 14 21 19 6 22 29) #8=#A(t (23) (common-lisp-user::move-a-finger ext::location (defmethod common-lisp-user::move-a-finger (common-lisp-user::mtr-mod common-lisp-user::motor-module) common-lisp-user::hand common-lisp-user::finger common-lisp-user::r common-lisp-user::theta) (#1# . 19880) ext::annotate (common-lisp-user::motor-module t t t t) (common-lisp-user::mtr-mod common-lisp-user::hand common-lisp-user::finger common-lisp-user::r common-lisp-user::theta) common-lisp-user::mtr-mod common-lisp-user::hand common-lisp-user::finger common-lisp-user::r common-lisp-user::theta #:g12959 common-lisp-user::right common-lisp-user::right-hand common-lisp-user::move-finger common-lisp-user::left common-lisp-user::left-hand (common-lisp-user::right common-lisp-user::left) si::ecase-error #Y(common-lisp-user::move-a-finger nil nil (24 45 7 24 45 8 24 45 9 24 45 10 24 45 11 26 10 3 45 12 10 0 42 13 18 13 5 19 1 14 12 13 3 13 2 13 1 19 4 15 38 27 42 16 18 13 5 19 1 17 12 13 3 13 2 13 1 19 4 15 38 7 13 0 1 18 17 19 43 1 29) #8# #1# 19880) t clos::install-method)) #1# 19880) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 14 7 14 8 14 5 15 6 15 9 15 10 19 7 11 29) #A(t (12) (common-lisp-user::move-a-hand ext::location (defgeneric common-lisp-user::move-a-hand) (#1# . 20089) ext::annotate :lambda-list (common-lisp-user::mtr-mod common-lisp-user::hand common-lisp-user::r common-lisp-user::theta) :delete-methods t :documentation "Moves a hand, returning the new XY location" ensure-generic-function)) #1# 20089) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 19 12 14 20 19 6 21 29) #9=#A(t (22) (common-lisp-user::move-a-hand ext::location (defmethod common-lisp-user::move-a-hand (common-lisp-user::mtr-mod common-lisp-user::motor-module) common-lisp-user::hand common-lisp-user::r common-lisp-user::theta) (#1# . 20320) ext::annotate (common-lisp-user::motor-module t t t) (common-lisp-user::mtr-mod common-lisp-user::hand common-lisp-user::r common-lisp-user::theta) common-lisp-user::mtr-mod common-lisp-user::hand common-lisp-user::r common-lisp-user::theta #:g12963 common-lisp-user::right common-lisp-user::right-hand common-lisp-user::move-hand common-lisp-user::left common-lisp-user::left-hand (common-lisp-user::right common-lisp-user::left) si::ecase-error #Y(common-lisp-user::move-a-hand nil nil (24 45 7 24 45 8 24 45 9 24 45 10 26 10 2 45 11 10 0 42 12 16 13 4 19 1 13 12 13 2 13 1 19 3 14 38 25 42 15 16 13 4 19 1 16 12 13 2 13 1 19 3 14 38 7 13 0 1 17 17 18 43 1 29) #9# #1# 20320) t clos::install-method)) #1# 20320) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 14 7 14 8 14 5 15 6 15 9 15 10 19 7 11 29) #A(t (12) (common-lisp-user::finger-loc-m ext::location (defgeneric common-lisp-user::finger-loc-m) (#1# . 20502) ext::annotate :lambda-list (common-lisp-user::mtr-mod common-lisp-user::hand common-lisp-user::finger) :delete-methods t :documentation "Return the XY location of the specified finger" ensure-generic-function)) #1# 20502) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 18 12 14 19 19 6 20 29) #10=#A(t (21) (common-lisp-user::finger-loc-m ext::location (defmethod common-lisp-user::finger-loc-m (common-lisp-user::mtr-mod common-lisp-user::motor-module) common-lisp-user::hand common-lisp-user::finger) (#1# . 20755) ext::annotate (common-lisp-user::motor-module t t) (common-lisp-user::mtr-mod common-lisp-user::hand common-lisp-user::finger) common-lisp-user::mtr-mod common-lisp-user::hand common-lisp-user::finger #:g12967 common-lisp-user::right common-lisp-user::right-hand common-lisp-user::finger-loc common-lisp-user::left common-lisp-user::left-hand (common-lisp-user::right common-lisp-user::left) si::ecase-error #Y(common-lisp-user::finger-loc-m nil nil (24 45 7 24 45 8 24 45 9 26 10 1 45 10 10 0 42 11 14 13 3 19 1 12 12 13 1 19 2 13 38 23 42 14 14 13 3 19 1 15 12 13 1 19 2 13 38 7 13 0 1 16 17 17 43 1 29) #10# #1# 20755) t clos::install-method)) #1# 20755) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 14 7 14 8 14 5 15 6 15 9 15 10 19 7 11 29) #A(t (12) (common-lisp-user::home-hands ext::location (defgeneric common-lisp-user::home-hands) (#1# . 20937) ext::annotate :lambda-list (common-lisp-user::mtr-mod) :delete-methods t :documentation "Sets the hand and finger locations to home row locations" ensure-generic-function)) #1# 20937) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 39 12 14 40 19 6 41 29) #11=#A(t (42) (common-lisp-user::home-hands ext::location (defmethod common-lisp-user::home-hands (common-lisp-user::mtr-mod common-lisp-user::motor-module)) (#1# . 21188) ext::annotate (common-lisp-user::motor-module) (common-lisp-user::mtr-mod) common-lisp-user::mtr-mod common-lisp-user::right-hand #:g12992 #A(t (2) (7 4)) #:g12993 (setf common-lisp-user::loc) common-lisp-user::left-hand #:g12994 #A(t (2) (4 4)) #:g12995 (setf common-lisp-user::loc) #:g12996 common-lisp-user::index #A(t (2) (0 0)) common-lisp-user::middle #A(t (2) (1 0)) common-lisp-user::ring #A(t (2) (2 0)) common-lisp-user::pinkie #A(t (2) (3 0)) common-lisp-user::thumb #A(t (2) (-1 2)) #:g12997 (setf common-lisp-user::fingers) #:g12998 #A(t (2) (0 0)) #A(t (2) (-1 0)) #A(t (2) (-2 0)) #A(t (2) (-3 0)) #A(t (2) (1 2)) #:g12999 (setf common-lisp-user::fingers) #Y(common-lisp-user::home-hands nil nil (24 45 7 26 13 0 19 1 8 45 9 1 10 45 11 13 0 13 1 33 12 18 2 43 1 43 1 13 0 19 1 13 45 14 1 15 45 16 13 0 13 1 33 17 18 2 43 1 43 1 13 0 19 1 8 45 18 15 19 1 20 6 2 12 15 21 1 22 6 2 12 15 23 1 24 6 2 12 15 25 1 26 6 2 12 15 27 1 28 6 2 6 5 45 29 13 0 13 1 33 30 18 2 43 1 43 1 13 0 19 1 13 45 31 15 19 1 32 6 2 12 15 21 1 33 6 2 12 15 23 1 34 6 2 12 15 25 1 35 6 2 12 15 27 1 36 6 2 6 5 45 37 13 0 13 1 33 38 18 2 43 1 43 1 29) #11# #1# 21188) t clos::install-method)) #1# 21188) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 15 12 14 16 19 6 17 29) #12=#A(t (18) (common-lisp-user::loc->key ext::location (defmethod common-lisp-user::loc->key (common-lisp-user::mtr-mod common-lisp-user::motor-module) (common-lisp-user::loc vector)) (#1# . 21725) ext::annotate (common-lisp-user::motor-module vector) (common-lisp-user::mtr-mod common-lisp-user::loc) common-lisp-user::mtr-mod common-lisp-user::loc #A(t (2) (28 2)) common-lisp-user::vpt= common-lisp-user::mouse common-lisp-user::loc->key-arr svref aref #Y(common-lisp-user::loc->key nil nil (24 45 7 24 45 8 26 13 0 15 9 19 2 10 39 6 1 11 73 38 24 13 1 19 1 12 12 13 0 8 0 17 13 12 13 0 8 1 17 13 12 19 3 14 29) #12# #1# 21725) t clos::install-method)) #1# 21725) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 13 12 19 2 14 15 0 15 15 15 16 19 3 17 1 0 73 29) #13=#A(t (18) (common-lisp-user::distance= ext::location (defun common-lisp-user::distance=) (#1# . 22065) ext::annotate :lambda-list (common-lisp-user::d1 common-lisp-user::d2) common-lisp-user::d1 common-lisp-user::d2 2.0 - abs > #Y(common-lisp-user::distance= nil nil (24 45 7 24 45 8 26 10 1 39 3 10 0 73 39 16 15 9 13 1 13 0 19 2 10 16 11 12 19 2 12 29) #13# #1# 22065) si::fset function "Two distances are not equal if they are more than two degrees apart." si::set-documentation)) #1# 22065) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 14 12 19 2 15 15 0 15 16 15 17 19 3 18 1 0 73 29) #14=#A(t (19) (common-lisp-user::direction= ext::location (defun common-lisp-user::direction=) (#1# . 22321) ext::annotate :lambda-list (common-lisp-user::d1 common-lisp-user::d2) common-lisp-user::d1 common-lisp-user::d2 pi / - abs > #Y(common-lisp-user::direction= nil nil (24 45 7 24 45 8 26 10 1 39 3 10 0 73 39 22 14 9 9 4 19 2 10 12 13 1 13 0 19 2 11 16 12 12 19 2 13 29) #14# #1# 22321) si::fset function "Two directions are not equal if they are more than pi/4 apart." si::set-documentation)) #1# 22321) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 14 12 19 2 15 1 0 73 29) #15=#A(t (16) (common-lisp-user::device->order ext::location (defun common-lisp-user::device->order) (#1# . 22471) ext::annotate :lambda-list (common-lisp-user::device) common-lisp-user::device #:g13001 common-lisp-user::mouse common-lisp-user::joystick-1 common-lisp-user::joystick-2 (common-lisp-user::mouse common-lisp-user::joystick-1 common-lisp-user::joystick-2) si::ecase-error #Y(common-lisp-user::device->order nil nil (24 45 7 26 10 0 45 8 10 0 42 9 6 8 0 73 38 23 42 10 6 8 1 73 38 15 42 11 6 8 2 73 38 7 13 0 1 12 17 13 43 1 29) #15# #1# 22471) si::fset)) #1# 22471) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 14 7 14 8 14 5 15 6 15 9 15 10 19 7 11 29) #A(t (12) (common-lisp-user::xy-to-polar ext::location (defgeneric common-lisp-user::xy-to-polar) (#1# . 22573) ext::annotate :lambda-list (common-lisp-user::from common-lisp-user::to) :delete-methods t :documentation "Given a starting and ending location in xy, return polar difference" ensure-generic-function)) #1# 22573) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 17 12 14 18 19 6 19 29) #16=#A(t (20) (common-lisp-user::xy-to-polar ext::location (defmethod common-lisp-user::xy-to-polar (common-lisp-user::from vector) (common-lisp-user::to vector)) (#1# . 22700) ext::annotate (vector vector) (common-lisp-user::from common-lisp-user::to) common-lisp-user::from common-lisp-user::to common-lisp-user::dist common-lisp-user::distance zerop 0.0 svref - atan vector #Y(common-lisp-user::xy-to-polar nil nil (24 45 7 24 45 8 26 13 1 13 0 19 2 9 45 10 13 0 10 0 16 11 39 6 1 12 73 38 40 13 1 8 1 17 13 12 13 2 8 1 17 13 12 19 2 14 12 13 1 8 0 17 13 12 13 2 8 0 17 13 12 19 2 14 12 19 2 15 12 19 2 16 43 1 29) #16# #1# 22700) t clos::install-method)) #1# 22700) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 11 12 14 12 19 6 13 29) #17=#A(t (14) (common-lisp-user::xy-to-polar ext::location (defmethod common-lisp-user::xy-to-polar (common-lisp-user::from list) (common-lisp-user::to list)) (#1# . 22949) ext::annotate (list list) (common-lisp-user::from common-lisp-user::to) common-lisp-user::from common-lisp-user::to vector coerce #Y(common-lisp-user::xy-to-polar nil nil (24 45 7 24 45 8 26 13 1 1 9 17 10 12 13 0 1 9 17 10 12 19 2 0 29) #17# #1# 22949) t clos::install-method)) #1# 22949) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 14 7 14 8 14 5 15 6 15 9 15 10 19 7 11 29) #A(t (12) (common-lisp-user::fitts ext::location (defgeneric common-lisp-user::fitts) (#1# . 23057) ext::annotate :lambda-list (common-lisp-user::mtr-mod common-lisp-user::coef common-lisp-user::d &optional common-lisp-user::w) :delete-methods t :documentation "Fitts law time for movement" ensure-generic-function)) #1# 23057) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 32 12 14 33 19 6 34 29) #18=#A(t (35) (common-lisp-user::fitts ext::location (defmethod common-lisp-user::fitts (common-lisp-user::mtr-mod common-lisp-user::motor-module) common-lisp-user::coef common-lisp-user::d &optional #19=(common-lisp-user::w #20=1.0)) (#1# . 23377) ext::annotate (common-lisp-user::motor-module t t) (common-lisp-user::mtr-mod common-lisp-user::coef common-lisp-user::d &optional #19#) common-lisp-user::mtr-mod common-lisp-user::coef common-lisp-user::d #20# common-lisp-user::w zerop minusp *error-output* #21="~&#|Warning~:[~*~;~@[ (in model ~a)~]~]: ~@? |#~%" common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "Fitts time computation received a negative or zero width - assuming 1 pixel wide." format finish-output common-lisp-user::pm-pixels-to-angle common-lisp-user::min-fitts-time / 0.5 + log * max #Y(common-lisp-user::fitts nil nil (24 45 7 24 45 8 24 45 9 25 40 3 15 10 46 11 26 10 0 16 12 40 5 10 0 16 13 39 44 14 14 15 15 19 0 16 73 39 12 19 0 17 16 18 12 9 1 19 2 19 12 19 0 20 12 15 21 19 5 22 14 14 19 1 23 9 1 19 1 24 51 0 13 3 19 1 25 12 13 2 13 1 13 0 19 2 26 12 15 27 19 2 28 12 9 2 19 2 29 12 19 2 30 12 19 2 31 29) #18# #1# 23377) t clos::install-method)) #1# 23377) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 15 5 15 6 14 7 15 8 15 9 11 9 16 10 6 3 12 15 11 15 12 1 13 16 10 6 3 6 2 6 2 12 19 4 14 15 0 15 1 15 15 15 16 19 4 4 15 0 77 15 17 15 18 1 32 12 14 33 19 6 34 29) #22=#A(t (35) (common-lisp-user::punch ext::location (defclass common-lisp-user::punch) (#1# . 23721) ext::annotate (common-lisp-user::movement-style) ((:initform nil :initargs (:hand) :writers ((setf common-lisp-user::hand)) :readers (common-lisp-user::hand) :name common-lisp-user::hand) (:initform nil :initargs (:finger) :writers ((setf common-lisp-user::finger)) :readers (common-lisp-user::finger) :name common-lisp-user::finger)) :direct-default-initargs :style-name :punch constantly :feature-slots '#23=(common-lisp-user::hand common-lisp-user::finger) #23# clos::load-defclass (defmethod common-lisp-user::punch #24=(common-lisp-user::module common-lisp-user::pm-module) &key common-lisp-user::hand common-lisp-user::finger . #25=(common-lisp-user::request-spec)) (#1# . 23721) (common-lisp-user::pm-module) (common-lisp-user::module &key common-lisp-user::hand common-lisp-user::finger common-lisp-user::request-spec) common-lisp-user::module (t :request-spec :finger :hand) common-lisp-user::hand common-lisp-user::finger common-lisp-user::request-spec common-lisp-user::check-jam common-lisp-user::check-specs common-lisp-user::complete-request :request-spec :hand :finger make-instance common-lisp-user::prepare-movement #Y(common-lisp-user::punch nil nil (24 45 19 28 20 22 40 2 77 46 21 22 40 2 77 46 22 22 40 2 77 46 23 13 3 19 1 24 40 10 15 0 13 2 13 1 19 3 25 39 8 13 0 19 1 26 38 24 13 3 15 0 14 27 13 0 14 28 13 2 14 29 13 1 19 7 30 12 19 2 31 29) #22# #1# 23721) t clos::install-method)) #1# 23721) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 13 12 14 14 19 6 15 29) #26=#A(t (16) (common-lisp-user::compute-exec-time ext::location (defmethod common-lisp-user::compute-exec-time (common-lisp-user::mtr-mod common-lisp-user::motor-module) (common-lisp-user::self common-lisp-user::punch)) (#1# . 23867) ext::annotate (common-lisp-user::motor-module common-lisp-user::punch) (common-lisp-user::mtr-mod common-lisp-user::self) common-lisp-user::mtr-mod common-lisp-user::self common-lisp-user::init-time common-lisp-user::current-device-interface common-lisp-user::key-closure-time + #Y(common-lisp-user::compute-exec-time nil nil (24 45 7 24 45 8 26 13 1 19 1 9 12 19 0 10 12 19 1 11 12 19 2 12 29) #26# #1# 23867) t clos::install-method)) #1# 23867) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 12 12 14 13 19 6 14 29) #27=#A(t (15) (common-lisp-user::compute-finish-time ext::location (defmethod common-lisp-user::compute-finish-time (common-lisp-user::mtr-mod common-lisp-user::motor-module) (common-lisp-user::self common-lisp-user::punch)) (#1# . 24015) ext::annotate (common-lisp-user::motor-module common-lisp-user::punch) (common-lisp-user::mtr-mod common-lisp-user::self) common-lisp-user::mtr-mod common-lisp-user::self common-lisp-user::init-time common-lisp-user::burst-time + #Y(common-lisp-user::compute-finish-time nil nil (24 45 7 24 45 8 26 13 1 19 1 9 12 13 1 19 1 10 12 13 1 19 1 10 12 19 3 11 29) #27# #1# 24015) t clos::install-method)) #1# 24015) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 12 12 14 13 19 6 14 29) #28=#A(t (15) (common-lisp-user::feat-differences ext::location (defmethod common-lisp-user::feat-differences (common-lisp-user::p1 common-lisp-user::punch) (common-lisp-user::p2 common-lisp-user::punch)) (#1# . 24166) ext::annotate (common-lisp-user::punch common-lisp-user::punch) (common-lisp-user::p1 common-lisp-user::p2) common-lisp-user::p1 common-lisp-user::p2 common-lisp-user::hand eq common-lisp-user::finger #Y(common-lisp-user::feat-differences nil nil (24 45 7 24 45 8 26 13 1 19 1 9 12 13 0 19 1 9 17 10 76 39 6 8 2 73 38 25 13 1 19 1 11 12 13 0 19 1 11 17 10 76 39 6 8 1 73 38 4 8 0 73 29) #28# #1# 24166) t clos::install-method)) #1# 24166) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 25 12 14 13 19 6 26 29) #29=#A(t (27) (common-lisp-user::queue-output-events ext::location (defmethod common-lisp-user::queue-output-events (common-lisp-user::mtr-mod common-lisp-user::motor-module) (common-lisp-user::self common-lisp-user::punch)) (#1# . 24325) ext::annotate (common-lisp-user::motor-module common-lisp-user::punch) (common-lisp-user::mtr-mod common-lisp-user::self) common-lisp-user::mtr-mod common-lisp-user::self common-lisp-user::exec-time common-lisp-user::seconds->ms common-lisp-user::output-key :time-in-ms t :destination :device :module :motor :output common-lisp-user::medium :params common-lisp-user::hand common-lisp-user::finger common-lisp-user::move-a-finger common-lisp-user::schedule-event-relative #Y(common-lisp-user::queue-output-events nil nil (24 45 7 24 45 8 26 13 0 19 1 9 12 19 1 10 12 15 11 14 12 14 13 14 14 14 15 14 16 14 17 14 18 15 19 14 20 13 1 13 0 19 1 21 12 13 0 19 1 22 12 9 0 9 0 19 5 23 6 1 12 19 12 24 29) #29# #1# 24325) clos::install-method)) #1# 24325) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 15 5 15 6 14 7 15 8 15 9 11 9 16 10 6 3 12 15 11 15 12 1 13 16 10 6 3 6 2 6 2 12 19 4 14 15 0 15 1 15 15 15 16 19 4 4 15 0 77 15 17 15 18 1 36 12 14 37 19 6 38 29) #30=#A(t (39) (common-lisp-user::hfrt-movement ext::location (defclass common-lisp-user::hfrt-movement) (#1# . 24629) ext::annotate (common-lisp-user::movement-style) ((:initform nil :initargs (:hand) :writers ((setf common-lisp-user::hand)) :readers (common-lisp-user::hand) :name common-lisp-user::hand) (:initform nil :initargs (:finger) :writers ((setf common-lisp-user::finger)) :readers (common-lisp-user::finger) :name common-lisp-user::finger) (:initform nil :initargs (:r) :writers ((setf common-lisp-user::r)) :readers (common-lisp-user::r) :name common-lisp-user::r) (:initform nil :initargs (:theta) :writers ((setf common-lisp-user::theta)) :readers (common-lisp-user::theta) :name common-lisp-user::theta)) :direct-default-initargs :style-name :hfrt-movement constantly :feature-slots '#31=(common-lisp-user::hand common-lisp-user::finger common-lisp-user::r common-lisp-user::theta) #31# clos::load-defclass (defmethod common-lisp-user::hfrt-movement #24# &key common-lisp-user::hand common-lisp-user::finger common-lisp-user::r common-lisp-user::theta . #25#) (#1# . 24629) (common-lisp-user::pm-module) (common-lisp-user::module &key common-lisp-user::hand common-lisp-user::finger common-lisp-user::r common-lisp-user::theta common-lisp-user::request-spec) common-lisp-user::module (t :request-spec :theta :r :finger :hand) common-lisp-user::hand common-lisp-user::finger common-lisp-user::r common-lisp-user::theta common-lisp-user::request-spec common-lisp-user::check-jam common-lisp-user::check-specs common-lisp-user::complete-request :request-spec :hand :finger :r :theta make-instance common-lisp-user::prepare-movement #Y(common-lisp-user::hfrt-movement nil nil (24 45 19 28 20 22 40 2 77 46 21 22 40 2 77 46 22 22 40 2 77 46 23 22 40 2 77 46 24 22 40 2 77 46 25 13 5 19 1 26 40 14 15 0 13 4 13 3 13 2 13 1 19 5 27 39 8 13 0 19 1 28 38 32 13 5 15 0 14 29 13 0 14 30 13 4 14 31 13 3 14 32 13 2 14 33 13 1 19 11 34 12 19 2 35 29) #30# #1# 24629) t clos::install-method)) #1# 24629) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 24 12 14 25 19 6 26 29) #32=#A(t (27) (common-lisp-user::feat-differences ext::location (defmethod common-lisp-user::feat-differences (common-lisp-user::m1 common-lisp-user::hfrt-movement) (common-lisp-user::m2 common-lisp-user::hfrt-movement)) (#1# . 24805) ext::annotate (common-lisp-user::hfrt-movement common-lisp-user::hfrt-movement) (common-lisp-user::m1 common-lisp-user::m2) common-lisp-user::m1 common-lisp-user::m2 common-lisp-user::num-possible-feats common-lisp-user::maxfeats common-lisp-user::hand eq 1- common-lisp-user::finger - common-lisp-user::nfeats common-lisp-user::r common-lisp-user::distance= #:g13019 + common-lisp-user::theta common-lisp-user::direction= #:g13021 #Y(common-lisp-user::feat-differences nil nil (24 45 7 24 45 8 26 13 1 19 1 9 45 10 13 2 19 1 11 12 13 1 19 1 11 17 12 76 39 7 10 0 16 13 38 101 13 2 19 1 14 12 13 1 19 1 14 17 12 76 39 10 13 0 9 2 19 2 15 38 76 8 0 45 16 13 3 19 1 17 12 13 2 19 1 17 12 19 2 18 76 39 16 8 1 45 19 13 1 13 0 19 2 20 51 1 43 1 13 3 19 1 21 12 13 2 19 1 21 12 19 2 22 76 39 16 8 1 45 23 13 1 13 0 19 2 20 51 1 43 1 10 0 73 43 1 43 1 29) #32# #1# 24805) t clos::install-method)) #1# 24805) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 15 5 15 6 14 7 15 8 15 9 11 9 16 10 6 3 12 15 11 15 12 1 13 16 10 6 3 6 2 6 2 12 19 4 14 15 0 15 1 15 15 15 16 19 4 4 15 0 77 15 17 15 18 1 36 12 14 37 19 6 38 29) #33=#A(t (39) (common-lisp-user::peck ext::location (defclass common-lisp-user::peck) (#1# . 25237) ext::annotate (common-lisp-user::hfrt-movement) ((:initform nil :initargs (:hand) :writers ((setf common-lisp-user::hand)) :readers (common-lisp-user::hand) :name common-lisp-user::hand) (:initform nil :initargs (:finger) :writers ((setf common-lisp-user::finger)) :readers (common-lisp-user::finger) :name common-lisp-user::finger) (:initform nil :initargs (:r) :writers ((setf common-lisp-user::r)) :readers (common-lisp-user::r) :name common-lisp-user::r) (:initform nil :initargs (:theta) :writers ((setf common-lisp-user::theta)) :readers (common-lisp-user::theta) :name common-lisp-user::theta)) :direct-default-initargs :style-name :peck constantly :feature-slots '#34=(common-lisp-user::hand common-lisp-user::finger common-lisp-user::r common-lisp-user::theta) #34# clos::load-defclass (defmethod common-lisp-user::peck #24# &key common-lisp-user::hand common-lisp-user::finger common-lisp-user::r common-lisp-user::theta . #25#) (#1# . 25237) (common-lisp-user::pm-module) (common-lisp-user::module &key common-lisp-user::hand common-lisp-user::finger common-lisp-user::r common-lisp-user::theta common-lisp-user::request-spec) common-lisp-user::module (t :request-spec :theta :r :finger :hand) common-lisp-user::hand common-lisp-user::finger common-lisp-user::r common-lisp-user::theta common-lisp-user::request-spec common-lisp-user::check-jam common-lisp-user::check-specs common-lisp-user::complete-request :request-spec :hand :finger :r :theta make-instance common-lisp-user::prepare-movement #Y(common-lisp-user::peck nil nil (24 45 19 28 20 22 40 2 77 46 21 22 40 2 77 46 22 22 40 2 77 46 23 22 40 2 77 46 24 22 40 2 77 46 25 13 5 19 1 26 40 14 15 0 13 4 13 3 13 2 13 1 19 5 27 39 8 13 0 19 1 28 38 32 13 5 15 0 14 29 13 0 14 30 13 4 14 31 13 3 14 32 13 2 14 33 13 1 19 11 34 12 19 2 35 29) #33# #1# 25237) t clos::install-method)) #1# 25237) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 17 12 14 18 19 6 19 29) #35=#A(t (20) (common-lisp-user::compute-exec-time ext::location (defmethod common-lisp-user::compute-exec-time (common-lisp-user::mtr-mod common-lisp-user::motor-module) (common-lisp-user::self common-lisp-user::peck)) (#1# . 25399) ext::annotate (common-lisp-user::motor-module common-lisp-user::peck) (common-lisp-user::mtr-mod common-lisp-user::self) common-lisp-user::mtr-mod common-lisp-user::self common-lisp-user::init-time common-lisp-user::burst-time common-lisp-user::peck-fitts-coeff common-lisp-user::r common-lisp-user::fitts common-lisp-user::randomize-time max + #Y(common-lisp-user::compute-exec-time nil nil (24 45 7 24 45 8 26 13 1 19 1 9 12 13 1 19 1 10 12 13 1 13 1 19 1 11 12 13 0 19 1 12 12 19 3 13 12 19 1 14 12 19 2 15 12 19 2 16 29) #35# #1# 25399) t clos::install-method)) #1# 25399) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 27 12 14 13 19 6 28 29) #36=#A(t (29) (common-lisp-user::queue-output-events ext::location (defmethod common-lisp-user::queue-output-events (common-lisp-user::mtr-mod common-lisp-user::motor-module) (common-lisp-user::self common-lisp-user::peck)) (#1# . 25617) ext::annotate (common-lisp-user::motor-module common-lisp-user::peck) (common-lisp-user::mtr-mod common-lisp-user::self) common-lisp-user::mtr-mod common-lisp-user::self common-lisp-user::exec-time common-lisp-user::seconds->ms common-lisp-user::output-key :time-in-ms t :destination :device :module :motor :output common-lisp-user::medium :params common-lisp-user::hand common-lisp-user::finger common-lisp-user::r common-lisp-user::theta common-lisp-user::move-a-finger common-lisp-user::schedule-event-relative #Y(common-lisp-user::queue-output-events nil nil (24 45 7 24 45 8 26 13 0 19 1 9 12 19 1 10 12 15 11 14 12 14 13 14 14 14 15 14 16 14 17 14 18 15 19 14 20 13 1 13 0 19 1 21 12 13 0 19 1 22 12 13 0 19 1 23 12 13 0 19 1 24 12 19 5 25 6 1 12 19 12 26 29) #36# #1# 25617) clos::install-method)) #1# 25617) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 15 5 15 6 14 7 15 8 15 9 11 9 16 10 6 3 6 1 6 2 12 19 4 11 29) #A(t (12) (common-lisp-user::peck-recoil ext::location (defclass common-lisp-user::peck-recoil) (#1# . 25937) ext::annotate (common-lisp-user::hfrt-movement) ((:writers ((setf common-lisp-user::move-time)) :readers (common-lisp-user::move-time) :name common-lisp-user::move-time)) :direct-default-initargs :style-name :peck constantly clos::load-defclass)) #1# 25937) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 21 12 14 22 19 6 23 29) #37=#A(t (24) (common-lisp-user::compute-exec-time ext::location (defmethod common-lisp-user::compute-exec-time (common-lisp-user::mtr-mod common-lisp-user::motor-module) (common-lisp-user::self common-lisp-user::peck-recoil)) (#1# . 26175) ext::annotate (common-lisp-user::motor-module common-lisp-user::peck-recoil) (common-lisp-user::mtr-mod common-lisp-user::self) common-lisp-user::mtr-mod common-lisp-user::self #:g13028 common-lisp-user::burst-time common-lisp-user::peck-fitts-coeff common-lisp-user::r common-lisp-user::fitts max #:g13029 (setf common-lisp-user::move-time) common-lisp-user::init-time common-lisp-user::move-time common-lisp-user::randomize-time + #Y(common-lisp-user::compute-exec-time nil nil (24 45 7 24 45 8 26 10 0 45 9 13 2 19 1 10 12 13 2 13 2 19 1 11 12 13 1 19 1 12 12 19 3 13 12 19 2 14 45 15 13 0 13 1 33 16 18 2 43 1 43 1 13 1 19 1 17 12 13 1 19 1 10 12 13 0 19 1 18 12 19 1 19 12 19 2 14 12 19 2 20 29) #37# #1# 26175) t clos::install-method)) #1# 26175) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 15 12 14 16 19 6 17 29) #38=#A(t (18) (common-lisp-user::compute-finish-time ext::location (defmethod common-lisp-user::compute-finish-time (common-lisp-user::mtr-mod common-lisp-user::motor-module) (common-lisp-user::self common-lisp-user::peck-recoil)) (#1# . 26493) ext::annotate (common-lisp-user::motor-module common-lisp-user::peck-recoil) (common-lisp-user::mtr-mod common-lisp-user::self) common-lisp-user::mtr-mod common-lisp-user::self common-lisp-user::exec-time common-lisp-user::burst-time common-lisp-user::move-time common-lisp-user::randomize-time max + #Y(common-lisp-user::compute-finish-time nil nil (24 45 7 24 45 8 26 13 0 19 1 9 12 13 1 19 1 10 12 13 1 19 1 10 12 13 0 19 1 11 12 19 1 12 12 19 2 13 12 19 3 14 29) #38# #1# 26493) t clos::install-method)) #1# 26493) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 29 12 14 13 19 6 30 29) #39=#A(t (31) (common-lisp-user::queue-output-events ext::location (defmethod common-lisp-user::queue-output-events (common-lisp-user::mtr-mod common-lisp-user::motor-module) (common-lisp-user::self common-lisp-user::peck-recoil)) (#1# . 26696) ext::annotate (common-lisp-user::motor-module common-lisp-user::peck-recoil) (common-lisp-user::mtr-mod common-lisp-user::self) common-lisp-user::mtr-mod common-lisp-user::self common-lisp-user::exec-time common-lisp-user::seconds->ms common-lisp-user::output-key :time-in-ms t :destination :device :module :motor :output common-lisp-user::medium :params common-lisp-user::hand common-lisp-user::finger common-lisp-user::finger-loc-m common-lisp-user::r common-lisp-user::theta vector common-lisp-user::polar-move-xy common-lisp-user::schedule-event-relative #Y(common-lisp-user::queue-output-events nil nil (24 45 7 24 45 8 26 13 0 19 1 9 12 19 1 10 12 15 11 14 12 14 13 14 14 14 15 14 16 14 17 14 18 15 19 14 20 13 1 13 0 19 1 21 12 13 0 19 1 22 12 19 3 23 12 13 0 19 1 24 12 13 0 19 1 25 12 19 2 26 12 19 2 27 6 1 12 19 12 28 29) #39# #1# 26696) clos::install-method)) #1# 26696) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 26 12 14 27 19 6 28 29) #40=#A(t (29) (common-lisp-user::peck-recoil ext::location (defmethod common-lisp-user::peck-recoil (common-lisp-user::mtr-mod common-lisp-user::motor-module) &key common-lisp-user::hand common-lisp-user::finger common-lisp-user::r common-lisp-user::theta common-lisp-user::request-spec) (#1# . 27104) ext::annotate (common-lisp-user::motor-module) (common-lisp-user::mtr-mod &key common-lisp-user::hand common-lisp-user::finger common-lisp-user::r common-lisp-user::theta common-lisp-user::request-spec) common-lisp-user::mtr-mod (t :request-spec :theta :r :finger :hand) common-lisp-user::hand common-lisp-user::finger common-lisp-user::r common-lisp-user::theta common-lisp-user::request-spec common-lisp-user::check-jam common-lisp-user::check-specs common-lisp-user::complete-request symbolp symbol-value :hand :finger :r :theta :request-spec make-instance common-lisp-user::prepare-movement #Y(common-lisp-user::peck-recoil nil nil (24 45 7 28 8 22 40 2 77 46 9 22 40 2 77 46 10 22 40 2 77 46 11 22 40 2 77 46 12 22 40 2 77 46 13 13 5 19 1 14 40 14 15 0 13 4 13 3 13 2 13 1 19 5 15 39 8 13 0 19 1 16 38 44 10 1 16 17 39 7 10 1 16 18 51 1 13 5 15 0 14 19 13 4 14 20 13 3 14 21 13 2 14 22 13 1 14 23 13 0 19 11 24 12 19 2 25 29) #40# #1# 27104) t clos::install-method)) #1# 27104) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 15 5 15 6 14 7 1 11 12 1 12 7 3 6 2 12 14 13 15 14 15 15 11 15 16 16 6 3 12 15 17 15 18 11 18 16 16 6 3 12 15 19 15 20 1 22 6 3 6 3 6 2 12 19 4 23 29) #41=#A(t (24) (common-lisp-user::ply ext::location (defclass common-lisp-user::ply) (#1# . 27523) ext::annotate (common-lisp-user::hfrt-movement) (:initargs (:fitts-coeff) :writers ((setf common-lisp-user::fitts-coeff)) :readers (common-lisp-user::fitts-coeff) :name common-lisp-user::fitts-coeff) :initfunction :motor common-lisp-user::get-module-fct common-lisp-user::default-target-width #Y(nil nil nil (26 15 8 19 1 9 73 39 10 15 8 19 1 9 12 19 1 10 29) #41# #1# 27523) (:initform (when (common-lisp-user::get-module :motor) (common-lisp-user::default-target-width (common-lisp-user::get-module :motor))) :initargs (:target-width) :writers ((setf common-lisp-user::target-width)) :readers (common-lisp-user::target-width) :name common-lisp-user::target-width) :direct-default-initargs :finger :dummy constantly :style-name :ply :fitts-coeff (common-lisp-user::peck-fitts-coeff (common-lisp-user::get-module :motor)) common-lisp-user::peck-fitts-coeff #Y(nil nil nil (26 15 8 19 1 9 12 19 1 21 29) #41# #1# 27523) clos::load-defclass)) #1# 27523) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 23 12 14 13 19 6 24 29) #42=#A(t (25) (common-lisp-user::queue-output-events ext::location (defmethod common-lisp-user::queue-output-events (common-lisp-user::mtr-mod common-lisp-user::motor-module) (common-lisp-user::self common-lisp-user::ply)) (#1# . 28036) ext::annotate (common-lisp-user::motor-module common-lisp-user::ply) (common-lisp-user::mtr-mod common-lisp-user::self) common-lisp-user::mtr-mod common-lisp-user::self common-lisp-user::exec-time common-lisp-user::seconds->ms common-lisp-user::move-a-finger :time-in-ms t :destination :motor :module :params common-lisp-user::hand common-lisp-user::finger common-lisp-user::r common-lisp-user::theta common-lisp-user::schedule-event-relative #Y(common-lisp-user::queue-output-events nil nil (24 45 7 24 45 8 26 13 0 19 1 9 12 19 1 10 12 15 11 14 12 14 13 14 14 14 15 14 16 14 15 14 17 13 0 19 1 18 12 13 0 19 1 19 12 13 0 19 1 20 12 13 0 19 1 21 6 4 12 19 10 22 29) #42# #1# 28036) clos::install-method)) #1# 28036) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 16 12 14 17 19 6 18 29) #43=#A(t (19) (common-lisp-user::compute-exec-time ext::location (defmethod common-lisp-user::compute-exec-time (common-lisp-user::mtr-mod common-lisp-user::motor-module) (common-lisp-user::self common-lisp-user::ply)) (#1# . 28319) ext::annotate (common-lisp-user::motor-module common-lisp-user::ply) (common-lisp-user::mtr-mod common-lisp-user::self) common-lisp-user::mtr-mod common-lisp-user::self common-lisp-user::init-time common-lisp-user::fitts-coeff common-lisp-user::r common-lisp-user::target-width common-lisp-user::fitts common-lisp-user::randomize-time + #Y(common-lisp-user::compute-exec-time nil nil (24 45 7 24 45 8 26 13 1 19 1 9 12 13 1 13 0 19 1 10 12 13 0 19 1 11 12 13 0 19 1 12 12 19 4 13 12 19 1 14 12 19 2 15 29) #43# #1# 28319) t clos::install-method)) #1# 28319) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 15 5 15 6 15 7 1 11 12 14 12 19 6 13 29) #44=#A(t (14) (common-lisp-user::num-possible-feats ext::location (defmethod common-lisp-user::num-possible-feats :around (common-lisp-user::self common-lisp-user::ply)) (#1# . 28521) ext::annotate (:around) (common-lisp-user::ply) (common-lisp-user::self) common-lisp-user::self call-next-method - #Y(common-lisp-user::num-possible-feats nil nil (24 45 8 26 19 0 9 12 9 1 19 2 10 29) #44# #1# 28521) t clos::install-method)) #1# 28521) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 15 5 15 6 14 7 15 8 15 9 1 12 6 3 6 1 6 2 12 19 4 13 29) #45=#A(t (14) (common-lisp-user::hand-ply ext::location (defclass common-lisp-user::hand-ply) (#1# . 28602) ext::annotate (common-lisp-user::ply) ((:initform nil :initargs (:offsets) :writers ((setf common-lisp-user::offsets)) :readers (common-lisp-user::offsets) :name common-lisp-user::offsets)) :direct-default-initargs :fitts-coeff (when (common-lisp-user::current-device-interface) (common-lisp-user::mouse-fitts-coeff (common-lisp-user::current-device-interface))) common-lisp-user::current-device-interface common-lisp-user::mouse-fitts-coeff #Y(nil nil nil (26 19 0 10 73 39 8 19 0 10 12 19 1 11 29) #45# #1# 28602) clos::load-defclass)) #1# 28602) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 63 12 14 55 19 6 64 29) #46=#A(t (65) (common-lisp-user::queue-output-events ext::location (defmethod common-lisp-user::queue-output-events (common-lisp-user::mtr-mod common-lisp-user::motor-module) (common-lisp-user::self common-lisp-user::hand-ply)) (#1# . 28837) ext::annotate (common-lisp-user::motor-module common-lisp-user::hand-ply) (common-lisp-user::mtr-mod common-lisp-user::self) common-lisp-user::mtr-mod common-lisp-user::self common-lisp-user::offsets common-lisp-user::hand #:g13058 common-lisp-user::right common-lisp-user::right-hand common-lisp-user::left common-lisp-user::left-hand (common-lisp-user::right common-lisp-user::left) si::ecase-error standard eq #:g13059 #:g13061 common-lisp-user::index #A(t (2) (0 0)) common-lisp-user::middle #A(t (2) (1 0)) common-lisp-user::ring #A(t (2) (2 0)) common-lisp-user::pinkie #A(t (2) (3 0)) common-lisp-user::thumb #A(t (2) (-1 2)) #A(t (2) (0 0)) #A(t (2) (-1 0)) #A(t (2) (-2 0)) #A(t (2) (-3 0)) #A(t (2) (1 2)) (common-lisp-user::right common-lisp-user::left) #:g13060 (setf common-lisp-user::fingers) si::%dolist-var common-lisp-user::offset common-lisp-user::fingers assoc common-lisp-user::it #:g13064 second third vector #:g13065 rplaca common-lisp-user::exec-time common-lisp-user::seconds->ms common-lisp-user::move-a-hand :time-in-ms t :destination :motor :module :params common-lisp-user::r common-lisp-user::theta common-lisp-user::schedule-event-relative #Y(common-lisp-user::queue-output-events nil nil (24 45 7 24 45 8 26 13 0 19 1 9 39 257 13 0 19 1 10 45 11 10 0 42 12 8 13 2 19 1 13 38 17 42 14 8 13 2 19 1 15 38 7 13 0 1 16 17 17 43 1 45 10 13 1 19 1 9 12 1 18 17 19 39 120 10 0 45 20 13 2 19 1 10 45 21 10 0 42 12 39 15 22 1 23 6 2 12 15 24 1 25 6 2 12 15 26 1 27 6 2 12 15 28 1 29 6 2 12 15 30 1 31 6 2 6 5 38 48 42 14 39 15 22 1 32 6 2 12 15 24 1 33 6 2 12 15 26 1 34 6 2 12 15 28 1 35 6 2 12 15 30 1 36 6 2 6 5 38 7 13 0 1 37 17 17 43 1 45 38 13 0 13 1 33 39 18 2 43 1 43 1 38 85 13 1 19 1 9 45 40 75 45 41 38 67 10 1 4 51 0 10 0 4 12 13 2 19 1 42 12 19 2 43 45 44 10 0 39 36 10 0 45 45 10 2 16 46 12 10 2 16 47 12 19 2 48 45 49 10 1 5 12 10 0 17 50 10 0 43 1 43 1 38 1 43 1 10 1 5 51 1 10 1 40 -69 43 2 43 1 13 0 19 1 51 12 19 1 52 12 15 53 14 54 14 55 14 56 14 57 14 58 14 57 14 59 13 0 19 1 10 12 13 0 19 1 60 12 13 0 19 1 61 6 3 12 19 10 62 29) #46# #1# 28837) clos::install-method)) #1# 28837) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 15 5 15 6 14 7 15 8 15 9 1 10 16 11 6 3 12 15 12 15 13 1 16 6 3 6 2 6 2 12 19 4 17 29) #47=#A(t (18) (common-lisp-user::cursor-ply ext::location (defclass common-lisp-user::cursor-ply) (#1# . 30295) ext::annotate (common-lisp-user::ply) ((:initargs (:target-coords) :writers ((setf common-lisp-user::target-coords)) :readers (common-lisp-user::target-coords) :name common-lisp-user::target-coords) (:initform 0 :initargs (:control-order) :writers ((setf common-lisp-user::control-order)) :readers (common-lisp-user::control-order) :name common-lisp-user::control-order)) :direct-default-initargs :hand 'common-lisp-user::right common-lisp-user::right constantly :fitts-coeff (when (common-lisp-user::current-device-interface) (common-lisp-user::mouse-fitts-coeff (common-lisp-user::current-device-interface))) common-lisp-user::current-device-interface common-lisp-user::mouse-fitts-coeff #Y(nil nil nil (26 19 0 14 73 39 8 19 0 14 12 19 1 15 29) #47# #1# 30295) clos::load-defclass)) #1# 30295) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 15 5 15 6 15 7 1 17 12 14 18 19 6 19 29) #48=#A(t (20) (common-lisp-user::compute-exec-time ext::location (defmethod common-lisp-user::compute-exec-time :before (common-lisp-user::mtr-mod common-lisp-user::motor-module) (common-lisp-user::self common-lisp-user::cursor-ply)) (#1# . 30627) ext::annotate (:before) (common-lisp-user::motor-module common-lisp-user::cursor-ply) (common-lisp-user::mtr-mod common-lisp-user::self) common-lisp-user::mtr-mod common-lisp-user::self #:g13072 common-lisp-user::control-order expt common-lisp-user::fitts-coeff * #:g13073 (setf common-lisp-user::fitts-coeff) #Y(common-lisp-user::compute-exec-time nil nil (24 45 8 24 45 9 26 10 0 45 10 9 2 13 1 19 1 11 17 12 12 13 1 19 1 13 12 19 2 14 45 15 13 0 13 1 33 16 18 2 43 1 43 1 29) #48# #1# 30627) t clos::install-method)) #1# 30627) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 48 12 14 36 19 6 49 29) #49=#A(t (50) (common-lisp-user::queue-output-events ext::location (defmethod common-lisp-user::queue-output-events (common-lisp-user::mtr-mod common-lisp-user::motor-module) (common-lisp-user::self common-lisp-user::cursor-ply)) (#1# . 30803) ext::annotate (common-lisp-user::motor-module common-lisp-user::cursor-ply) (common-lisp-user::mtr-mod common-lisp-user::self) common-lisp-user::mtr-mod common-lisp-user::self common-lisp-user::incremental-mouse-p common-lisp-user::exec-time common-lisp-user::seconds->ms common-lisp-user::d numberp common-lisp-user::steptime round max common-lisp-user::nsteps common-lisp-user::eff-cursor-loc common-lisp-user::startpos common-lisp-user::curdist common-lisp-user::px-move > - si::%dotimes-var common-lisp-user::idx 1+ * common-lisp-user::r common-lisp-user::minjerk-dist common-lisp-user::pm-angle-to-pixels common-lisp-user::theta vector common-lisp-user::polar-move-xy common-lisp-user::move-cursor-absolute :time-in-ms t :destination :device :module :motor :params common-lisp-user::schedule-event-relative < common-lisp-user::target-coords #:g13096 #:g13097 (setf common-lisp-user::eff-cursor-loc) #Y(common-lisp-user::queue-output-events nil nil (24 45 7 24 45 8 26 13 1 19 1 9 39 186 13 0 19 1 10 12 19 1 11 45 12 13 2 19 1 9 16 13 39 8 13 2 19 1 9 38 3 8 50 45 14 9 1 13 1 13 0 19 2 15 12 19 2 16 45 17 13 4 19 1 18 45 19 8 0 45 20 75 45 21 13 3 9 1 19 2 22 39 115 13 3 9 1 19 2 23 45 24 8 0 45 25 38 89 10 0 16 26 12 13 6 19 2 27 12 13 8 19 1 28 12 13 7 19 3 29 51 3 13 4 13 3 19 1 30 12 13 8 19 1 31 12 19 2 32 12 19 2 33 51 2 10 0 16 26 12 13 6 19 2 27 12 15 34 14 35 14 36 14 37 14 38 14 39 14 40 14 41 10 2 6 1 12 19 10 42 10 0 16 26 51 0 13 0 13 1 19 2 43 40 -96 43 2 43 6 13 0 19 1 10 12 19 1 11 12 15 34 14 35 14 36 14 37 14 38 14 39 14 40 14 41 13 0 19 1 44 6 1 12 19 10 42 10 1 45 45 13 1 19 1 44 45 46 13 0 13 1 33 47 18 2 43 1 43 1 29) #49# #1# 30803) clos::install-method)) #1# 30803) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 21 12 19 2 22 15 0 15 23 15 24 19 3 25 1 0 73 29) #50=#A(t (26) (common-lisp-user::minjerk-dist ext::location (defun common-lisp-user::minjerk-dist) (#1# . 32630) ext::annotate :lambda-list (common-lisp-user::tm common-lisp-user::a common-lisp-user::d) common-lisp-user::tm common-lisp-user::a common-lisp-user::d >= < "Negative time passed to MINJERK-DIST" error = <= / common-lisp-user::td expt * + #Y(common-lisp-user::minjerk-dist nil nil (24 45 7 24 45 8 24 45 9 26 13 2 13 0 19 2 10 39 6 10 1 73 38 104 13 2 9 0 19 2 11 39 8 15 12 19 1 13 38 88 13 2 9 0 19 2 14 39 6 8 0 73 38 74 13 0 9 0 19 2 15 39 6 8 0 73 38 60 13 2 13 0 19 2 16 45 17 13 2 9 10 13 0 8 3 17 18 12 19 2 19 12 9 -15 13 0 8 4 17 18 12 19 2 19 12 9 6 13 0 8 5 17 18 12 19 2 19 12 19 3 20 12 19 2 19 43 1 29) #50# #1# 32630) si::fset function "Returns distance moved at time tm, given max distance a and total move time d." si::set-documentation)) #1# 32630) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 64 12 14 41 19 6 65 29) #51=#A(t (66) (common-lisp-user::point-hand ext::location (defmethod common-lisp-user::point-hand (common-lisp-user::mtr-mod common-lisp-user::motor-module) &key common-lisp-user::hand common-lisp-user::r common-lisp-user::theta common-lisp-user::twidth common-lisp-user::offsets common-lisp-user::request-spec) (#1# . 33011) ext::annotate (common-lisp-user::motor-module) (common-lisp-user::mtr-mod &key common-lisp-user::hand common-lisp-user::r common-lisp-user::theta common-lisp-user::twidth common-lisp-user::offsets common-lisp-user::request-spec) common-lisp-user::mtr-mod (t :request-spec :offsets :twidth :theta :r :hand) common-lisp-user::hand common-lisp-user::r common-lisp-user::theta common-lisp-user::twidth common-lisp-user::offsets common-lisp-user::request-spec common-lisp-user::check-jam common-lisp-user::check-specs common-lisp-user::complete-request standard eq common-lisp-user::x listp length = (common-lisp-user::thumb common-lisp-user::index common-lisp-user::middle common-lisp-user::ring common-lisp-user::pinkie) find second numberp third #Y(nil nil nil (24 45 20 26 10 0 16 21 73 39 41 10 0 16 22 12 9 3 19 2 23 73 39 28 10 0 4 12 15 24 19 2 25 73 39 16 10 0 16 26 16 27 73 39 7 10 0 16 28 16 27 29) #51# #1# 33011) every common-lisp-user::printing-module common-lisp-user::get-module-fct #:g13102 #:g13101 common-lisp-user::printing-module-v common-lisp-user::act-r-output-stream #:g13103 common-lisp-user::printing-module-model-warnings *error-output* common-lisp-user::*one-stream-hack* t *standard-output* eql #52="~&#|Warning~:[~*~; (in model ~a)~]: ~@? |#~%" common-lisp-user::mp-models > common-lisp-user::current-model "Invalid offsets ~s in a point-hand action." format finish-output #53="~&#|Warning~:[~*~; (in model ~a)~]: ~@? |#~%" #54="~&#|Warning~:[~*~; (in model ~a)~]: ~@? |#~%" common-lisp-user::hand-ply :hand :r :theta :target-width common-lisp-user::it common-lisp-user::default-target-width :offsets :request-spec make-instance common-lisp-user::prepare-movement #Y(common-lisp-user::point-hand nil nil (24 45 7 28 8 22 40 2 77 46 9 22 40 2 77 46 10 22 40 2 77 46 11 22 40 2 77 46 12 22 40 2 77 46 13 22 40 2 77 46 14 57 0 60 284 13 7 19 1 15 40 12 15 0 13 6 13 5 13 4 19 4 16 39 8 13 1 19 1 17 38 256 10 2 76 40 17 13 2 1 18 17 19 40 9 34 29 12 13 2 19 2 30 76 39 178 15 31 19 1 32 47 1 33 45 34 10 1 39 10 13 0 19 1 35 12 19 1 36 39 142 13 0 19 1 35 12 19 1 36 45 37 13 1 19 1 38 76 40 121 10 0 76 40 27 13 0 11 39 17 19 40 19 11 40 40 15 13 0 11 41 17 19 39 7 14 39 11 42 17 43 39 33 14 39 15 44 19 0 45 16 22 12 9 1 19 2 46 12 19 0 47 12 15 48 19 5 49 14 39 19 1 50 38 56 14 39 15 51 19 0 45 16 22 12 9 1 19 2 46 12 19 0 47 12 15 48 19 5 49 14 39 19 1 50 13 0 15 52 19 0 45 16 22 12 9 1 19 2 46 12 19 0 47 12 15 48 19 5 49 43 1 43 2 13 1 19 1 17 75 73 36 0 13 7 15 53 14 54 13 6 14 55 13 5 14 56 13 4 14 57 10 3 45 58 10 0 39 6 10 0 73 38 6 13 8 19 1 59 12 43 1 14 60 13 2 14 61 13 1 19 13 62 12 19 2 63 63 29) #51# #1# 33011) clos::install-method)) #1# 33011) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 15 5 77 14 6 15 7 15 8 11 8 16 9 6 3 12 15 10 15 11 1 12 16 9 6 3 6 2 6 2 12 19 4 13 29) #A(t (14) (common-lisp-user::move-cursor ext::location (defclass common-lisp-user::move-cursor) (#1# . 33980) ext::annotate (common-lisp-user::movement-style) :direct-default-initargs :style-name :move-cursor constantly :feature-slots '#55=(common-lisp-user::loc common-lisp-user::object common-lisp-user::device) #55# clos::load-defclass)) #1# 33980) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 93 12 14 35 19 6 94 29) #56=#A(t (95) (common-lisp-user::move-cursor ext::location (defmethod common-lisp-user::move-cursor (common-lisp-user::mtr-mod common-lisp-user::motor-module) &key common-lisp-user::loc common-lisp-user::object #57=(common-lisp-user::device 'common-lisp-user::mouse) common-lisp-user::request-spec) (#1# . 34444) ext::annotate (common-lisp-user::motor-module) (common-lisp-user::mtr-mod &key common-lisp-user::loc common-lisp-user::object #57# common-lisp-user::request-spec) common-lisp-user::mtr-mod (t :request-spec :device :object :loc) common-lisp-user::loc common-lisp-user::object common-lisp-user::mouse common-lisp-user::device common-lisp-user::request-spec common-lisp-user::right-hand #A(t (2) (28 2)) common-lisp-user::vpt= common-lisp-user::exec-s common-lisp-user::busy eq common-lisp-user::last-prep type-of common-lisp-user::hand-ply common-lisp-user::hand common-lisp-user::right common-lisp-user::printing-module common-lisp-user::get-module-fct #:g13113 #:g13112 common-lisp-user::printing-module-v common-lisp-user::act-r-output-stream #:g13114 common-lisp-user::printing-module-model-warnings *error-output* common-lisp-user::*one-stream-hack* t *standard-output* eql #52# common-lisp-user::mp-models length > common-lisp-user::current-model "MOVE-CURSOR requested when hand not at mouse!" format finish-output #53# #54# common-lisp-user::complete-request common-lisp-user::check-jam common-lisp-user::check-specs common-lisp-user::r-theta common-lisp-user::feat :vision common-lisp-user::vision common-lisp-user::vis-loc-slots common-lisp-user::coord-slots common-lisp-user::chunk-visicon-entry common-lisp-user::visicon gethash common-lisp-user::chunk-p-fct common-lisp-user::screen-pos common-lisp-user::chunk-slot-value-fct numberp second #21# common-lisp-user::current-mp-fct "No valid location could be generated from ~s or ~s when trying to move the mouse." common-lisp-user::eff-cursor-loc common-lisp-user::xy-loc common-lisp-user::xy-to-polar svref = #:g13118 #:g13117 #:g13119 "Move-cursor action aborted because cursor is at requested target ~S" common-lisp-user::approach-width common-lisp-user::w common-lisp-user::noisy-loc? common-lisp-user::noisy-target-cords common-lisp-user::r-theta-new common-lisp-user::cursor-ply :request-spec :r common-lisp-user::pm-pixels-to-angle :theta :target-width :target-coords :control-order common-lisp-user::device->order make-instance common-lisp-user::prepare-movement #Y(common-lisp-user::move-cursor nil nil (24 45 7 28 8 22 40 2 77 46 9 22 40 2 77 46 10 22 40 3 15 11 46 12 22 40 2 77 46 13 57 0 60 959 13 5 19 1 14 12 19 1 9 12 15 15 19 2 16 40 41 13 5 19 1 17 12 1 18 17 19 39 29 13 5 19 1 20 16 21 12 1 22 17 19 39 15 13 5 19 1 20 12 19 1 23 12 1 24 17 19 76 39 178 15 25 19 1 26 47 1 27 45 28 10 1 39 10 13 0 19 1 29 12 19 1 30 39 142 13 0 19 1 29 12 19 1 30 45 31 13 1 19 1 32 76 40 121 10 0 76 40 27 13 0 11 33 17 19 40 19 11 34 40 15 13 0 11 35 17 19 39 7 14 33 11 36 17 37 39 33 14 33 15 38 19 0 39 16 40 12 9 1 19 2 41 12 19 0 42 12 15 43 19 5 44 14 33 19 1 45 38 56 14 33 15 46 19 0 39 16 40 12 9 1 19 2 41 12 19 0 42 12 15 43 19 5 44 14 33 19 1 45 13 0 15 47 19 0 39 16 40 12 9 1 19 2 41 12 19 0 42 12 15 43 19 5 44 43 1 43 2 13 1 19 1 48 75 73 36 0 13 5 19 1 49 40 17 15 0 10 4 73 40 4 10 3 73 12 13 2 19 3 50 39 8 13 1 19 1 48 38 689 75 45 51 75 45 52 15 53 19 1 26 45 54 13 0 19 1 55 45 56 10 7 39 27 13 7 19 1 57 39 20 13 7 19 1 57 12 13 1 19 1 58 12 19 2 59 12 19 1 60 39 18 13 7 19 1 57 12 13 1 19 1 58 12 19 2 59 38 265 10 7 39 60 13 7 15 61 19 2 62 39 51 13 7 15 61 19 2 62 12 19 1 60 39 38 13 7 15 61 19 2 62 12 10 0 4 12 19 2 62 16 63 39 19 13 7 15 61 19 2 62 12 10 0 16 64 12 19 2 62 16 63 39 60 13 7 15 61 19 2 62 12 19 1 57 12 13 1 19 1 58 12 19 2 59 12 19 1 60 39 24 13 7 15 61 19 2 62 12 19 1 57 12 13 1 19 1 58 12 19 2 59 38 8 13 7 15 61 19 2 62 38 141 10 8 39 27 13 8 19 1 57 39 20 13 8 19 1 57 12 13 1 19 1 58 12 19 2 59 12 19 1 60 39 18 13 8 19 1 57 12 13 1 19 1 58 12 19 2 59 38 92 10 8 39 33 13 8 19 1 60 39 26 13 8 10 0 4 12 19 2 62 16 63 39 13 13 8 10 0 16 64 12 19 2 62 16 63 39 5 10 8 38 50 14 33 15 65 19 0 66 73 39 12 19 0 39 16 40 12 9 1 19 2 41 12 19 0 42 12 15 67 13 7 13 8 19 7 44 14 33 19 1 45 13 5 19 1 48 75 73 36 4 51 2 13 9 19 1 68 12 13 2 13 1 19 2 69 12 19 2 70 51 3 9 0 13 3 8 0 17 71 12 19 2 72 39 218 13 5 19 1 48 15 25 19 1 26 47 1 73 45 74 10 1 39 10 13 0 19 1 29 12 19 1 30 73 39 183 13 0 19 1 29 12 19 1 30 45 75 13 1 19 1 32 76 40 160 10 0 76 40 27 13 0 11 33 17 19 40 19 11 34 40 15 13 0 11 35 17 19 39 7 14 33 11 36 17 37 39 46 14 33 15 38 19 0 39 16 40 12 9 1 19 2 41 12 19 0 42 12 15 76 10 10 39 6 10 10 73 38 4 10 11 73 12 19 6 44 14 33 19 1 45 38 82 14 33 15 46 19 0 39 16 40 12 9 1 19 2 41 12 19 0 42 12 15 76 10 10 39 6 10 10 73 38 4 10 11 73 12 19 6 44 14 33 19 1 45 13 0 15 47 19 0 39 16 40 12 9 1 19 2 41 12 19 0 42 12 15 76 10 10 39 6 10 10 73 38 4 10 11 73 12 19 6 44 75 73 43 1 43 2 38 102 13 2 13 3 8 1 17 71 12 13 1 19 3 77 45 78 13 10 13 3 13 2 19 2 69 12 13 0 19 3 79 45 80 13 11 19 1 68 12 13 0 19 2 70 45 81 13 12 15 82 14 83 13 8 14 84 13 0 8 0 17 71 12 19 1 85 12 14 86 13 0 8 1 17 71 12 14 87 13 2 14 88 13 1 14 89 13 9 19 1 90 12 19 13 91 12 19 2 92 43 3 43 4 63 29) #56# #1# 34444) clos::install-method)) #1# 34444) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 14 7 14 8 14 5 15 6 15 9 15 10 19 7 11 29) #A(t (12) (common-lisp-user::noisy-loc? ext::location (defgeneric common-lisp-user::noisy-loc?) (#1# . 37760) ext::annotate :lambda-list (common-lisp-user::mtr-mod common-lisp-user::xy-loc common-lisp-user::w) :delete-methods t :documentation "If the Motor Module is set up for it, make the output location noisy." ensure-generic-function)) #1# 37760) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 21 12 14 22 19 6 23 29) #58=#A(t (24) (common-lisp-user::noisy-loc? ext::location (defmethod common-lisp-user::noisy-loc? (common-lisp-user::mm common-lisp-user::motor-module) (common-lisp-user::xy-loc vector) (common-lisp-user::w number)) (#1# . 37896) ext::annotate (common-lisp-user::motor-module vector number) (common-lisp-user::mm common-lisp-user::xy-loc common-lisp-user::w) common-lisp-user::mm common-lisp-user::xy-loc common-lisp-user::w common-lisp-user::cursor-noise common-lisp-user::pm-angle-to-pixels common-lisp-user::pixw zerop 7.8 / common-lisp-user::act-r-noise pi common-lisp-user::act-r-random vector common-lisp-user::polar-move-xy #Y(common-lisp-user::noisy-loc? nil nil (24 45 7 24 45 8 24 45 9 26 13 2 19 1 10 76 39 6 10 1 73 38 48 13 0 19 1 11 45 12 10 0 16 13 39 6 10 2 73 38 28 13 2 13 0 15 14 19 2 15 12 19 1 16 12 14 17 19 1 18 12 19 2 19 12 19 2 20 43 1 29) #58# #1# 37896) t clos::install-method)) #1# 37896) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 14 7 14 8 14 5 15 6 15 9 15 10 19 7 11 29) #A(t (12) (common-lisp-user::click-mouse ext::location (defgeneric common-lisp-user::click-mouse) (#1# . 38502) ext::annotate :lambda-list (common-lisp-user::mtr-mod common-lisp-user::request) :delete-methods t :documentation "Execute a mouse click operation (a punch)" ensure-generic-function)) #1# 38502) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 44 12 14 30 19 6 45 29) #59=#A(t (46) (common-lisp-user::click-mouse ext::location (defmethod common-lisp-user::click-mouse (common-lisp-user::mtr-mod common-lisp-user::motor-module) common-lisp-user::request) (#1# . 38883) ext::annotate (common-lisp-user::motor-module t) (common-lisp-user::mtr-mod common-lisp-user::request) common-lisp-user::mtr-mod common-lisp-user::request common-lisp-user::right-hand common-lisp-user::loc #A(t (2) (28 2)) common-lisp-user::vpt= :hand common-lisp-user::right :finger common-lisp-user::index :request-spec common-lisp-user::punch common-lisp-user::printing-module common-lisp-user::get-module-fct #:g13130 #:g13129 common-lisp-user::printing-module-v common-lisp-user::act-r-output-stream #:g13131 common-lisp-user::printing-module-model-warnings *error-output* eq common-lisp-user::*one-stream-hack* t *standard-output* eql #52# common-lisp-user::mp-models length > common-lisp-user::current-model "CLICK-MOUSE requested when hand not at mouse!" format finish-output #53# #54# common-lisp-user::complete-request #Y(common-lisp-user::click-mouse nil nil (24 45 7 24 45 8 26 13 1 19 1 9 12 19 1 10 12 15 11 19 2 12 39 20 13 1 14 13 15 14 14 15 15 16 14 17 13 0 19 7 18 38 174 15 19 19 1 20 47 1 21 45 22 10 1 39 10 13 0 19 1 23 12 19 1 24 39 142 13 0 19 1 23 12 19 1 24 45 25 13 1 19 1 26 76 40 121 10 0 76 40 27 13 0 11 27 17 28 40 19 11 29 40 15 13 0 11 30 17 28 39 7 14 27 11 31 17 32 39 33 14 27 15 33 19 0 34 16 35 12 9 1 19 2 36 12 19 0 37 12 15 38 19 5 39 14 27 19 1 40 38 56 14 27 15 41 19 0 34 16 35 12 9 1 19 2 36 12 19 0 37 12 15 38 19 5 39 14 27 19 1 40 13 0 15 42 19 0 34 16 35 12 9 1 19 2 36 12 19 0 37 12 15 38 19 5 39 43 1 43 2 13 0 19 1 43 29) #59# #1# 38883) clos::install-method)) #1# 38883) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 13 12 14 14 19 6 15 29) #60=#A(t (16) (common-lisp-user::move-mouse ext::location (defmethod common-lisp-user::move-mouse (common-lisp-user::mtr-mod common-lisp-user::motor-module) common-lisp-user::location) (#1# . 39175) ext::annotate (common-lisp-user::motor-module t) (common-lisp-user::mtr-mod common-lisp-user::location) common-lisp-user::mtr-mod common-lisp-user::location :device common-lisp-user::mouse :loc common-lisp-user::move-cursor #Y(common-lisp-user::move-mouse nil nil (24 45 7 24 45 8 26 13 1 14 9 15 10 14 11 13 0 19 5 12 29) #60# #1# 39175) t clos::install-method)) #1# 39175) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 15 5 77 14 6 15 7 15 8 11 8 16 9 6 3 12 15 10 15 11 1 12 16 9 6 3 6 2 6 2 12 19 4 13 29) #A(t (14) (common-lisp-user::press-key ext::location (defclass common-lisp-user::press-key) (#1# . 39332) ext::annotate (common-lisp-user::movement-style) :direct-default-initargs :style-name :press-key constantly :feature-slots '#61=(common-lisp-user::key) #61# clos::load-defclass)) #1# 39332) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 14 7 14 8 14 5 15 6 15 9 15 10 19 7 11 29) #A(t (12) (common-lisp-user::press-key ext::location (defgeneric common-lisp-user::press-key) (#1# . 39800) ext::annotate :lambda-list (common-lisp-user::mtr-mod &key common-lisp-user::key common-lisp-user::request-spec) :delete-methods t :documentation "High-level interface to press a key: Look up the command and execute it." ensure-generic-function)) #1# 39800) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 30 12 14 31 19 6 32 29) #62=#A(t (33) (common-lisp-user::press-key ext::location (defmethod common-lisp-user::press-key (common-lisp-user::mtr-mod common-lisp-user::motor-module) &key common-lisp-user::key common-lisp-user::request-spec) (#1# . 39951) ext::annotate (common-lisp-user::motor-module) (common-lisp-user::mtr-mod &key common-lisp-user::key common-lisp-user::request-spec) common-lisp-user::mtr-mod (t :request-spec :key) common-lisp-user::key common-lisp-user::request-spec stringp read-from-string common-lisp-user::current-device-interface common-lisp-user::key->cmd common-lisp-user::command common-lisp-user::complete-request *error-output* #21# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "No press-key mapping available for key ~s." format finish-output :request-spec append apply #Y(common-lisp-user::press-key nil nil (24 45 7 28 8 22 40 2 77 46 9 22 40 2 77 46 10 10 1 16 11 39 8 13 1 19 1 12 51 1 19 0 13 12 13 1 19 2 14 45 15 10 0 4 76 39 49 13 1 19 1 16 14 17 15 18 19 0 19 73 39 12 19 0 20 16 21 12 9 1 19 2 22 12 19 0 23 12 15 24 13 2 19 6 25 12 14 17 19 1 26 22 73 38 25 10 0 4 12 13 3 14 27 10 1 6 2 12 10 0 5 12 19 2 28 12 19 3 29 43 1 29) #62# #1# 39951) t clos::install-method)) #1# 39951) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 15 5 77 14 6 15 7 15 8 11 8 16 9 6 3 12 15 10 15 11 1 12 16 9 6 3 6 2 6 2 12 19 4 13 29) #A(t (14) (common-lisp-user::point-hand-at-key ext::location (defclass common-lisp-user::point-hand-at-key) (#1# . 40405) ext::annotate (common-lisp-user::movement-style) :direct-default-initargs :style-name :point-hand-at-key constantly :feature-slots '#63=(common-lisp-user::hand common-lisp-user::to-key common-lisp-user::offsets) #63# clos::load-defclass)) #1# 40405) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 14 7 14 8 14 5 15 6 15 9 15 10 19 7 11 29) #A(t (12) (common-lisp-user::point-hand-at-key ext::location (defgeneric common-lisp-user::point-hand-at-key) (#1# . 40559) ext::annotate :lambda-list (common-lisp-user::mtr-mod &key common-lisp-user::hand common-lisp-user::to-key common-lisp-user::offsets common-lisp-user::request-spec) :delete-methods t :documentation "Move the hand to a new location, specified by the key at which the index finger should point." ensure-generic-function)) #1# 40559) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 48 12 14 49 19 6 50 29) #64=#A(t (51) (common-lisp-user::point-hand-at-key ext::location (defmethod common-lisp-user::point-hand-at-key (common-lisp-user::mtr-mod common-lisp-user::motor-module) &key common-lisp-user::hand common-lisp-user::to-key common-lisp-user::offsets common-lisp-user::request-spec) (#1# . 40755) ext::annotate (common-lisp-user::motor-module) (common-lisp-user::mtr-mod &key common-lisp-user::hand common-lisp-user::to-key common-lisp-user::offsets common-lisp-user::request-spec) common-lisp-user::mtr-mod (t :request-spec :offsets :to-key :hand) common-lisp-user::hand common-lisp-user::to-key common-lisp-user::offsets common-lisp-user::request-spec stringp read-from-string common-lisp-user::current-device-interface common-lisp-user::keyboard common-lisp-user::key-to-loc common-lisp-user::new-loc #:g13143 common-lisp-user::right common-lisp-user::right-hand common-lisp-user::left common-lisp-user::left-hand (common-lisp-user::right common-lisp-user::left) si::ecase-error common-lisp-user::cur-hand common-lisp-user::loc common-lisp-user::xy-to-polar common-lisp-user::new-polar :hand :r svref :theta :offsets :request-spec common-lisp-user::point-hand common-lisp-user::complete-request *error-output* #21# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "No key mapping available for key ~s" format finish-output #Y(common-lisp-user::point-hand-at-key nil nil (24 45 7 28 8 22 40 2 77 46 9 22 40 2 77 46 10 22 40 2 77 46 11 22 40 2 77 46 12 10 2 16 13 39 8 13 2 19 1 14 51 2 19 0 15 12 19 1 16 12 13 2 19 2 17 45 18 10 0 39 89 10 4 45 19 10 0 42 20 8 13 6 19 1 21 38 17 42 22 8 13 6 19 1 23 38 7 13 0 1 24 17 25 43 1 45 26 13 0 19 1 27 12 13 1 19 2 28 45 29 13 7 14 30 13 6 14 31 13 0 8 0 17 32 12 14 33 13 0 8 1 17 32 12 14 34 13 4 14 35 13 3 19 11 36 43 2 38 47 13 1 19 1 37 14 38 15 39 19 0 40 73 39 12 19 0 41 16 42 12 9 1 19 2 43 12 19 0 44 12 15 45 13 3 19 6 46 12 14 38 19 1 47 22 73 43 1 29) #64# #1# 40755) t clos::install-method)) #1# 40755) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 14 7 14 8 14 5 15 6 15 9 15 10 19 7 11 29) #A(t (12) (common-lisp-user::hand-to-mouse ext::location (defgeneric common-lisp-user::hand-to-mouse) (#1# . 41483) ext::annotate :lambda-list (common-lisp-user::mtr-mod common-lisp-user::request) :delete-methods t :documentation "Moves the right hand to the mouse" ensure-generic-function)) #1# 41483) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 28 12 14 29 19 6 30 29) #65=#A(t (31) (common-lisp-user::hand-to-mouse ext::location (defmethod common-lisp-user::hand-to-mouse (common-lisp-user::mtr-mod common-lisp-user::motor-module) common-lisp-user::request) (#1# . 41859) ext::annotate (common-lisp-user::motor-module t) (common-lisp-user::mtr-mod common-lisp-user::request) common-lisp-user::mtr-mod common-lisp-user::request common-lisp-user::right-hand common-lisp-user::loc #A(t (2) (28 2)) common-lisp-user::vpt= common-lisp-user::complete-request #A(t (2) (28 2)) common-lisp-user::xy-to-polar common-lisp-user::polar :hand common-lisp-user::right :r svref :theta :twidth 4.0 :offsets standard :request-spec common-lisp-user::point-hand #Y(common-lisp-user::hand-to-mouse nil nil (24 45 7 24 45 8 26 13 1 19 1 9 12 19 1 10 12 15 11 19 2 12 39 8 13 0 19 1 13 38 59 13 1 19 1 9 12 19 1 10 12 15 14 19 2 15 45 16 13 2 14 17 15 18 14 19 13 0 8 0 17 20 12 14 21 13 0 8 1 17 20 12 14 22 15 23 14 24 15 25 14 26 13 1 19 13 27 43 1 29) #65# #1# 41859) t clos::install-method)) #1# 41859) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 14 7 14 8 14 5 15 6 15 9 15 10 19 7 11 29) #A(t (12) (common-lisp-user::hand-to-home ext::location (defgeneric common-lisp-user::hand-to-home) (#1# . 42217) ext::annotate :lambda-list (common-lisp-user::mtr-mod common-lisp-user::request) :delete-methods t :documentation "Moves the right hand to the home row position" ensure-generic-function)) #1# 42217) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 28 12 14 29 19 6 30 29) #66=#A(t (31) (common-lisp-user::hand-to-home ext::location (defmethod common-lisp-user::hand-to-home (common-lisp-user::mtr-mod common-lisp-user::motor-module) common-lisp-user::request) (#1# . 42464) ext::annotate (common-lisp-user::motor-module t) (common-lisp-user::mtr-mod common-lisp-user::request) common-lisp-user::mtr-mod common-lisp-user::request common-lisp-user::right-hand common-lisp-user::loc #A(t (2) (7 4)) equal common-lisp-user::complete-request #A(t (2) (7 4)) common-lisp-user::xy-to-polar common-lisp-user::polar :hand common-lisp-user::right :r svref :theta :twidth 4.0 :offsets standard :request-spec common-lisp-user::point-hand #Y(common-lisp-user::hand-to-home nil nil (24 45 7 24 45 8 26 13 1 19 1 9 12 19 1 10 12 1 11 17 12 39 8 13 0 19 1 13 38 59 13 1 19 1 9 12 19 1 10 12 15 14 19 2 15 45 16 13 2 14 17 15 18 14 19 13 0 8 0 17 20 12 14 21 13 0 8 1 17 20 12 14 22 15 23 14 24 15 25 14 26 13 1 19 13 27 43 1 29) #66# #1# 42464) t clos::install-method)) #1# 42464) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 14 7 14 8 14 5 15 6 15 9 15 10 19 7 11 29) #A(t (12) (common-lisp-user::hand-to-keypad ext::location (defgeneric common-lisp-user::hand-to-keypad) (#1# . 42820) ext::annotate :lambda-list (common-lisp-user::mtr-mod common-lisp-user::request) :delete-methods t :documentation "Moves the right hand to the keypad position" ensure-generic-function)) #1# 42820) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 32 12 14 33 19 6 34 29) #67=#A(t (35) (common-lisp-user::hand-to-keypad ext::location (defmethod common-lisp-user::hand-to-keypad (common-lisp-user::mtr-mod common-lisp-user::motor-module) common-lisp-user::request) (#1# . 42933) ext::annotate (common-lisp-user::motor-module t) (common-lisp-user::mtr-mod common-lisp-user::request) common-lisp-user::mtr-mod common-lisp-user::request common-lisp-user::right-hand common-lisp-user::loc #A(t (2) (19 4)) equal common-lisp-user::complete-request #A(t (2) (19 4)) common-lisp-user::xy-to-polar common-lisp-user::polar :hand common-lisp-user::right :r svref :theta :twidth 4.0 :offsets common-lisp-user::index common-lisp-user::middle common-lisp-user::ring common-lisp-user::pinkie common-lisp-user::thumb :request-spec common-lisp-user::point-hand #Y(common-lisp-user::hand-to-keypad nil nil (24 45 7 24 45 8 26 13 1 19 1 9 12 19 1 10 12 1 11 17 12 39 8 13 0 19 1 13 38 104 13 1 19 1 9 12 19 1 10 12 15 14 19 2 15 45 16 13 2 14 17 15 18 14 19 13 0 8 0 17 20 12 14 21 13 0 8 1 17 20 12 14 22 15 23 14 24 15 25 9 0 8 0 6 3 12 15 26 9 1 8 0 6 3 12 15 27 9 2 8 0 6 3 12 15 28 9 3 8 1 6 3 12 15 29 9 0 8 2 6 3 6 5 12 14 30 13 1 19 13 31 43 1 29) #67# #1# 42933) t clos::install-method)) #1# 42933) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 15 12 19 2 16 1 0 73 29) #68=#A(t (17) (common-lisp-user::query-motor-module ext::location (defun common-lisp-user::query-motor-module) (#1# . 43532) ext::annotate :lambda-list (common-lisp-user::motor common-lisp-user::buffer common-lisp-user::slot common-lisp-user::value) common-lisp-user::motor common-lisp-user::buffer common-lisp-user::slot common-lisp-user::value common-lisp-user::state eq error common-lisp-user::generic-state-query #Y(common-lisp-user::query-motor-module nil nil (24 45 7 24 45 8 24 45 9 24 45 10 26 13 1 1 11 17 12 39 7 13 0 1 13 17 12 39 5 75 73 38 12 13 3 13 2 13 1 13 0 19 4 14 29) #68# #1# 43532) si::fset)) #1# 43532) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 16 12 14 17 9 3 19 4 18 1 0 73 29) #69=#A(t (19) (common-lisp-user::extend-manual-requests ext::location (defmacro common-lisp-user::extend-manual-requests) (#1# . 43856) ext::annotate :lambda-list (common-lisp-user::chunk-type common-lisp-user::function-name) #:g13145 #:g13144 #:g13146 si::dm-too-few-arguments common-lisp-user::chunk-type common-lisp-user::function-name si::dm-too-many-arguments common-lisp-user::extend-manual-requests-fct quote #Y(common-lisp-user::extend-manual-requests nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 76 39 6 13 3 19 1 10 10 1 4 12 10 1 5 51 1 22 45 12 10 2 39 6 13 4 19 1 13 15 14 15 15 10 1 6 2 12 15 15 10 0 6 2 6 3 73 29) #69# #1# 43856) t si::fset)) #1# 43856) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 32 12 19 2 33 1 0 73 29) #70=#A(t (34) (common-lisp-user::extend-manual-requests-fct ext::location (defun common-lisp-user::extend-manual-requests-fct) (#1# . 44147) ext::annotate :lambda-list (common-lisp-user::chunk-type common-lisp-user::function-name) common-lisp-user::chunk-type common-lisp-user::function-name listp *error-output* #21# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "Invalid chunk-type specification ~s.  Manual requests not extended." format finish-output fboundp "~s does not name a function.  Manual requests not extended." common-lisp-user::motor-module make-instance common-lisp-user::dummy-module common-lisp-user::ct-name common-lisp-user::new-requests-table gethash "Request ~s is already an extension of the manual buffer.  To redefine you must remove it first with remove-manual-request." copy-list si::hash-set t #Y(common-lisp-user::extend-manual-requests-fct nil nil (24 45 7 24 45 8 26 10 1 16 9 76 39 44 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 17 13 1 19 6 18 12 14 10 19 1 19 22 73 38 161 10 0 16 20 76 39 44 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 21 13 0 19 6 18 12 14 10 19 1 19 22 73 38 111 10 1 4 16 9 39 8 10 1 4 4 73 38 5 10 1 4 73 12 15 22 19 1 23 12 46 24 46 25 13 0 13 1 19 1 26 12 19 2 27 39 44 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 28 13 0 19 6 18 12 14 10 19 1 19 22 73 38 24 13 0 13 1 19 1 26 12 10 3 16 29 12 10 2 3 12 19 3 30 11 31 73 43 2 29) #70# #1# 44147) si::fset)) #1# 44147) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 15 12 14 16 9 2 19 4 17 1 0 73 29) #71=#A(t (18) (common-lisp-user::remove-manual-request ext::location (defmacro common-lisp-user::remove-manual-request) (#1# . 45073) ext::annotate :lambda-list (common-lisp-user::chunk-type) #:g13154 #:g13153 #:g13155 si::dm-too-few-arguments common-lisp-user::chunk-type si::dm-too-many-arguments common-lisp-user::remove-manual-request-fct quote #Y(common-lisp-user::remove-manual-request nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 39 6 13 3 19 1 12 15 13 15 14 10 0 6 2 6 2 73 29) #71# #1# 45073) t si::fset)) #1# 45073) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 24 12 19 2 25 1 0 73 29) #72=#A(t (26) (common-lisp-user::remove-manual-request-fct ext::location (defun common-lisp-user::remove-manual-request-fct) (#1# . 45164) ext::annotate :lambda-list (common-lisp-user::chunk-type) common-lisp-user::chunk-type common-lisp-user::motor-module make-instance common-lisp-user::dummy-module common-lisp-user::new-requests-table gethash remhash *error-output* #21# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "~s is not a previously extended request for the manual module." format finish-output #Y(common-lisp-user::remove-manual-request-fct nil nil (24 45 7 26 15 8 19 1 9 45 10 13 1 13 0 19 1 11 12 19 2 12 39 12 13 1 13 0 19 1 11 17 13 38 42 14 14 15 15 19 0 16 73 39 12 19 0 17 16 18 12 9 1 19 2 19 12 19 0 20 12 15 21 13 1 19 6 22 12 14 14 19 1 23 22 73 43 1 29) #72# #1# 45164) si::fset)) #1# 45164) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 55 12 14 56 19 6 57 29) #73=#A(t (58) (common-lisp-user::pm-module-request ext::location (defmethod common-lisp-user::pm-module-request (common-lisp-user::motor common-lisp-user::motor-module) common-lisp-user::buffer-name common-lisp-user::chunk-spec) (#1# . 45492) ext::annotate (common-lisp-user::motor-module t t) (common-lisp-user::motor common-lisp-user::buffer-name common-lisp-user::chunk-spec) common-lisp-user::motor common-lisp-user::buffer-name common-lisp-user::chunk-spec common-lisp-user::test-for-clear-request common-lisp-user::clear :module :motor :destination :output common-lisp-user::medium common-lisp-user::schedule-event-now common-lisp-user::cmd common-lisp-user::chunk-spec-slot-spec length = common-lisp-user::spec-slot-value common-lisp-user::prepare eq common-lisp-user::style common-lisp-user::verify-single-explicit-value common-lisp-user::x common-lisp-user::slot-in-chunk-spec-p common-lisp-user::it common-lisp-user::sym->key *error-output* #21# common-lisp-user::current-mp-fct common-lisp-user::mp-models > common-lisp-user::current-model "Invalid prepare command to motor module with invalid specification for ~s slot." format finish-output common-lisp-user::complete-request #Y(nil nil nil (24 45 27 26 13 4 13 0 19 2 28 73 39 80 13 4 13 0 14 13 13 1 19 4 26 45 29 10 0 39 14 13 1 19 1 30 12 10 0 6 2 73 38 48 14 31 15 32 19 0 33 73 39 12 19 0 34 16 20 12 9 1 19 2 35 12 19 0 36 12 15 37 13 1 19 6 38 14 31 19 1 39 13 5 19 1 40 75 73 36 4 43 1 29) #73# #1# 45492) (common-lisp-user::hand common-lisp-user::finger common-lisp-user::r common-lisp-user::theta) mapcan common-lisp-user::params-list #:g13159 #:g13160 (setf common-lisp-user::prepare-spec) :params common-lisp-user::low common-lisp-user::new-requests-table gethash "Invalid command ~a sent to the manual buffer" "Invalid command to motor module specifies the cmd slot multiple times." "Invalid command to motor module does not specify the cmd slot." #Y(common-lisp-user::pm-module-request nil nil (24 45 7 24 45 8 24 45 9 26 57 0 60 322 13 1 19 1 10 39 20 15 11 14 12 14 13 14 14 14 13 14 15 15 16 19 7 17 38 295 13 1 15 18 19 2 19 16 20 12 9 1 19 2 21 39 179 13 1 15 18 19 2 19 4 12 19 1 22 45 18 13 0 1 23 17 24 39 80 13 2 15 25 14 13 15 23 19 4 26 45 25 34 41 12 15 42 19 2 43 45 44 10 1 73 39 48 10 6 45 45 10 5 45 46 13 0 13 1 33 47 18 2 43 1 43 1 15 23 14 14 14 13 14 48 13 1 10 0 3 51 0 12 14 12 14 13 14 15 15 49 19 9 17 43 2 38 74 13 0 13 4 19 1 50 12 19 2 51 45 29 10 0 39 14 10 0 5 12 13 5 13 3 20 2 23 38 42 14 31 15 32 19 0 33 73 39 12 19 0 34 16 20 12 9 1 19 2 35 12 19 0 36 12 15 52 13 1 19 6 38 12 14 31 19 1 39 22 73 43 1 43 1 38 100 13 1 15 18 19 2 19 39 47 13 1 19 1 40 14 31 15 32 19 0 33 73 39 12 19 0 34 16 20 12 9 1 19 2 35 12 19 0 36 12 15 53 19 5 38 12 14 31 19 1 39 22 73 38 45 13 1 19 1 40 14 31 15 32 19 0 33 73 39 12 19 0 34 16 20 12 9 1 19 2 35 12 19 0 36 12 15 54 19 5 38 12 14 31 19 1 39 22 73 63 29) #73# #1# 45492) t clos::install-method)) #1# 45492) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 26 12 14 27 19 6 28 29) #74=#A(t (29) (common-lisp-user::handle-simple-command-request ext::location (defmethod common-lisp-user::handle-simple-command-request (common-lisp-user::mtr-mod common-lisp-user::motor-module) common-lisp-user::chunk-spec &optional #75=(common-lisp-user::output 'common-lisp-user::low)) (#1# . 47653) ext::annotate (common-lisp-user::motor-module t) (common-lisp-user::mtr-mod common-lisp-user::chunk-spec &optional #75#) common-lisp-user::mtr-mod common-lisp-user::chunk-spec common-lisp-user::low common-lisp-user::output common-lisp-user::cmd common-lisp-user::chunk-spec-slot-spec common-lisp-user::spec-slot-value common-lisp-user::command symbolp fboundp :destination :motor :module :output :params :details "~a" format common-lisp-user::schedule-event-now #Y(common-lisp-user::handle-simple-command-request nil nil (24 45 7 24 45 8 25 40 3 15 9 46 10 26 13 1 15 11 19 2 12 4 12 19 1 13 45 14 10 0 39 11 10 0 16 15 39 5 10 0 16 16 73 39 36 13 0 14 17 14 18 14 19 14 18 14 20 13 1 14 21 10 2 6 1 12 14 22 77 15 23 13 0 19 3 24 12 19 11 25 43 1 29) #74# #1# 47653) t clos::install-method)) #1# 47653) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 11 12 19 2 12 1 0 73 29) #76=#A(t (13) (common-lisp-user::medium-output-command-request ext::location (defun common-lisp-user::medium-output-command-request) (#1# . 48079) ext::annotate :lambda-list (common-lisp-user::m common-lisp-user::s) common-lisp-user::m common-lisp-user::s common-lisp-user::medium common-lisp-user::handle-simple-command-request #Y(common-lisp-user::medium-output-command-request nil nil (24 45 7 24 45 8 26 13 1 13 0 15 9 19 3 10 29) #76# #1# 48079) si::fset)) #1# 48079) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 35 12 14 36 19 6 37 29) #77=#A(t (38) (common-lisp-user::handle-style-request ext::location (defmethod common-lisp-user::handle-style-request (common-lisp-user::mtr-mod common-lisp-user::motor-module) common-lisp-user::chunk-spec) (#1# . 48170) ext::annotate (common-lisp-user::motor-module t) (common-lisp-user::mtr-mod common-lisp-user::chunk-spec) common-lisp-user::mtr-mod common-lisp-user::chunk-spec common-lisp-user::cmd common-lisp-user::chunk-spec-slot-spec common-lisp-user::spec-slot-value common-lisp-user::style make-instance common-lisp-user::dummy common-lisp-user::x :motor common-lisp-user::verify-single-explicit-value common-lisp-user::it common-lisp-user::sym->key #Y(nil nil nil (24 45 15 26 13 4 13 0 14 16 13 2 19 4 17 45 18 10 0 39 14 13 1 19 1 19 12 10 0 6 2 73 38 5 75 73 36 4 43 1 29) #77# #1# 48170) common-lisp-user::feature-slots mapcan common-lisp-user::params-list :destination :params :request-spec append :module :output common-lisp-user::low :details "~a ~{~a~^ ~}" format common-lisp-user::schedule-event-now #Y(common-lisp-user::handle-style-request nil nil (24 45 7 24 45 8 26 57 0 60 84 13 1 15 9 19 2 10 4 12 19 1 11 45 12 13 0 19 1 13 45 14 34 20 12 13 0 19 1 21 12 19 2 22 45 23 13 2 14 24 14 16 14 25 14 26 10 4 6 2 12 13 0 19 2 27 12 14 28 14 16 14 29 15 30 14 31 77 15 32 13 2 13 0 19 4 33 12 19 11 34 43 3 63 29) #77# #1# 48170) t clos::install-method)) #1# 48170) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 36 12 14 37 19 6 38 29) #78=#A(t (39) (common-lisp-user::handle-partial-style-request ext::location (defmethod common-lisp-user::handle-partial-style-request (common-lisp-user::mtr-mod common-lisp-user::motor-module) common-lisp-user::chunk-spec) (#1# . 48928) ext::annotate (common-lisp-user::motor-module t) (common-lisp-user::mtr-mod common-lisp-user::chunk-spec) common-lisp-user::mtr-mod common-lisp-user::chunk-spec common-lisp-user::cmd common-lisp-user::chunk-spec-slot-spec common-lisp-user::spec-slot-value common-lisp-user::style make-instance common-lisp-user::dummy common-lisp-user::x common-lisp-user::slot-in-chunk-spec-p :motor common-lisp-user::verify-single-explicit-value common-lisp-user::it common-lisp-user::sym->key #Y(nil nil nil (24 45 15 26 13 4 13 0 19 2 16 73 39 37 13 4 13 0 14 17 13 2 19 4 18 45 19 10 0 39 14 13 1 19 1 20 12 10 0 6 2 73 38 5 75 73 36 4 43 1 29) #78# #1# 48928) common-lisp-user::feature-slots mapcan common-lisp-user::params-list :destination :params :request-spec append :module :output common-lisp-user::low :details "~a ~{~a~^ ~}" format common-lisp-user::schedule-event-now #Y(common-lisp-user::handle-partial-style-request nil nil (24 45 7 24 45 8 26 57 0 60 84 13 1 15 9 19 2 10 4 12 19 1 11 45 12 13 0 19 1 13 45 14 34 21 12 13 0 19 1 22 12 19 2 23 45 24 13 2 14 25 14 17 14 26 14 27 10 4 6 2 12 13 0 19 2 28 12 14 29 14 17 14 30 15 31 14 32 77 15 33 13 2 13 0 19 4 34 12 19 11 35 43 3 63 29) #78# #1# 48928) t clos::install-method)) #1# 48928) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ((common-lisp-user::click-mouse) common-lisp-user::handle-simple-command-request common-lisp-user::extend-manual-requests-fct)) #1# 49850) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ((common-lisp-user::hand-to-mouse) common-lisp-user::handle-simple-command-request common-lisp-user::extend-manual-requests-fct)) #1# 49920) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ((common-lisp-user::hand-to-home) common-lisp-user::handle-simple-command-request common-lisp-user::extend-manual-requests-fct)) #1# 49991) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ((common-lisp-user::hand-to-keypad) common-lisp-user::handle-simple-command-request common-lisp-user::extend-manual-requests-fct)) #1# 50061) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ((common-lisp-user::execute) common-lisp-user::medium-output-command-request common-lisp-user::extend-manual-requests-fct)) #1# 50133) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ((common-lisp-user::punch common-lisp-user::hand common-lisp-user::finger) common-lisp-user::handle-style-request common-lisp-user::extend-manual-requests-fct)) #1# 50199) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ((common-lisp-user::peck common-lisp-user::hand common-lisp-user::finger common-lisp-user::r common-lisp-user::theta) common-lisp-user::handle-style-request common-lisp-user::extend-manual-requests-fct)) #1# 50266) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ((common-lisp-user::peck-recoil common-lisp-user::hand common-lisp-user::finger common-lisp-user::r common-lisp-user::theta) common-lisp-user::handle-style-request common-lisp-user::extend-manual-requests-fct)) #1# 50339) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ((common-lisp-user::press-key common-lisp-user::key) common-lisp-user::handle-style-request common-lisp-user::extend-manual-requests-fct)) #1# 50419) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ((common-lisp-user::point-hand-at-key common-lisp-user::hand common-lisp-user::to-key common-lisp-user::offsets) common-lisp-user::handle-partial-style-request common-lisp-user::extend-manual-requests-fct)) #1# 50481) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ((common-lisp-user::move-cursor common-lisp-user::object common-lisp-user::loc common-lisp-user::device) common-lisp-user::handle-partial-style-request common-lisp-user::extend-manual-requests-fct)) #1# 50575) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 42 12 19 2 43 1 0 73 29) #79=#A(t (44) (common-lisp-user::reset-motor-module ext::location (defun common-lisp-user::reset-motor-module) (#1# . 50662) ext::annotate :lambda-list (common-lisp-user::instance) common-lisp-user::instance (common-lisp-user::motor-command (common-lisp-user::cmd "motor action")) common-lisp-user::chunk-type-fct ((common-lisp-user::prepare (:include common-lisp-user::motor-command)) (common-lisp-user::cmd common-lisp-user::prepare) common-lisp-user::style common-lisp-user::hand common-lisp-user::finger common-lisp-user::r common-lisp-user::theta) common-lisp-user::prepare common-lisp-user::chunk-p-fct ((common-lisp-user::prepare common-lisp-user::isa common-lisp-user::prepare)) common-lisp-user::define-chunks-fct common-lisp-user::make-chunk-immutable (common-lisp-user::left common-lisp-user::right common-lisp-user::index common-lisp-user::middle common-lisp-user::ring common-lisp-user::pinkie common-lisp-user::thumb) si::%dolist-var common-lisp-user::c common-lisp-user::name common-lisp-user::reset-pm-module common-lisp-user::value common-lisp-user::chunk-type-list listp common-lisp-user::cmd append (:include common-lisp-user::motor-command) type common-lisp-user::isa *error-output* #21# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "Failed to extend motor capabilities with chunk-type definition: ~s" format finish-output #Y(nil nil nil (24 45 19 24 45 21 26 10 0 4 45 22 10 0 4 16 23 39 17 13 0 15 24 10 2 6 2 6 1 12 19 2 25 38 28 10 0 4 12 1 26 6 2 6 1 12 10 0 5 12 15 24 10 2 6 2 6 1 12 19 3 25 12 19 1 9 45 27 10 0 39 31 13 3 19 1 12 76 73 39 20 13 3 15 28 10 3 6 3 6 1 12 19 1 14 13 3 19 1 15 38 42 14 29 15 30 19 0 31 73 39 12 19 0 32 16 33 12 9 1 19 2 34 12 19 0 35 12 15 36 13 1 19 6 37 12 14 29 19 1 38 22 73 43 2 29) #79# #1# 50662) common-lisp-user::new-requests-table maphash #Y(common-lisp-user::reset-motor-module nil nil (24 45 7 26 15 8 19 1 9 15 10 19 1 9 15 11 19 1 12 76 39 11 15 13 19 1 14 15 11 19 1 15 1 16 45 17 75 45 18 38 38 10 1 4 51 0 13 0 19 1 12 76 39 20 13 0 15 19 10 0 6 3 6 1 12 19 1 14 13 0 19 1 15 10 1 5 51 1 10 1 40 -40 43 2 13 0 19 1 20 34 39 12 13 0 19 1 40 17 41 29) #79# #1# 50662) si::fset)) #1# 50662) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 53 12 19 2 54 1 0 73 29) #80=#A(t (55) (common-lisp-user::params-motor-module ext::location (defun common-lisp-user::params-motor-module) (#1# . 52144) ext::annotate :lambda-list (common-lisp-user::motor common-lisp-user::param) common-lisp-user::motor common-lisp-user::param consp :cursor-noise #:g13178 #:g13179 (setf common-lisp-user::cursor-noise) :default-target-width #:g13180 #:g13181 (setf common-lisp-user::default-target-width) :incremental-mouse-moves #:g13182 numberp common-lisp-user::safe-seconds->ms #:g13183 (setf common-lisp-user::incremental-mouse-p) :min-fitts-time #:g13184 #:g13185 (setf common-lisp-user::min-fitts-time) :motor-burst-time #:g13186 #:g13187 (setf common-lisp-user::burst-time) :motor-initiation-time #:g13188 #:g13189 (setf common-lisp-user::init-time) :motor-feature-prep-time #:g13190 #:g13191 (setf common-lisp-user::feat-prep-time) :peck-fitts-coeff #:g13192 #:g13193 (setf common-lisp-user::peck-fitts-coeff) common-lisp-user::cursor-noise common-lisp-user::default-target-width common-lisp-user::incremental-mouse-p common-lisp-user::ms->seconds common-lisp-user::min-fitts-time common-lisp-user::burst-time common-lisp-user::init-time common-lisp-user::feat-prep-time common-lisp-user::peck-fitts-coeff #Y(common-lisp-user::params-motor-module nil nil (24 45 7 24 45 8 26 10 0 16 9 39 236 10 0 4 42 10 24 10 1 45 11 10 1 5 45 12 13 0 13 1 33 13 18 2 43 1 43 1 38 205 42 14 24 10 1 45 15 10 1 5 45 16 13 0 13 1 33 17 18 2 43 1 43 1 38 179 42 18 44 10 1 45 19 10 1 5 16 20 39 10 10 1 5 12 19 1 21 38 4 10 1 5 45 22 13 0 13 1 33 23 18 2 43 1 43 1 10 0 5 73 38 133 42 24 24 10 1 45 25 10 1 5 45 26 13 0 13 1 33 27 18 2 43 1 43 1 38 107 42 28 24 10 1 45 29 10 1 5 45 30 13 0 13 1 33 31 18 2 43 1 43 1 38 81 42 32 24 10 1 45 33 10 1 5 45 34 13 0 13 1 33 35 18 2 43 1 43 1 38 55 42 36 24 10 1 45 37 10 1 5 45 38 13 0 13 1 33 39 18 2 43 1 43 1 38 29 42 40 24 10 1 45 41 10 1 5 45 42 13 0 13 1 33 43 18 2 43 1 43 1 38 3 75 73 38 105 10 0 42 10 8 13 1 19 1 44 38 93 42 14 8 13 1 19 1 45 38 83 42 18 28 13 1 19 1 46 16 20 39 12 13 1 19 1 46 12 19 1 47 38 6 13 1 19 1 46 38 53 42 24 8 13 1 19 1 48 38 43 42 28 8 13 1 19 1 49 38 33 42 32 8 13 1 19 1 50 38 23 42 36 8 13 1 19 1 51 38 13 42 40 8 13 1 19 1 52 38 3 75 73 29) #80# #1# 52144) si::fset)) #1# 52144) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 10 12 19 2 11 1 0 73 29) #81=#A(t (12) (common-lisp-user::create-motor-module ext::location (defun common-lisp-user::create-motor-module) (#1# . 53666) ext::annotate :lambda-list (common-lisp-user::model-name) common-lisp-user::model-name common-lisp-user::motor-module make-instance #Y(common-lisp-user::create-motor-module nil nil (24 45 7 26 15 8 19 1 9 29) #81# #1# 53666) si::fset)) #1# 53666) #Y(si::bytecodes nil nil (14 0 15 1 14 2 15 3 14 4 1 7 12 14 8 14 9 19 7 10 6 1 12 14 11 14 12 15 13 14 14 77 14 15 15 16 14 17 15 18 19 9 19 12 14 20 14 12 15 21 14 14 15 22 14 15 15 23 14 17 15 24 19 9 19 12 14 25 14 12 15 26 14 14 77 14 15 15 27 14 17 15 28 19 9 19 12 14 29 14 12 15 21 14 14 15 30 14 15 15 31 14 17 15 32 19 9 19 12 14 33 14 12 15 21 14 14 15 34 14 15 15 35 14 17 15 36 19 9 19 12 14 37 14 12 15 21 14 14 15 34 14 15 15 38 14 17 15 39 19 9 19 12 14 40 14 12 15 21 14 14 15 34 14 15 15 41 14 17 15 42 19 9 19 12 14 43 14 12 15 21 14 14 15 44 14 15 15 45 14 17 15 46 19 9 19 6 8 12 14 47 15 48 14 17 15 49 14 50 15 51 14 52 15 53 14 54 15 55 14 56 15 57 14 58 15 59 19 17 60 29) #82=#A(t (61) (:motor common-lisp-user::manual :queries (common-lisp-user::modality common-lisp-user::preparation common-lisp-user::execution common-lisp-user::processor common-lisp-user::last-command) :status-fn common-lisp-user::get-module-fct common-lisp-user::print-module-status #Y(nil nil nil (26 15 0 19 1 5 12 19 1 6 29) #82# #1# 53773) :trackable t common-lisp-user::define-buffer-fct :cursor-noise :valid-test common-lisp-user::tornil :default-value :warning "T or NIL" :documentation "Is there noise in the final cursor location." common-lisp-user::define-parameter :default-target-width common-lisp-user::nonneg 1.0 "a non-negative number" "Effective width, in degrees visual angle, of targets with undefined widths." :incremental-mouse-moves common-lisp-user::posnumorbool "T, NIL, or a non-negative number" "Output mouse moves in stages?" :min-fitts-time 0.1 "a non-negative number" "Minimum movement time for an aimed [Fitts's] movement." :motor-burst-time 0.05 "a non-negative number" "Minimum time for any movement." :motor-initiation-time "a non-negative number" "Time to initiate a motor movement." :motor-feature-prep-time "a non-negative number" "Time to prepare a movement feature." :peck-fitts-coeff 0.075 "a non-negative number" "b coefficient in Fitts's equation for PECK movements." :version "4.0" "Module to provide a model with virtual hands" :creation common-lisp-user::create-motor-module :reset common-lisp-user::reset-motor-module :query common-lisp-user::query-motor-module :request common-lisp-user::pm-module-request :params common-lisp-user::params-motor-module common-lisp-user::define-module-fct)) #1# 53773) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 31 12 19 2 32 15 0 15 33 15 34 19 3 35 1 0 73 29) #83=#A(t (36) (common-lisp-user::start-hand-at-mouse ext::location (defun common-lisp-user::start-hand-at-mouse) (#1# . 55886) ext::annotate :lambda-list common-lisp-user::*meta-processes* common-lisp-user::mps-current *error-output* #21# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "No current meta-process.  Cannot set hand at mouse." format finish-output common-lisp-user::meta-p-current-model "No current model.  Cannot set hand at mouse." :motor common-lisp-user::get-module-fct common-lisp-user::it common-lisp-user::right-hand common-lisp-user::the-hand #:g13196 #A(t (2) (28 2)) #:g13197 (setf common-lisp-user::loc) t "No motor module found. Cannot set hand at mouse." #Y(common-lisp-user::start-hand-at-mouse nil nil (26 14 6 19 1 7 76 39 42 14 8 15 9 19 0 10 73 39 12 19 0 11 16 12 12 9 1 19 2 13 12 19 0 14 12 15 15 19 5 16 12 14 8 19 1 17 22 73 38 140 14 6 19 1 7 12 19 1 18 76 39 42 14 8 15 9 19 0 10 73 39 12 19 0 11 16 12 12 9 1 19 2 13 12 19 0 14 12 15 19 19 5 16 12 14 8 19 1 17 22 73 38 87 15 20 19 1 21 45 22 10 0 39 35 13 0 19 1 23 45 24 10 0 45 25 1 26 45 27 13 0 13 1 33 28 18 2 43 1 43 1 11 29 73 43 1 38 40 14 8 15 9 19 0 10 73 39 12 19 0 11 16 12 12 9 1 19 2 13 12 19 0 14 12 15 30 19 5 16 12 14 8 19 1 17 22 73 43 1 29) #83# #1# 55886) si::fset function "Starts the right hand on the mouse instead of the 'home row' location" si::set-documentation)) #1# 55886) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 44 12 19 2 45 15 0 15 46 15 47 19 3 48 1 0 73 29) #84=#A(t (49) (common-lisp-user::start-hand-at-keypad ext::location (defun common-lisp-user::start-hand-at-keypad) (#1# . 56465) ext::annotate :lambda-list common-lisp-user::*meta-processes* common-lisp-user::mps-current *error-output* #21# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "No current meta-process.  Cannot set hand at keypad." format finish-output common-lisp-user::meta-p-current-model "No current model.  Cannot set hand at keypad." :motor common-lisp-user::get-module-fct common-lisp-user::it common-lisp-user::right-hand common-lisp-user::the-hand #:g13202 #A(t (2) (19 4)) #:g13203 (setf common-lisp-user::loc) #:g13204 common-lisp-user::index #A(t (2) (0 0)) common-lisp-user::middle #A(t (2) (1 0)) common-lisp-user::ring #A(t (2) (2 0)) common-lisp-user::pinkie #A(t (2) (3 1)) common-lisp-user::thumb #A(t (2) (0 2)) #:g13205 (setf common-lisp-user::fingers) t "No motor module found. Cannot set hand at keypad." #Y(common-lisp-user::start-hand-at-keypad nil nil (26 14 6 19 1 7 76 39 42 14 8 15 9 19 0 10 73 39 12 19 0 11 16 12 12 9 1 19 2 13 12 19 0 14 12 15 15 19 5 16 12 14 8 19 1 17 22 73 38 194 14 6 19 1 7 12 19 1 18 76 39 42 14 8 15 9 19 0 10 73 39 12 19 0 11 16 12 12 9 1 19 2 13 12 19 0 14 12 15 19 19 5 16 12 14 8 19 1 17 22 73 38 141 15 20 19 1 21 45 22 10 0 39 89 13 0 19 1 23 45 24 10 0 45 25 1 26 45 27 13 0 13 1 33 28 18 2 43 1 43 1 10 0 45 29 15 30 1 31 6 2 12 15 32 1 33 6 2 12 15 34 1 35 6 2 12 15 36 1 37 6 2 12 15 38 1 39 6 2 6 5 45 40 13 0 13 1 33 41 18 2 43 1 43 1 11 42 73 43 1 38 40 14 8 15 9 19 0 10 73 39 12 19 0 11 16 12 12 9 1 19 2 13 12 19 0 14 12 15 43 19 5 16 12 14 8 19 1 17 22 73 43 1 29) #84# #1# 56465) si::fset function "Starts the right hand on the keypad instead of the 'home row' location" si::set-documentation)) #1# 56465) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 14 12 14 15 9 1 19 4 16 15 0 15 17 15 18 19 3 19 1 0 73 29) #85=#A(t (20) (common-lisp-user::prepare-motor ext::location (defmacro common-lisp-user::prepare-motor) (#1# . 57180) ext::annotate :lambda-list (&rest common-lisp-user::lis) #:g13207 #:g13206 #:g13208 common-lisp-user::lis common-lisp-user::pm-prepare-mvmt-mth (common-lisp-user::get-module :motor) quote #Y(common-lisp-user::prepare-motor nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 45 10 15 11 15 12 15 13 10 0 6 2 6 3 73 29) #85# #1# 57180) t si::fset function "Tells the Motor Module to prepare the supplied movement." si::set-documentation)) #1# 57180) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 16 12 14 17 9 3 19 4 18 15 0 15 19 15 20 19 3 21 1 0 73 29) #86=#A(t (22) (common-lisp-user::set-cursor-position ext::location (defmacro common-lisp-user::set-cursor-position) (#1# . 57331) ext::annotate :lambda-list (common-lisp-user::x common-lisp-user::y) #:g13210 #:g13209 #:g13211 si::dm-too-few-arguments common-lisp-user::x common-lisp-user::y si::dm-too-many-arguments common-lisp-user::set-cursor-position-fct vector #Y(common-lisp-user::set-cursor-position nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 76 39 6 13 3 19 1 10 10 1 4 12 10 1 5 51 1 22 45 12 10 2 39 6 13 4 19 1 13 15 14 13 1 13 0 19 2 15 6 2 73 29) #86# #1# 57331) t si::fset function "Sets the position of the cursor." si::set-documentation)) #1# 57331) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 35 12 19 2 36 1 0 73 29) #87=#A(t (37) (common-lisp-user::set-cursor-position-fct ext::location (defun common-lisp-user::set-cursor-position-fct) (#1# . 57449) ext::annotate :lambda-list (common-lisp-user::xyloc) common-lisp-user::xyloc common-lisp-user::*meta-processes* common-lisp-user::mps-current *error-output* #21# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "No current meta-process.  Cannot set cursor position." format finish-output common-lisp-user::meta-p-current-model "No current model.  Cannot set cursor position." :motor common-lisp-user::get-module-fct common-lisp-user::current-device-interface #:g13216 #:g13217 (setf common-lisp-user::eff-cursor-loc) #:g13218 #:g13219 (setf common-lisp-user::true-cursor-loc) common-lisp-user::synch-mouse common-lisp-user::true-cursor-loc "No motor module found.  Cannot set cursor position." "No device interface available.  Cannot set cursor position." #Y(common-lisp-user::set-cursor-position-fct nil nil (24 45 7 26 14 8 19 1 9 76 39 42 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 17 19 5 18 12 14 10 19 1 19 22 73 38 211 14 8 19 1 9 12 19 1 20 76 39 42 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 21 19 5 18 12 14 10 19 1 19 22 73 38 158 15 22 19 1 23 39 4 19 0 24 39 61 15 22 19 1 23 45 25 10 1 45 26 13 0 13 1 33 27 18 2 43 1 43 1 19 0 24 45 28 10 1 45 29 13 0 13 1 33 30 18 2 43 1 43 1 19 0 24 12 19 1 31 19 0 24 12 19 1 32 38 86 19 0 24 39 42 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 33 19 5 18 12 14 10 19 1 19 22 73 38 40 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 34 19 5 18 12 14 10 19 1 19 22 73 29) #87# #1# 57449) si::fset)) #1# 57449) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 15 12 14 16 9 2 19 4 17 15 0 15 18 15 19 19 3 20 1 0 73 29) #88=#A(t (21) (common-lisp-user::set-hand-location ext::location (defmacro common-lisp-user::set-hand-location) (#1# . 58162) ext::annotate :lambda-list (common-lisp-user::hand &rest common-lisp-user::loc) #:g13221 #:g13220 #:g13222 si::dm-too-few-arguments common-lisp-user::hand common-lisp-user::loc common-lisp-user::set-hand-location-fct quote #Y(common-lisp-user::set-hand-location nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 45 12 15 13 15 14 10 1 6 2 12 15 14 10 0 6 2 6 3 73 29) #88# #1# 58162) t si::fset function "Sets the location of the given hand to LOC" si::set-documentation)) #1# 58162) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 64 12 19 2 65 15 0 15 66 15 67 19 3 68 1 0 73 29) #89=#A(t (69) (common-lisp-user::set-hand-location-fct ext::location (defun common-lisp-user::set-hand-location-fct) (#1# . 58297) ext::annotate :lambda-list (common-lisp-user::hand common-lisp-user::loc) common-lisp-user::hand common-lisp-user::loc common-lisp-user::*meta-processes* common-lisp-user::mps-current *error-output* #21# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "No current meta-process.  Cannot set hand location." format finish-output common-lisp-user::meta-p-current-model "No current model.  Cannot set hand location." :motor common-lisp-user::get-module-fct common-lisp-user::it vector coerce #:g13234 common-lisp-user::right common-lisp-user::right-hand #:g13235 common-lisp-user::index #A(t (2) (0 0)) common-lisp-user::middle #A(t (2) (1 0)) common-lisp-user::ring #A(t (2) (2 0)) common-lisp-user::pinkie #A(t (2) (3 0)) common-lisp-user::thumb #A(t (2) (-1 2)) #:g13236 (setf common-lisp-user::fingers) #:g13237 #:g13238 (setf common-lisp-user::loc) common-lisp-user::left common-lisp-user::left-hand #:g13239 #A(t (2) (0 0)) #A(t (2) (-1 0)) #A(t (2) (-2 0)) #A(t (2) (-3 0)) #A(t (2) (1 2)) #:g13240 (setf common-lisp-user::fingers) #:g13241 #:g13242 (setf common-lisp-user::loc) (common-lisp-user::right common-lisp-user::left) si::ecase-error t "No motor module found.  Cannot set hand location." #Y(common-lisp-user::set-hand-location-fct nil nil (24 45 7 24 45 8 26 14 9 19 1 10 76 39 42 14 11 15 12 19 0 13 73 39 12 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 18 19 5 19 12 14 11 19 1 20 22 73 38 303 14 9 19 1 10 12 19 1 21 76 39 42 14 11 15 12 19 0 13 73 39 12 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 22 19 5 19 12 14 11 19 1 20 22 73 38 250 15 23 19 1 24 45 25 10 0 39 198 13 1 1 26 17 27 51 1 10 2 45 28 10 0 42 29 83 13 1 19 1 30 45 31 15 32 1 33 6 2 12 15 34 1 35 6 2 12 15 36 1 37 6 2 12 15 38 1 39 6 2 12 15 40 1 41 6 2 6 5 45 42 13 0 13 1 33 43 18 2 43 1 43 1 13 1 19 1 30 45 44 10 3 45 45 13 0 13 1 33 46 18 2 43 1 43 1 38 92 42 47 83 13 1 19 1 48 45 49 15 32 1 50 6 2 12 15 34 1 51 6 2 12 15 36 1 52 6 2 12 15 38 1 53 6 2 12 15 40 1 54 6 2 6 5 45 55 13 0 13 1 33 56 18 2 43 1 43 1 13 1 19 1 48 45 57 10 3 45 58 13 0 13 1 33 59 18 2 43 1 43 1 38 7 13 0 1 60 17 61 43 1 11 62 73 38 40 14 11 15 12 19 0 13 73 39 12 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 63 19 5 19 12 14 11 19 1 20 22 73 43 1 29) #89# #1# 58297) si::fset function "Function to set the location of the given hand to LOC" si::set-documentation)) #1# 58297))
