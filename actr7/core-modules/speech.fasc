(#Y(si::bytecodes nil nil (15 0 14 1 14 2 33 3 12 19 4 4 76 73 39 10 15 5 19 1 6 12 19 1 7 29) #A(t (8) ("GENERAL-PM" *modules* :test string= member "ACT-R-support:general-pm" translate-logical-pathname common-lisp-user::compile-and-load)) #1=#P"C:/Users/Son Pham/Desktop/actr7/core-modules/speech.lisp" 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 15 5 15 6 15 7 15 8 14 9 1 13 12 1 14 7 3 6 4 12 14 15 15 16 15 17 1 17 16 18 6 3 12 15 19 15 20 11 20 16 18 6 3 6 2 6 2 12 19 4 21 29) #2=#A(t (22) (common-lisp-user::speech-module ext::location (defclass common-lisp-user::speech-module) (#1# . 6963) ext::annotate (common-lisp-user::pm-module) (:initform 150 :writers ((setf common-lisp-user::s-rate)) :readers (common-lisp-user::s-rate) :name common-lisp-user::syllable-rate) (:initform 300 :writers ((setf common-lisp-user::subvocalize-delay)) :readers (common-lisp-user::subvocalize-delay) :name common-lisp-user::subvocalize-delay) (:initform 3 :writers ((setf common-lisp-user::char-per-syllable)) :readers (common-lisp-user::char-per-syllable) :name common-lisp-user::char-per-syllable) :initfunction :test equal make-hash-table #Y(nil nil nil (26 14 10 15 11 19 2 12 29) #2# #1# 6963) (:initform (make-hash-table :test 'equal) :initargs (:art-time-ht) :writers ((setf common-lisp-user::art-time-ht)) :readers (common-lisp-user::art-time-ht) :name common-lisp-user::art-time-ht) :direct-default-initargs :version-string "4.0" constantly :name :speech clos::load-defclass)) #1# 6963) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 14 12 14 15 19 6 16 29) #3=#A(t (17) (common-lisp-user::register-art-time ext::location (defmethod common-lisp-user::register-art-time (common-lisp-user::spch-mod common-lisp-user::speech-module) (common-lisp-user::text string) (time number)) (#1# . 7365) ext::annotate (common-lisp-user::speech-module string number) (common-lisp-user::spch-mod common-lisp-user::text time) common-lisp-user::spch-mod common-lisp-user::text time common-lisp-user::art-time-ht common-lisp-user::register-articulation-time common-lisp-user::safe-seconds->ms si::hash-set #Y(common-lisp-user::register-art-time nil nil (24 45 7 24 45 8 24 45 9 26 13 1 13 2 19 1 10 12 13 0 15 11 19 2 12 12 19 3 13 29) #3# #1# 7365) t clos::install-method)) #1# 7365) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 21 12 14 22 19 6 23 29) #4=#A(t (24) (common-lisp-user::get-art-time ext::location (defmethod common-lisp-user::get-art-time (common-lisp-user::spch-mod common-lisp-user::speech-module) (common-lisp-user::text string) &optional common-lisp-user::time-in-ms) (#1# . 7551) ext::annotate (common-lisp-user::speech-module string) (common-lisp-user::spch-mod common-lisp-user::text &optional common-lisp-user::time-in-ms) common-lisp-user::spch-mod common-lisp-user::text common-lisp-user::time-in-ms common-lisp-user::art-time-ht gethash common-lisp-user::it common-lisp-user::s-rate length common-lisp-user::char-per-syllable / * round time common-lisp-user::ms->seconds #Y(common-lisp-user::get-art-time nil nil (24 45 7 24 45 8 25 40 2 77 46 9 26 13 1 13 2 19 1 10 12 19 2 11 45 12 10 0 39 5 10 0 38 29 13 3 19 1 13 12 10 2 16 14 12 13 3 19 1 15 12 19 2 16 12 19 2 17 12 19 1 18 43 1 45 19 10 1 39 6 10 0 73 38 6 13 0 19 1 20 43 1 29) #4# #1# 7551) t clos::install-method)) #1# 7551) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 15 5 15 6 14 7 15 8 15 9 11 9 16 10 6 3 12 15 11 15 12 1 13 16 10 6 3 6 2 6 2 12 19 4 14 15 0 15 1 15 15 15 16 19 4 4 15 0 77 15 17 15 18 1 30 12 14 31 19 6 32 29) #5=#A(t (33) (common-lisp-user::speak ext::location (defclass common-lisp-user::speak) (#1# . 7862) ext::annotate (common-lisp-user::movement-style) ((:initform nil :initargs (:text) :writers ((setf common-lisp-user::text)) :readers (common-lisp-user::text) :name common-lisp-user::text)) :direct-default-initargs :style-name :speak constantly :feature-slots '#6=(common-lisp-user::text) #6# clos::load-defclass (defmethod common-lisp-user::speak #7=(common-lisp-user::module common-lisp-user::pm-module) &key common-lisp-user::text . #8=(common-lisp-user::request-spec)) (#1# . 7862) (common-lisp-user::pm-module) (common-lisp-user::module &key common-lisp-user::text common-lisp-user::request-spec) common-lisp-user::module (t :request-spec :text) common-lisp-user::text common-lisp-user::request-spec common-lisp-user::check-jam common-lisp-user::check-specs common-lisp-user::complete-request :request-spec :text make-instance common-lisp-user::prepare-movement #Y(common-lisp-user::speak nil nil (24 45 19 28 20 22 40 2 77 46 21 22 40 2 77 46 22 13 2 19 1 23 40 8 15 0 13 1 19 2 24 39 8 13 0 19 1 25 38 20 13 2 15 0 14 26 13 0 14 27 13 1 19 5 28 12 19 2 29 29) #5# #1# 7862) t clos::install-method)) #1# 7862) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 8 12 14 9 19 6 10 29) #9=#A(t (11) (common-lisp-user::num-to-prepare ext::location (defmethod common-lisp-user::num-to-prepare (common-lisp-user::mvmt common-lisp-user::speak)) (#1# . 7997) ext::annotate (common-lisp-user::speak) (common-lisp-user::mvmt) common-lisp-user::mvmt #Y(common-lisp-user::num-to-prepare nil nil (24 45 7 26 8 3 73 29) #9# #1# 7997) t clos::install-method)) #1# 7997) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 10 12 14 11 19 6 12 29) #10=#A(t (13) (common-lisp-user::compute-exec-time ext::location (defmethod common-lisp-user::compute-exec-time (common-lisp-user::spch-mod common-lisp-user::speech-module) (common-lisp-user::mvmt common-lisp-user::speak)) (#1# . 8044) ext::annotate (common-lisp-user::speech-module common-lisp-user::speak) (common-lisp-user::spch-mod common-lisp-user::mvmt) common-lisp-user::spch-mod common-lisp-user::mvmt common-lisp-user::init-time #Y(common-lisp-user::compute-exec-time nil nil (24 45 7 24 45 8 26 13 1 19 1 9 29) #10# #1# 8044) t clos::install-method)) #1# 8044) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 13 12 14 14 19 6 15 29) #11=#A(t (16) (common-lisp-user::compute-finish-time ext::location (defmethod common-lisp-user::compute-finish-time (common-lisp-user::spch-mod common-lisp-user::speech-module) (common-lisp-user::mvmt common-lisp-user::speak)) (#1# . 8138) ext::annotate (common-lisp-user::speech-module common-lisp-user::speak) (common-lisp-user::spch-mod common-lisp-user::mvmt) common-lisp-user::spch-mod common-lisp-user::mvmt common-lisp-user::exec-time common-lisp-user::text common-lisp-user::get-art-time + #Y(common-lisp-user::compute-finish-time nil nil (24 45 7 24 45 8 26 13 0 19 1 9 12 13 1 13 0 19 1 10 12 19 2 11 12 19 2 12 29) #11# #1# 8138) t clos::install-method)) #1# 8138) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 11 12 14 12 19 6 13 29) #12=#A(t (14) (common-lisp-user::feat-differences ext::location (defmethod common-lisp-user::feat-differences (common-lisp-user::s1 common-lisp-user::speak) (common-lisp-user::s2 common-lisp-user::speak)) (#1# . 8270) ext::annotate (common-lisp-user::speak common-lisp-user::speak) (common-lisp-user::s1 common-lisp-user::s2) common-lisp-user::s1 common-lisp-user::s2 common-lisp-user::text string= #Y(common-lisp-user::feat-differences nil nil (24 45 7 24 45 8 26 13 1 19 1 9 12 13 0 19 1 9 12 19 2 10 39 6 8 0 73 38 4 8 2 73 29) #12# #1# 8270) t clos::install-method)) #1# 8270) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 30 12 14 23 19 6 31 29) #13=#A(t (32) (common-lisp-user::queue-output-events ext::location (defmethod common-lisp-user::queue-output-events (common-lisp-user::spch-mod common-lisp-user::speech-module) (common-lisp-user::mvmt common-lisp-user::speak)) (#1# . 8374) ext::annotate (common-lisp-user::speech-module common-lisp-user::speak) (common-lisp-user::spch-mod common-lisp-user::mvmt) common-lisp-user::spch-mod common-lisp-user::mvmt common-lisp-user::word-sound-evt :onset common-lisp-user::mp-time-ms common-lisp-user::exec-time common-lisp-user::seconds->ms + :string common-lisp-user::text :location common-lisp-user::self make-instance common-lisp-user::new-sound-event common-lisp-user::output-speech :time-in-ms t :params :destination :device :module :speech common-lisp-user::schedule-event-relative #Y(common-lisp-user::queue-output-events nil nil (24 45 7 24 45 8 26 15 9 14 10 19 0 11 12 13 0 19 1 12 12 19 1 13 12 19 2 14 12 14 15 13 0 19 1 16 12 14 17 15 18 19 7 19 12 19 1 20 13 0 19 1 12 12 19 1 13 12 15 21 14 22 14 23 14 24 13 0 19 1 16 6 1 12 14 25 14 26 14 27 14 28 19 10 29 29) #13# #1# 8374) clos::install-method)) #1# 8374) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 15 5 15 6 14 7 15 8 15 9 11 9 16 10 6 3 12 15 11 15 12 1 13 16 10 6 3 6 2 6 2 12 19 4 14 15 0 15 1 15 15 15 16 19 4 4 15 0 77 15 17 15 18 1 30 12 14 31 19 6 32 29) #14=#A(t (33) (common-lisp-user::subvocalize ext::location (defclass common-lisp-user::subvocalize) (#1# . 8774) ext::annotate (common-lisp-user::speak) ((:initform nil :initargs (:text) :writers ((setf common-lisp-user::text)) :readers (common-lisp-user::text) :name common-lisp-user::text)) :direct-default-initargs :style-name :subvocalize constantly :feature-slots '#15=(common-lisp-user::text) #15# clos::load-defclass (defmethod common-lisp-user::subvocalize #7# &key common-lisp-user::text . #8#) (#1# . 8774) (common-lisp-user::pm-module) (common-lisp-user::module &key common-lisp-user::text common-lisp-user::request-spec) common-lisp-user::module (t :request-spec :text) common-lisp-user::text common-lisp-user::request-spec common-lisp-user::check-jam common-lisp-user::check-specs common-lisp-user::complete-request :request-spec :text make-instance common-lisp-user::prepare-movement #Y(common-lisp-user::subvocalize nil nil (24 45 19 28 20 22 40 2 77 46 21 22 40 2 77 46 22 13 2 19 1 23 40 8 15 0 13 1 19 2 24 39 8 13 0 19 1 25 38 20 13 2 15 0 14 26 13 0 14 27 13 1 19 5 28 12 19 2 29 29) #14# #1# 8774) t clos::install-method)) #1# 8774) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 29 12 14 17 19 6 30 29) #16=#A(t (31) (common-lisp-user::queue-output-events ext::location (defmethod common-lisp-user::queue-output-events (common-lisp-user::spch-mod common-lisp-user::speech-module) (common-lisp-user::mvmt common-lisp-user::subvocalize)) (#1# . 8843) ext::annotate (common-lisp-user::speech-module common-lisp-user::subvocalize) (common-lisp-user::spch-mod common-lisp-user::mvmt) common-lisp-user::spch-mod common-lisp-user::mvmt common-lisp-user::sound-event :onset common-lisp-user::mp-time-ms common-lisp-user::exec-time common-lisp-user::seconds->ms + :duration common-lisp-user::text t common-lisp-user::get-art-time :content :delay common-lisp-user::subvocalize-delay :recode :location common-lisp-user::internal :kind common-lisp-user::word make-instance common-lisp-user::new-sound-event #Y(common-lisp-user::queue-output-events nil nil (24 45 7 24 45 8 26 15 9 14 10 19 0 11 12 13 0 19 1 12 12 19 1 13 12 19 2 14 12 14 15 13 1 13 0 19 1 16 12 14 17 19 3 18 12 14 19 13 0 19 1 16 12 14 20 13 1 19 1 21 12 14 22 9 0 14 23 15 24 14 25 15 26 19 15 27 12 19 1 28 29) #16# #1# 8843) clos::install-method)) #1# 8843) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 15 12 19 2 16 1 0 73 29) #17=#A(t (17) (common-lisp-user::query-speech-module ext::location (defun common-lisp-user::query-speech-module) (#1# . 9264) ext::annotate :lambda-list (common-lisp-user::speech common-lisp-user::buffer common-lisp-user::slot common-lisp-user::value) common-lisp-user::speech common-lisp-user::buffer common-lisp-user::slot common-lisp-user::value common-lisp-user::state eq error common-lisp-user::generic-state-query #Y(common-lisp-user::query-speech-module nil nil (24 45 7 24 45 8 24 45 9 24 45 10 26 13 1 1 11 17 12 39 7 13 0 1 13 17 12 39 5 75 73 38 12 13 3 13 2 13 1 13 0 19 4 14 29) #17# #1# 9264) si::fset)) #1# 9264) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 18 12 14 19 19 6 20 29) #18=#A(t (21) (common-lisp-user::pm-module-last-cmd-name ext::location (defmethod common-lisp-user::pm-module-last-cmd-name (common-lisp-user::speech common-lisp-user::speech-module) common-lisp-user::buffer-name common-lisp-user::chunk-spec) (#1# . 9592) ext::annotate (common-lisp-user::speech-module t t) (common-lisp-user::speech common-lisp-user::buffer-name common-lisp-user::chunk-spec) common-lisp-user::speech common-lisp-user::buffer-name common-lisp-user::chunk-spec common-lisp-user::chunk-spec-slot-spec common-lisp-user::main-spec length = common-lisp-user::speak common-lisp-user::spec-slot-name eq common-lisp-user::subvocalize #Y(common-lisp-user::pm-module-last-cmd-name nil nil (24 45 7 24 45 8 24 45 9 26 13 0 19 1 10 45 11 10 0 16 12 12 9 1 19 2 13 73 39 35 15 14 10 0 4 12 19 1 15 17 16 40 12 15 17 10 0 4 12 19 1 15 17 16 73 39 8 10 0 4 12 19 1 15 43 1 29) #18# #1# 9592) t clos::install-method)) #1# 9592) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 15 5 15 6 1 66 12 14 46 19 6 67 29) #19=#A(t (68) (common-lisp-user::pm-module-request ext::location (defmethod common-lisp-user::pm-module-request (common-lisp-user::speech common-lisp-user::speech-module) common-lisp-user::buffer-name common-lisp-user::chunk-spec) (#1# . 9983) ext::annotate (common-lisp-user::speech-module t t) (common-lisp-user::speech common-lisp-user::buffer-name common-lisp-user::chunk-spec) common-lisp-user::speech common-lisp-user::buffer-name common-lisp-user::chunk-spec common-lisp-user::test-for-clear-request common-lisp-user::clear :module :speech :destination :output common-lisp-user::low common-lisp-user::schedule-event-now common-lisp-user::cmd common-lisp-user::chunk-spec-slot-spec length = common-lisp-user::spec-slot-value common-lisp-user::speak common-lisp-user::subvocalize string common-lisp-user::verify-single-explicit-value stringp :params :text :request-spec :details "~a ~a ~a" format common-lisp-user::complete-request common-lisp-user::printing-module common-lisp-user::get-module-fct #:g13602 #:g13601 common-lisp-user::printing-module-v common-lisp-user::act-r-output-stream #:g13603 common-lisp-user::printing-module-model-warnings *error-output* eq common-lisp-user::*one-stream-hack* t *standard-output* eql "~&#|Warning~:[~*~; (in model ~a)~]: ~@? |#~%" common-lisp-user::mp-models > common-lisp-user::current-model "String slot in a ~s request must be a Lisp string." finish-output "~&#|Warning~:[~*~; (in model ~a)~]: ~@? |#~%" "~&#|Warning~:[~*~; (in model ~a)~]: ~@? |#~%" #20="~&#|Warning~:[~*~;~@[ (in model ~a)~]~]: ~@? |#~%" common-lisp-user::current-mp-fct "Invalid command ~a sent to the vocal buffer" "Invalid command to speech module specifies the cmd slot multiple times." common-lisp-user::subv-spec common-lisp-user::speak-spec "~a ~a ~a" "~a ~a ~a" "Invalid command to speech module does not specify a valid action." #Y(common-lisp-user::pm-module-request nil nil (24 45 7 24 45 8 24 45 9 26 13 0 19 1 10 39 20 15 11 14 12 14 13 14 14 14 13 14 15 15 16 19 7 17 38 627 13 0 15 18 19 2 19 16 20 12 9 1 19 2 21 39 325 13 0 15 18 19 2 19 4 12 19 1 22 45 18 10 0 41 23 4 42 24 253 13 1 15 25 14 13 13 0 19 4 26 45 25 10 0 16 27 39 48 13 1 14 14 14 13 14 28 14 29 13 0 14 30 10 2 6 4 12 14 12 14 13 14 15 15 16 14 31 77 15 32 13 1 14 29 13 0 19 5 33 12 19 11 17 38 183 13 2 19 1 34 15 35 19 1 36 47 1 37 45 38 10 1 39 10 13 0 19 1 39 12 19 1 40 73 39 150 13 0 19 1 39 12 19 1 40 45 41 13 1 19 1 42 76 40 127 10 0 76 40 27 13 0 11 43 17 44 40 19 11 45 40 15 13 0 11 46 17 44 39 7 14 43 11 47 17 48 39 35 14 43 15 49 19 0 50 16 20 12 9 1 19 2 51 12 19 0 52 12 15 53 13 4 19 6 33 14 43 19 1 54 38 60 14 43 15 55 19 0 50 16 20 12 9 1 19 2 51 12 19 0 52 12 15 53 13 4 19 6 33 14 43 19 1 54 13 0 15 56 19 0 50 16 20 12 9 1 19 2 51 12 19 0 52 12 15 53 13 4 19 6 33 75 73 43 1 43 2 43 1 38 47 13 1 19 1 34 14 43 15 57 19 0 58 73 39 12 19 0 50 16 20 12 9 1 19 2 51 12 19 0 52 12 15 59 13 0 19 6 33 12 14 43 19 1 54 22 73 43 1 38 286 13 0 15 18 19 2 19 39 47 13 0 19 1 34 14 43 15 57 19 0 58 73 39 12 19 0 50 16 20 12 9 1 19 2 51 12 19 0 52 12 15 60 19 5 33 12 14 43 19 1 54 22 73 38 231 13 0 15 23 19 2 19 12 13 0 15 24 19 2 19 12 46 61 46 62 10 0 16 20 12 9 1 19 2 21 39 10 10 0 4 12 19 1 22 16 27 39 60 15 23 14 14 14 13 14 28 14 29 10 0 4 12 19 1 22 12 14 30 10 2 6 4 12 14 12 14 13 14 15 15 16 14 31 77 15 63 15 23 14 29 10 0 4 12 19 1 22 12 19 5 33 12 19 11 17 38 127 10 1 16 20 12 9 1 19 2 21 39 10 10 1 4 12 19 1 22 16 27 39 60 15 24 14 14 14 13 14 28 14 29 10 1 4 12 19 1 22 12 14 30 10 2 6 4 12 14 12 14 13 14 15 15 16 14 31 77 15 64 15 24 14 29 10 0 4 12 19 1 22 12 19 5 33 12 19 11 17 38 45 13 2 19 1 34 14 43 15 57 19 0 58 73 39 12 19 0 50 16 20 12 9 1 19 2 51 12 19 0 52 12 15 65 19 5 33 12 14 43 19 1 54 22 73 43 2 29) #19# #1# 9983) clos::install-method)) #1# 9983) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 22 12 19 2 23 1 0 73 29) #21=#A(t (24) (common-lisp-user::reset-speech-module ext::location (defun common-lisp-user::reset-speech-module) (#1# . 12752) ext::annotate :lambda-list (common-lisp-user::instance) common-lisp-user::instance common-lisp-user::reset-pm-module (common-lisp-user::speech-command (common-lisp-user::cmd "speech command")) common-lisp-user::chunk-type-fct ((common-lisp-user::speak (:include common-lisp-user::speech-command)) (common-lisp-user::cmd common-lisp-user::speak) string common-lisp-user::speak) ((common-lisp-user::subvocalize (:include common-lisp-user::speech-command)) (common-lisp-user::cmd common-lisp-user::subvocalize) string common-lisp-user::subvocalize) (common-lisp-user::speak common-lisp-user::subvocalize) si::%dolist-var common-lisp-user::c common-lisp-user::chunk-p-fct common-lisp-user::isa common-lisp-user::define-chunks-fct common-lisp-user::make-chunk-immutable (common-lisp-user::self common-lisp-user::internal) common-lisp-user::name #Y(common-lisp-user::reset-speech-module nil nil (24 45 7 26 13 0 19 1 8 15 9 19 1 10 15 11 19 1 10 15 12 19 1 10 1 13 45 14 75 45 15 38 38 10 1 4 51 0 13 0 19 1 16 76 39 20 13 0 15 17 10 0 6 3 6 1 12 19 1 18 13 0 19 1 19 10 1 5 51 1 10 1 40 -40 43 2 1 20 45 14 75 45 15 38 38 10 1 4 51 0 13 0 19 1 16 76 39 20 13 0 15 21 10 0 6 3 6 1 12 19 1 18 13 0 19 1 19 10 1 5 51 1 10 1 40 -40 75 73 43 2 29) #21# #1# 12752) si::fset)) #1# 12752) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 28 12 19 2 29 1 0 73 29) #22=#A(t (30) (common-lisp-user::params-speech-module ext::location (defun common-lisp-user::params-speech-module) (#1# . 13328) ext::annotate :lambda-list (common-lisp-user::speech common-lisp-user::param) common-lisp-user::speech common-lisp-user::param consp :syllable-rate #:g13610 common-lisp-user::sgp common-lisp-user::safe-seconds->ms #:g13611 (setf common-lisp-user::s-rate) :char-per-syllable #:g13612 #:g13613 (setf common-lisp-user::char-per-syllable) :subvocalize-detect-delay #:g13614 #:g13615 (setf common-lisp-user::subvocalize-delay) common-lisp-user::s-rate common-lisp-user::ms->seconds common-lisp-user::char-per-syllable common-lisp-user::subvocalize-delay #Y(common-lisp-user::params-speech-module nil nil (24 45 7 24 45 8 26 10 0 16 9 39 106 10 0 4 42 10 34 10 1 45 11 10 1 5 12 15 12 19 2 13 45 14 13 0 13 1 33 15 18 2 43 1 43 1 10 0 5 73 38 65 42 16 24 10 1 45 17 10 1 5 45 18 13 0 13 1 33 19 18 2 43 1 43 1 38 39 42 20 34 10 1 45 21 10 1 5 12 15 12 19 2 13 45 22 13 0 13 1 33 23 18 2 43 1 43 1 10 0 5 73 38 3 75 73 38 43 10 0 42 10 12 13 1 19 1 24 12 19 1 25 38 27 42 16 8 13 1 19 1 26 38 17 42 20 12 13 1 19 1 27 12 19 1 25 38 3 75 73 29) #22# #1# 13328) si::fset)) #1# 13328) #Y(si::bytecodes nil nil (14 0 15 1 14 2 15 3 14 4 1 7 12 14 8 14 9 19 7 10 6 1 12 14 11 14 12 15 13 14 14 15 15 14 16 15 17 14 18 15 19 19 9 20 12 14 21 14 12 15 13 14 14 15 22 14 16 15 23 14 18 15 24 19 9 20 12 14 25 14 12 15 26 14 14 9 3 14 16 15 27 14 18 15 28 19 9 20 6 3 12 14 29 15 30 14 18 15 31 14 32 1 36 12 14 37 33 38 12 14 39 33 40 12 14 41 15 42 14 43 33 44 12 19 17 45 29) #23=#A(t (46) (:speech common-lisp-user::vocal :queries (common-lisp-user::modality common-lisp-user::preparation common-lisp-user::execution common-lisp-user::processor common-lisp-user::last-command) :status-fn common-lisp-user::get-module-fct common-lisp-user::print-module-status #Y(nil nil nil (26 15 0 19 1 5 12 19 1 6 29) #23# #1# 13983) :trackable t common-lisp-user::define-buffer-fct :syllable-rate :valid-test common-lisp-user::nonneg :default-value 0.15 :warning "a non-negative number" :documentation "Seconds per syllable." common-lisp-user::define-parameter :subvocalize-detect-delay 0.3 "a non-negative number" "Sound detect time for a subvocalized word." :char-per-syllable common-lisp-user::posnum "a positive number" "Characters per syllable." :version "4.0" "A module to provide a model with the ability to speak" :creation common-lisp-user::x common-lisp-user::speech-module make-instance #Y(nil nil nil (24 45 33 26 15 34 19 1 35 29) #23# #1# 13983) :reset common-lisp-user::reset-speech-module :query common-lisp-user::query-speech-module :request common-lisp-user::pm-module-request :params common-lisp-user::params-speech-module common-lisp-user::define-module-fct)) #1# 13983) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 33 12 19 2 34 15 0 15 35 15 36 19 3 37 1 0 73 29) #24=#A(t (38) (common-lisp-user::register-articulation-time ext::location (defun common-lisp-user::register-articulation-time) (#1# . 15108) ext::annotate :lambda-list (string time) string time common-lisp-user::*meta-processes* common-lisp-user::mps-current *error-output* #20# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "No current meta-process.  Cannot set articulation time." format finish-output common-lisp-user::meta-p-current-model "No current model.  Cannot set articulation time." :speech common-lisp-user::get-module-fct common-lisp-user::it numberp minusp "Articulation time must be a non-negative number." stringp "Must specify a string for which the articulation time is to be set." common-lisp-user::register-art-time "No Speech module found.  Cannot set articulation time." #Y(common-lisp-user::register-articulation-time nil nil (24 45 7 24 45 8 26 14 9 19 1 10 76 39 42 14 11 15 12 19 0 13 73 39 12 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 18 19 5 19 12 14 11 19 1 20 22 73 38 219 14 9 19 1 10 12 19 1 21 76 39 42 14 11 15 12 19 0 13 73 39 12 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 22 19 5 19 12 14 11 19 1 20 22 73 38 166 15 23 19 1 24 45 25 10 0 39 114 10 1 16 26 76 40 5 10 1 16 27 39 42 14 11 15 12 19 0 13 73 39 12 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 28 19 5 19 12 14 11 19 1 20 22 73 38 58 10 2 16 29 76 39 42 14 11 15 12 19 0 13 73 39 12 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 30 19 5 19 12 14 11 19 1 20 22 73 38 10 13 0 13 2 13 1 19 3 31 38 40 14 11 15 12 19 0 13 73 39 12 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 32 19 5 19 12 14 11 19 1 20 22 73 43 1 29) #24# #1# 15108) si::fset function "Register the articulation time of a string." si::set-documentation)) #1# 15108) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 30 12 19 2 31 15 0 15 32 15 33 19 3 34 1 0 73 29) #25=#A(t (35) (common-lisp-user::get-articulation-time ext::location (defun common-lisp-user::get-articulation-time) (#1# . 15944) ext::annotate :lambda-list (string &optional common-lisp-user::time-in-ms) string common-lisp-user::time-in-ms common-lisp-user::*meta-processes* common-lisp-user::mps-current *error-output* #20# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "No current meta-process.  Cannot get articulation time." format finish-output common-lisp-user::meta-p-current-model "No current model.  Cannot get articulation time." :speech common-lisp-user::get-module-fct common-lisp-user::it stringp "Must specify a string for which to get the articulation time." common-lisp-user::get-art-time "No Speech module found.  Cannot get articulation time." #Y(common-lisp-user::get-articulation-time nil nil (24 45 7 25 40 2 77 46 8 26 14 9 19 1 10 76 39 42 14 11 15 12 19 0 13 73 39 12 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 18 19 5 19 12 14 11 19 1 20 22 73 38 165 14 9 19 1 10 12 19 1 21 76 39 42 14 11 15 12 19 0 13 73 39 12 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 22 19 5 19 12 14 11 19 1 20 22 73 38 112 15 23 19 1 24 45 25 10 0 39 60 10 2 16 26 76 39 42 14 11 15 12 19 0 13 73 39 12 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 27 19 5 19 12 14 11 19 1 20 22 73 38 10 13 0 13 2 13 1 19 3 28 38 40 14 11 15 12 19 0 13 73 39 12 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 29 19 5 19 12 14 11 19 1 20 22 73 43 1 29) #25# #1# 15944) si::fset function "Return the articulation time of a string." si::set-documentation)) #1# 15944) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 1 0 73 29) #26=#A(t (15) (common-lisp-user::pm-register-articulation-time ext::location (defun common-lisp-user::pm-register-articulation-time) (#1# . 16541) ext::annotate :lambda-list (string time) string time common-lisp-user::register-articulation-time #Y(common-lisp-user::pm-register-articulation-time nil nil (24 45 7 24 45 8 26 13 1 13 0 19 2 9 29) #26# #1# 16541) si::fset function "Register the articulation time of a string." si::set-documentation)) #1# 16541))
