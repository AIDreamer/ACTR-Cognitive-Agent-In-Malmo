(#Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 8 12 19 2 9 1 0 73 29) #1=#A(t (10) (common-lisp-user::stepper-open-p ext::location (defun common-lisp-user::stepper-open-p) (#2=#P"C:/Users/Son Pham/Desktop/actr7/environment/environment-cmds.lisp" . 0) ext::annotate :lambda-list common-lisp-user::*environment-control* common-lisp-user::environment-control-stepper-open #Y(common-lisp-user::stepper-open-p nil nil (26 14 6 19 1 7 29) #1# #2# 0) si::fset)) #2# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 8 12 19 2 9 1 0 73 29) #3=#A(t (10) (common-lisp-user::environment-busy-p ext::location (defun common-lisp-user::environment-busy-p) (#2# . 5539) ext::annotate :lambda-list common-lisp-user::*environment-control* common-lisp-user::environment-control-busy-flag #Y(common-lisp-user::environment-busy-p nil nil (26 14 6 19 1 7 29) #3# #2# 5539) si::fset)) #2# 5539) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 12 12 19 2 13 1 0 73 29) #4=#A(t (14) (common-lisp-user::set-environment-busy ext::location (defun common-lisp-user::set-environment-busy) (#2# . 5626) ext::annotate :lambda-list common-lisp-user::*environment-control* #:g21000 t #:g21001 common-lisp-user::environment-control si::structure-set #Y(common-lisp-user::set-environment-busy nil nil (26 11 6 45 7 11 8 45 9 13 1 15 10 9 4 13 0 19 4 11 43 1 43 1 29) #4# #2# 5626) si::fset)) #2# 5626) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 11 12 19 2 12 1 0 73 29) #5=#A(t (13) (common-lisp-user::set-environment-free ext::location (defun common-lisp-user::set-environment-free) (#2# . 5724) ext::annotate :lambda-list common-lisp-user::*environment-control* #:g21004 #:g21005 common-lisp-user::environment-control si::structure-set #Y(common-lisp-user::set-environment-free nil nil (26 11 6 45 7 75 45 8 13 1 15 9 9 4 13 0 19 4 10 43 1 43 1 29) #5# #2# 5724) si::fset)) #2# 5724) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 25 12 19 2 26 1 0 73 29) #6=#A(t (27) (common-lisp-user::reset-model-env ext::location (defun common-lisp-user::reset-model-env) (#2# . 5824) ext::annotate :lambda-list (common-lisp-user::x) common-lisp-user::x common-lisp-user::stepper-open-p common-lisp-user::environment-busy-p *error-output* #7="~&#|Warning~:[~*~;~@[ (in model ~a)~]~]: ~@? |#~%" common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "Cannot reset if ACT-R is running or if the stepper is open." format finish-output common-lisp-user::set-environment-busy common-lisp-user::reset t "~%#|## ACT-R has been reset. ##|#~%" common-lisp-user::set-environment-free #Y(common-lisp-user::reset-model-env nil nil (24 45 7 26 19 0 8 40 4 19 0 9 39 42 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 17 19 5 18 12 14 10 19 1 19 22 73 38 21 64 15 19 0 20 19 0 21 14 22 15 23 19 2 18 65 19 0 24 66 29) #6# #2# 5824) si::fset)) #2# 5824) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 57 12 19 2 58 1 0 73 29) #8=#A(t (59) (common-lisp-user::reload-model ext::location (defun common-lisp-user::reload-model) (#2# . 6374) ext::annotate :lambda-list (common-lisp-user::smart-load?) common-lisp-user::smart-load? make-string-output-stream common-lisp-user::save-stream *standard-output* make-broadcast-stream common-lisp-user::display-stream *error-output* common-lisp-user::error-stream t common-lisp-user::*one-stream-hack* common-lisp-user::internal-error common-lisp-user::stepper-open-p common-lisp-user::environment-busy-p "Cannot reload if ACT-R is running or if the stepper is open." common-lisp-user::set-environment-busy #:g21010 #:g21011 0 error si::temp #Y(nil nil nil (24 45 26 26 10 0 51 2 35 1 0 29) #8# #2# 6374) si::*handler-clusters* common-lisp-user::c common-lisp-user::o #7# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "Error aborted automatically by environment." format finish-output #Y(nil nil nil (24 45 29 24 45 30 26 14 13 15 31 19 0 32 73 39 12 19 0 33 16 34 12 9 1 19 2 35 12 19 0 36 12 15 37 19 5 38 14 13 19 1 39 10 1 51 5 13 1 19 1 25 29) #8# #2# 6374) *debugger-hook* common-lisp-user::reload condition common-lisp-user::err common-lisp-user::s type-of subtypep "Error during reload" common-lisp-user::uni-report-error get-output-stream-string :none eq "Cannot use reload" "~%#|##  Reload complete ##|#~%" close common-lisp-user::set-environment-free #Y(common-lisp-user::reload-model nil nil (24 45 7 26 19 0 8 45 9 14 10 13 0 19 2 11 45 12 14 13 13 1 19 2 11 45 14 10 1 48 10 10 0 48 13 11 15 48 16 75 45 17 19 0 18 40 4 19 0 19 39 10 9 0 1 20 6 2 73 38 216 64 195 19 0 21 57 22 60 64 75 45 23 57 24 61 1 38 15 25 34 27 3 6 1 12 11 28 3 48 28 34 40 48 41 10 7 39 8 14 15 19 1 42 38 4 19 0 42 44 1 36 2 44 1 10 1 45 43 77 13 0 72 2 43 1 36 2 62 73 43 1 63 47 1 44 45 45 10 2 40 11 10 1 16 46 12 15 43 19 2 47 39 30 10 2 39 6 10 2 73 38 4 10 1 73 12 15 48 19 2 49 9 0 10 5 16 50 6 2 73 38 72 13 0 11 51 17 52 39 48 14 13 15 31 19 0 32 73 39 12 19 0 33 16 34 12 9 1 19 2 35 12 19 0 36 12 15 53 19 5 38 14 13 19 1 39 9 0 10 5 16 50 6 2 73 38 17 14 15 15 54 19 2 38 9 1 10 5 16 50 6 2 73 43 2 65 14 10 19 1 39 14 13 19 1 39 13 3 19 1 55 19 0 56 66 43 4 44 3 29) #8# #2# 6374) si::fset)) #2# 6374) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 52 12 19 2 53 1 0 73 29) #9=#A(t (54) (common-lisp-user::safe-load ext::location (defun common-lisp-user::safe-load) (#2# . 8496) ext::annotate :lambda-list (common-lisp-user::file common-lisp-user::compile-it) common-lisp-user::file common-lisp-user::compile-it common-lisp-user::create-valid-pathname make-string-output-stream common-lisp-user::save-stream *standard-output* make-broadcast-stream common-lisp-user::display-stream *error-output* common-lisp-user::error-stream t common-lisp-user::*one-stream-hack* common-lisp-user::internal-error #:g21020 #:g21021 0 error si::temp #Y(nil nil nil (24 45 24 26 10 0 51 2 35 1 0 29) #9# #2# 8496) si::*handler-clusters* common-lisp-user::c common-lisp-user::o #7# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "Error aborted automatically by environment." format finish-output #Y(nil nil nil (24 45 27 24 45 28 26 14 15 15 29 19 0 30 73 39 12 19 0 31 16 32 12 9 1 19 2 33 12 19 0 34 12 15 35 19 5 36 14 15 19 1 37 10 1 51 5 13 1 19 1 23 29) #9# #2# 8496) *debugger-hook* common-lisp-user::compile-and-load load condition common-lisp-user::err common-lisp-user::s type-of subtypep "Error during load model" common-lisp-user::uni-report-error get-output-stream-string "~%#|##  load model complete ##|#~%" close #Y(common-lisp-user::safe-load nil nil (24 45 7 24 45 8 26 13 1 19 1 9 51 1 19 0 10 45 11 14 12 13 0 19 2 13 45 14 14 15 13 1 19 2 13 45 16 10 1 48 12 10 0 48 15 11 17 48 18 75 45 19 64 139 57 20 60 66 75 45 21 57 22 61 1 40 15 23 34 25 3 6 1 12 11 26 3 48 26 34 38 48 39 10 7 39 8 13 8 19 1 40 38 6 13 8 19 1 41 44 1 36 2 44 1 10 1 45 42 77 13 0 72 2 43 1 36 2 62 73 43 1 63 47 1 43 45 44 10 2 40 11 10 1 16 45 12 15 42 19 2 46 39 30 10 2 39 6 10 2 73 38 4 10 1 73 12 15 47 19 2 48 9 0 10 5 16 49 6 2 73 38 17 14 17 15 50 19 2 36 9 1 10 5 16 49 6 2 73 43 2 65 14 12 19 1 37 14 15 19 1 37 13 3 19 1 51 66 43 4 44 3 29) #9# #2# 8496) si::fset)) #2# 8496) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 10 12 19 2 11 1 0 73 29) #10=#A(t (12) (common-lisp-user::smart-loader ext::location (defun common-lisp-user::smart-loader) (#2# . 10052) ext::annotate :lambda-list (common-lisp-user::file) common-lisp-user::file t common-lisp-user::safe-load #Y(common-lisp-user::smart-loader nil nil (24 45 7 26 13 0 14 8 19 2 9 29) #10# #2# 10052) si::fset)) #2# 10052) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 9 12 19 2 10 1 0 73 29) #11=#A(t (11) (common-lisp-user::buffer-list ext::location (defun common-lisp-user::buffer-list) (#2# . 10104) ext::annotate :lambda-list (common-lisp-user::x) common-lisp-user::x common-lisp-user::buffers #Y(common-lisp-user::buffer-list nil nil (24 45 7 26 19 0 8 29) #11# #2# 10104) si::fset)) #2# 10104) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 13 12 19 2 14 1 0 73 29) #12=#A(t (15) (common-lisp-user::buffer-contents ext::location (defun common-lisp-user::buffer-contents) (#2# . 10164) ext::annotate :lambda-list (common-lisp-user::buffer) common-lisp-user::buffer common-lisp-user::buffer-read common-lisp-user::buffer-chunk-fct *standard-output* "Buffer is Empty" format #Y(common-lisp-user::buffer-contents nil nil (24 45 7 26 13 0 19 1 8 39 11 10 0 6 1 12 19 1 9 38 8 14 10 15 11 19 2 12 29) #12# #2# 10164) si::fset)) #2# 10164) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 16 12 19 2 17 1 0 73 29) #13=#A(t (18) (common-lisp-user::all-dm-slot-lists ext::location (defun common-lisp-user::all-dm-slot-lists) (#2# . 10323) ext::annotate :lambda-list common-lisp-user::none common-lisp-user::x "~a" common-lisp-user::slot-mask->names format #Y(nil nil nil (24 45 7 26 77 15 8 10 0 4 12 19 1 9 12 19 3 10 29) #13# #2# 10323) common-lisp-user::declarative common-lisp-user::get-module-fct common-lisp-user::dm-chunks mapcar #Y(common-lisp-user::all-dm-slot-lists nil nil (26 15 6 34 11 12 15 12 19 1 13 12 19 1 14 12 19 2 15 3 73 29) #13# #2# 10323) si::fset)) #2# 10323) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 23 12 19 2 24 1 0 73 29) #14=#A(t (25) (common-lisp-user::filter-dm-chunks ext::location (defun common-lisp-user::filter-dm-chunks) (#2# . 10514) ext::annotate :lambda-list (common-lisp-user::slot-list) common-lisp-user::slot-list common-lisp-user::valid-slot-name every logior :key common-lisp-user::slot-name->mask reduce common-lisp-user::mask common-lisp-user::x common-lisp-user::slots-vector-match-signature copy-list #Y(nil nil nil (24 45 15 26 10 0 4 12 13 1 19 2 16 39 8 10 0 5 16 17 38 3 75 73 29) #14# #2# 10514) common-lisp-user::declarative common-lisp-user::get-module-fct common-lisp-user::dm-chunks mapcan #Y(common-lisp-user::filter-dm-chunks nil nil (24 45 7 26 15 8 13 0 19 2 9 73 39 32 15 10 13 0 14 11 15 12 19 4 13 45 14 34 18 12 15 19 19 1 20 12 19 1 21 12 19 2 22 43 1 29) #14# #2# 10514) si::fset)) #2# 10514))
