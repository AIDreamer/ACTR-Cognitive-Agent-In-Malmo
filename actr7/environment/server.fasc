(#Y(si::bytecodes nil nil (15 0 14 1 14 2 33 3 12 19 4 4 76 73 39 10 15 5 19 1 6 12 19 1 7 29) #A(t (8) ("UNI-FILES" *modules* :test string= member "ACT-R-support:uni-files" translate-logical-pathname common-lisp-user::compile-and-load)) #1=#P"C:/Users/Son Pham/Desktop/actr7/environment/server.lisp" 0) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ((ftype (function (t t) t) common-lisp-user::delete-handler) proclaim)) #1# 13929) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ((ftype (function (t) t) common-lisp-user::send-register) proclaim)) #1# 13982) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ((ftype (function (t t) t) common-lisp-user::update-handler) proclaim)) #1# 14031) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 12 77 77 15 6 19 15 7 15 0 15 8 15 9 15 10 19 4 11 15 12 15 8 15 13 15 14 19 4 11 15 12 14 15 77 15 16 19 4 11 15 0 19 1 34 78 30 15 12 1 32 12 19 2 33 1 0 73 29) #2=#A(t (35) (common-lisp-user::environment-control "ENVIRONMENT-CONTROL-" (common-lisp-user::address common-lisp-user::port common-lisp-user::connections common-lisp-user::handler-lock common-lisp-user::busy-flag common-lisp-user::stepper common-lisp-user::stepper-open common-lisp-user::windows common-lisp-user::pre-hook common-lisp-user::post-hook common-lisp-user::use-env-windows common-lisp-user::which-hook) ((common-lisp-user::address nil t nil 0 nil) (common-lisp-user::port nil t nil 1 nil) (common-lisp-user::connections nil t nil 2 nil) (common-lisp-user::handler-lock nil t nil 3 nil) (common-lisp-user::busy-flag nil t nil 4 nil) (common-lisp-user::stepper nil t nil 5 nil) (common-lisp-user::stepper-open nil t nil 6 nil) (common-lisp-user::windows nil t nil 7 nil) (common-lisp-user::pre-hook nil t nil 8 nil) (common-lisp-user::post-hook nil t nil 9 nil) (common-lisp-user::use-env-windows nil t nil 10 nil) (common-lisp-user::which-hook nil t nil 11 nil)) common-lisp-user::copy-environment-control (common-lisp-user::make-environment-control) common-lisp-user::environment-control-p si::define-structure ext::location (defstruct common-lisp-user::environment-control) (#1# . 14083) ext::annotate common-lisp-user::make-environment-control (defun common-lisp-user::make-environment-control) (#1# . 14083) :lambda-list (&key #3=#:address #4=#:port #5=#:connections #6=#:handler-lock #7=#:busy-flag #8=#:stepper #9=#:stepper-open #10=#:windows #11=#:pre-hook #12=#:post-hook #13=#:use-env-windows #14=#:which-hook) (nil :which-hook :use-env-windows :post-hook :pre-hook :windows :stepper-open :stepper :busy-flag :handler-lock :connections :port :address) #3# #4# #5# #6# #7# #8# #9# #10# #11# #12# #13# #14# 0 si::make-structure #Y(common-lisp-user::make-environment-control nil nil (28 17 22 40 2 77 46 18 22 40 2 77 46 19 22 40 2 77 46 20 22 40 2 77 46 21 22 40 2 77 46 22 22 40 2 77 46 23 22 40 2 77 46 24 22 40 2 77 46 25 22 40 2 77 46 26 22 40 2 77 46 27 22 40 2 77 46 28 22 40 2 77 46 29 15 30 13 11 13 10 13 9 13 8 13 7 13 6 13 5 13 4 13 3 13 2 13 1 13 0 19 13 31 29) #2# #1# 14083) si::fset find-class)) #1# 14083) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 8 77 77 15 6 19 15 7 15 0 15 8 15 9 15 10 19 4 11 15 12 15 8 15 13 15 14 19 4 11 15 12 14 15 77 15 16 19 4 11 15 0 19 1 31 78 27 15 12 1 29 12 19 2 30 1 0 73 29) #15=#A(t (32) (common-lisp-user::stepper-control "STEPPER-CONTROL-" (common-lisp-user::skip-type common-lisp-user::skip-val common-lisp-user::wait (common-lisp-user::handlers #16=(make-hash-table)) common-lisp-user::current-event common-lisp-user::mode common-lisp-user::tutor-bindings common-lisp-user::tutor-responses) ((common-lisp-user::skip-type nil t nil 0 nil) (common-lisp-user::skip-val nil t nil 1 nil) (common-lisp-user::wait nil t nil 2 nil) (common-lisp-user::handlers #16# t nil 3 nil) (common-lisp-user::current-event nil t nil 4 nil) (common-lisp-user::mode nil t nil 5 nil) (common-lisp-user::tutor-bindings nil t nil 6 nil) (common-lisp-user::tutor-responses nil t nil 7 nil)) common-lisp-user::copy-stepper-control (common-lisp-user::make-stepper-control) common-lisp-user::stepper-control-p si::define-structure ext::location (defstruct common-lisp-user::stepper-control) (#1# . 14394) ext::annotate common-lisp-user::make-stepper-control (defun common-lisp-user::make-stepper-control) (#1# . 14394) :lambda-list (&key #17=#:skip-type #18=#:skip-val #19=#:wait (#20=#:handlers (make-hash-table)) #21=#:current-event #22=#:mode #23=#:tutor-bindings #24=#:tutor-responses) (nil :tutor-responses :tutor-bindings :mode :current-event :handlers :wait :skip-val :skip-type) #17# #18# #19# make-hash-table #20# #21# #22# #23# #24# 0 si::make-structure #Y(common-lisp-user::make-stepper-control nil nil (28 17 22 40 2 77 46 18 22 40 2 77 46 19 22 40 2 77 46 20 22 40 5 19 0 21 12 46 22 22 40 2 77 46 23 22 40 2 77 46 24 22 40 2 77 46 25 22 40 2 77 46 26 15 27 13 7 13 6 13 5 13 4 13 3 13 2 13 1 13 0 19 9 28 29) #15# #1# 14394) si::fset find-class)) #1# 14394) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 34 14 3 15 4 14 5 9 2621 14 6 77 14 7 77 14 8 15 9 19 1 10 12 14 11 19 0 12 12 19 12 13 52 0 15 0 15 14 15 15 15 16 19 4 17 1 0 73 29) #A(t (18) (common-lisp-user::*environment-control* si::*make-special boundp :address "127.0.0.1" :port :connections :busy-flag :handler-lock "Environment Lock" common-lisp-user::uni-make-lock :stepper common-lisp-user::make-stepper-control common-lisp-user::make-environment-control ext::location (defvar common-lisp-user::*environment-control*) (#1# . 14528) ext::annotate)) #1# 14528) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 6 77 77 15 6 19 15 7 15 0 15 8 15 9 15 10 19 4 11 15 12 15 8 15 13 15 14 19 4 11 15 12 14 15 77 15 16 19 4 11 15 0 19 1 29 78 25 15 12 1 27 12 19 2 28 1 0 73 29) #25=#A(t (30) (common-lisp-user::environment-connection "ENVIRONMENT-CONNECTION-" (stream common-lisp-user::local common-lisp-user::process (common-lisp-user::handlers #26=(make-hash-table)) (common-lisp-user::hooks #27=(make-hash-table)) common-lisp-user::sync) ((stream nil t nil 0 nil) (common-lisp-user::local nil t nil 1 nil) (common-lisp-user::process nil t nil 2 nil) (common-lisp-user::handlers #26# t nil 3 nil) (common-lisp-user::hooks #27# t nil 4 nil) (common-lisp-user::sync nil t nil 5 nil)) common-lisp-user::copy-environment-connection (common-lisp-user::make-environment-connection) common-lisp-user::environment-connection-p si::define-structure ext::location (defstruct common-lisp-user::environment-connection) (#1# . 14902) ext::annotate common-lisp-user::make-environment-connection (defun common-lisp-user::make-environment-connection) (#1# . 14902) :lambda-list (&key #28=#:stream #29=#:local #30=#:process (#31=#:handlers (make-hash-table)) (#32=#:hooks (make-hash-table)) #33=#:sync) (nil :sync :hooks :handlers :process :local :stream) #28# #29# #30# make-hash-table #31# #32# #33# 0 si::make-structure #Y(common-lisp-user::make-environment-connection nil nil (28 17 22 40 2 77 46 18 22 40 2 77 46 19 22 40 2 77 46 20 22 40 5 19 0 21 12 46 22 22 40 5 19 0 21 12 46 23 22 40 2 77 46 24 15 25 13 5 13 4 13 3 13 2 13 1 13 0 19 7 26 29) #25# #1# 14902) si::fset find-class)) #1# 14902) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 27 12 19 2 28 1 0 73 29) #34=#A(t (29) (common-lisp-user::call-model-environment-hooks ext::location (defun common-lisp-user::call-model-environment-hooks) (#1# . 15188) ext::annotate :lambda-list (common-lisp-user::hook &optional (common-lisp-user::value nil common-lisp-user::given)) common-lisp-user::hook common-lisp-user::given common-lisp-user::value common-lisp-user::*environment-control* #:g20267 #:g20268 common-lisp-user::environment-control si::structure-set common-lisp-user::environment-control-connections si::%dolist-var common-lisp-user::connection common-lisp-user::environment-connection-hooks gethash common-lisp-user::handler common-lisp-user::handler-model common-lisp-user::current-model eq common-lisp-user::update-handler #:g20269 #:g20270 #Y(common-lisp-user::call-model-environment-hooks nil nil (24 45 7 25 40 3 77 75 45 8 46 9 26 11 10 45 11 10 3 45 12 13 1 15 13 9 11 13 0 19 4 14 43 1 43 1 14 10 19 1 15 45 16 75 45 17 38 84 10 1 4 51 0 13 4 13 0 19 1 18 12 19 2 19 45 16 75 45 20 38 50 10 1 4 51 0 13 0 19 1 21 12 19 0 22 17 23 40 7 13 0 19 1 21 76 39 19 13 0 10 5 39 6 10 4 73 38 4 10 0 73 12 19 2 24 10 1 5 51 1 10 1 40 -52 43 2 10 1 5 51 1 10 1 40 -86 43 2 11 10 45 25 75 45 26 13 1 15 13 9 11 13 0 19 4 14 43 1 43 1 29) #34# #1# 15188) si::fset)) #1# 15188) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 29 12 19 2 30 1 0 73 29) #35=#A(t (31) (common-lisp-user::call-model-environment-hooks-with-return ext::location (defun common-lisp-user::call-model-environment-hooks-with-return) (#1# . 15845) ext::annotate :lambda-list (common-lisp-user::hook &optional (common-lisp-user::value nil common-lisp-user::given)) common-lisp-user::hook common-lisp-user::given common-lisp-user::value common-lisp-user::*environment-control* #:g20279 #:g20280 common-lisp-user::environment-control si::structure-set common-lisp-user::val common-lisp-user::environment-control-connections si::%dolist-var common-lisp-user::connection common-lisp-user::environment-connection-hooks gethash common-lisp-user::handler common-lisp-user::handler-model common-lisp-user::current-model eq common-lisp-user::update-handler common-lisp-user::r #:g20285 #:g20286 #Y(common-lisp-user::call-model-environment-hooks-with-return nil nil (24 45 7 25 40 3 77 75 45 8 46 9 26 11 10 45 11 10 3 45 12 13 1 15 13 9 11 13 0 19 4 14 43 1 43 1 75 45 15 14 10 19 1 16 45 17 75 45 18 38 96 10 1 4 51 0 13 5 13 0 19 1 19 12 19 2 20 45 17 75 45 21 38 62 10 1 4 51 0 13 0 19 1 22 12 19 0 23 17 24 40 7 13 0 19 1 22 76 39 31 13 0 10 6 39 6 10 5 73 38 4 10 0 73 12 19 2 25 45 26 10 0 39 5 10 0 51 5 43 1 10 1 5 51 1 10 1 40 -64 43 2 10 1 5 51 1 10 1 40 -98 43 2 11 10 45 27 75 45 28 13 1 15 13 9 11 13 0 19 4 14 43 1 43 1 10 0 73 43 1 29) #35# #1# 15845) si::fset)) #1# 15845) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 24 12 19 2 25 1 0 73 29) #36=#A(t (26) (common-lisp-user::call-all-environment-hooks ext::location (defun common-lisp-user::call-all-environment-hooks) (#1# . 16615) ext::annotate :lambda-list (common-lisp-user::hook &optional (common-lisp-user::value nil common-lisp-user::given)) common-lisp-user::hook common-lisp-user::given common-lisp-user::value common-lisp-user::*environment-control* #:g20291 #:g20292 common-lisp-user::environment-control si::structure-set common-lisp-user::environment-control-connections si::%dolist-var common-lisp-user::connection common-lisp-user::environment-connection-hooks gethash common-lisp-user::handler common-lisp-user::update-handler #:g20293 #:g20294 #Y(common-lisp-user::call-all-environment-hooks nil nil (24 45 7 25 40 3 77 75 45 8 46 9 26 11 10 45 11 10 3 45 12 13 1 15 13 9 11 13 0 19 4 14 43 1 43 1 14 10 19 1 15 45 16 75 45 17 38 63 10 1 4 51 0 13 4 13 0 19 1 18 12 19 2 19 45 16 75 45 20 38 29 10 1 4 51 0 13 0 10 5 39 6 10 4 73 38 4 10 0 73 12 19 2 21 10 1 5 51 1 10 1 40 -31 43 2 10 1 5 51 1 10 1 40 -65 43 2 11 10 45 22 75 45 23 13 1 15 13 9 11 13 0 19 4 14 43 1 43 1 29) #36# #1# 16615) si::fset)) #1# 16615) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 17 12 19 2 18 1 0 73 29) #37=#A(t (19) (common-lisp-user::add-pre-hook-if-needed ext::location (defun common-lisp-user::add-pre-hook-if-needed) (#1# . 17045) ext::annotate :lambda-list common-lisp-user::*environment-control* common-lisp-user::environment-control-pre-hook #:g20297 common-lisp-user::event common-lisp-user::pre common-lisp-user::call-all-environment-hooks #Y(nil nil nil (24 45 9 26 15 10 13 0 19 2 11 29) #37# #1# 17045) common-lisp-user::add-pre-event-hook #:g20298 common-lisp-user::environment-control si::structure-set #Y(common-lisp-user::add-pre-hook-if-needed nil nil (26 14 6 19 1 7 76 73 39 28 11 6 45 8 34 12 12 19 1 13 45 14 13 1 15 15 9 8 13 0 19 4 16 43 1 43 1 29) #37# #1# 17045) si::fset)) #1# 17045) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 17 12 19 2 18 1 0 73 29) #38=#A(t (19) (common-lisp-user::add-post-hook-if-needed ext::location (defun common-lisp-user::add-post-hook-if-needed) (#1# . 17326) ext::annotate :lambda-list common-lisp-user::*environment-control* common-lisp-user::environment-control-post-hook #:g20301 common-lisp-user::event common-lisp-user::post common-lisp-user::call-all-environment-hooks #Y(nil nil nil (24 45 9 26 15 10 13 0 19 2 11 29) #38# #1# 17326) common-lisp-user::add-post-event-hook #:g20302 common-lisp-user::environment-control si::structure-set #Y(common-lisp-user::add-post-hook-if-needed nil nil (26 14 6 19 1 7 76 73 39 28 11 6 45 8 34 12 12 19 1 13 45 14 13 1 15 15 9 9 13 0 19 4 16 43 1 43 1 29) #38# #1# 17326) si::fset)) #1# 17326) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 16 12 19 2 17 1 0 73 29) #39=#A(t (18) (common-lisp-user::delete-pre-hook-if-necessary ext::location (defun common-lisp-user::delete-pre-hook-if-necessary) (#1# . 17611) ext::annotate :lambda-list common-lisp-user::*environment-control* common-lisp-user::environment-control-pre-hook common-lisp-user::mp-models length <= common-lisp-user::delete-event-hook #:g20305 #:g20306 common-lisp-user::environment-control si::structure-set #Y(common-lisp-user::delete-pre-hook-if-necessary nil nil (26 14 6 19 1 7 39 12 19 0 8 16 9 12 9 1 19 2 10 73 39 32 14 6 19 1 7 12 19 1 11 11 6 45 12 75 45 13 13 1 15 14 9 8 13 0 19 4 15 43 1 43 1 29) #39# #1# 17611) si::fset)) #1# 17611) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 16 12 19 2 17 1 0 73 29) #40=#A(t (18) (common-lisp-user::delete-post-hook-if-necessary ext::location (defun common-lisp-user::delete-post-hook-if-necessary) (#1# . 17906) ext::annotate :lambda-list common-lisp-user::*environment-control* common-lisp-user::environment-control-post-hook common-lisp-user::mp-models length <= common-lisp-user::delete-event-hook #:g20309 #:g20310 common-lisp-user::environment-control si::structure-set #Y(common-lisp-user::delete-post-hook-if-necessary nil nil (26 14 6 19 1 7 39 12 19 0 8 16 9 12 9 1 19 2 10 73 39 32 14 6 19 1 7 12 19 1 11 11 6 45 12 75 45 13 13 1 15 14 9 9 13 0 19 4 15 43 1 43 1 29) #40# #1# 17906) si::fset)) #1# 17906) #Y(si::bytecodes nil nil (14 0 14 1 15 2 14 3 9 2621 14 4 15 5 14 6 15 7 14 8 1 17 12 19 11 18 29) #41=#A(t (19) (:default-environment-port :valid-test common-lisp-user::posnum :default-value :warning "positive number" :documentation "Default port for connecting to ACT-R Environment" :handler common-lisp-user::set-or-get common-lisp-user::value common-lisp-user::*environment-control* #:g20311 #:g20312 common-lisp-user::environment-control si::structure-set common-lisp-user::environment-control-port #Y(nil nil nil (24 45 9 24 45 10 26 10 1 39 26 11 11 45 12 10 1 45 13 13 1 15 14 9 1 13 0 19 4 15 43 1 43 1 38 6 14 11 19 1 16 29) #41# #1# 18205) common-lisp-user::create-system-parameter)) #1# 18205) #Y(si::bytecodes nil nil (14 0 14 1 15 2 14 3 15 4 14 5 15 6 14 7 15 8 14 9 1 18 12 19 11 19 29) #42=#A(t (20) (:default-environment-host :valid-test stringp :default-value "127.0.0.1" :warning "string of an ipaddress or full host name" :documentation "Default address for connecting to ACT-R Environment" :handler common-lisp-user::set-or-get common-lisp-user::value common-lisp-user::*environment-control* #:g20313 #:g20314 common-lisp-user::environment-control si::structure-set common-lisp-user::environment-control-address #Y(nil nil nil (24 45 10 24 45 11 26 10 1 39 26 11 12 45 13 10 1 45 14 13 1 15 15 9 0 13 0 19 4 16 43 1 43 1 38 6 14 12 19 1 17 29) #42# #1# 18774) common-lisp-user::create-system-parameter)) #1# 18774) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 43 12 19 2 44 1 0 73 29) #43=#A(t (45) (common-lisp-user::close-connection ext::location (defun common-lisp-user::close-connection) (#1# . 19163) ext::annotate :lambda-list (common-lisp-user::connection &key (common-lisp-user::kill t) (common-lisp-user::send t)) common-lisp-user::connection (nil :send :kill) t common-lisp-user::kill common-lisp-user::send common-lisp-user::environment-connection-process common-lisp-user::uni-process-kill #:g20323 #:g20324 0 error si::temp #Y(nil nil nil (24 45 18 26 10 0 51 2 35 1 0 29) #43# #1# 19163) si::*handler-clusters* common-lisp-user::environment-connection-stream "close nil nil<end>" common-lisp-user::uni-send-string condition common-lisp-user::without-interrupts common-lisp-user::*environment-control* #:g20326 common-lisp-user::environment-control-connections remove #:g20327 common-lisp-user::environment-control si::structure-set common-lisp-user::key common-lisp-user::value common-lisp-user::delete-handler #Y(nil nil nil (24 45 33 24 45 34 26 13 0 13 4 19 2 35 29) #43# #1# 19163) common-lisp-user::environment-connection-handlers maphash #:g20328 #:g20329 #Y(nil nil nil (24 45 18 26 10 0 51 2 35 1 0 29) #43# #1# 19163) close #Y(common-lisp-user::close-connection nil nil (24 45 7 28 8 22 40 3 14 9 46 10 22 40 3 14 9 46 11 10 1 39 6 13 2 19 1 12 39 10 13 2 19 1 12 12 19 1 13 10 0 39 63 57 14 60 55 75 45 15 57 16 61 1 29 15 17 34 19 3 6 1 12 11 20 3 48 20 13 5 19 1 21 12 15 22 19 2 23 36 2 44 1 10 1 45 24 77 13 0 72 2 43 1 36 2 62 73 43 1 63 12 19 1 25 11 26 45 27 13 3 14 26 19 1 28 12 19 2 29 45 30 13 1 15 31 9 2 13 0 19 4 32 43 1 43 1 34 36 12 13 2 19 1 37 17 38 57 39 60 53 75 45 40 57 16 61 1 27 15 17 34 41 3 6 1 12 11 20 3 48 20 13 5 19 1 21 12 19 1 42 36 2 44 1 10 1 45 24 77 13 0 72 2 43 1 36 2 62 73 43 1 63 29) #43# #1# 19163) si::fset)) #1# 19163) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 15 12 19 2 16 1 0 73 29) #44=#A(t (17) (common-lisp-user::close-all-connections ext::location (defun common-lisp-user::close-all-connections) (#1# . 20591) ext::annotate :lambda-list common-lisp-user::*environment-control* common-lisp-user::environment-control-connections si::%dolist-var common-lisp-user::connection common-lisp-user::close-connection #:g20333 #:g20334 common-lisp-user::environment-control si::structure-set #Y(common-lisp-user::close-all-connections nil nil (26 14 6 19 1 7 45 8 75 45 9 38 16 10 1 4 51 0 13 0 19 1 10 10 1 5 51 1 10 1 40 -18 43 2 11 6 45 11 75 45 12 13 1 15 13 9 6 13 0 19 4 14 43 1 43 1 29) #44# #1# 20591) si::fset)) #1# 20591) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 70 12 19 2 71 1 0 73 29) #45=#A(t (72) (common-lisp-user::connect-to-environment ext::location (defun common-lisp-user::connect-to-environment) (#1# . 21164) ext::annotate :lambda-list (&key (common-lisp-user::clean t) (common-lisp-user::host nil) (common-lisp-user::port nil) (common-lisp-user::background t)) (nil :background :port :host :clean) t common-lisp-user::clean common-lisp-user::host common-lisp-user::port common-lisp-user::background (:default-environment-host) common-lisp-user::ssp-fct (:default-environment-port) numberp *error-output* #46="~&#|Warning~:[~*~;~@[ (in model ~a)~]~]: ~@? |#~%" common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "Port must be a number." format finish-output stringp "Host must be a string." common-lisp-user::close-all-connections #:g20337 #:g20338 0 error si::temp #Y(nil nil nil (24 45 34 26 10 0 51 2 35 1 0 29) #45# #1# 21164) si::*handler-clusters* common-lisp-user::uni-make-socket condition common-lisp-user::err common-lisp-user::s type-of subtypep unbound-variable equal "Unable to Connect" common-lisp-user::uni-report-error :stream :local "127.0.0.1" string-equal common-lisp-user::make-environment-connection common-lisp-user::connection #:g20340 "Environment-Connection" common-lisp-user::message-process #Y(nil nil nil (26 13 1 19 1 55 29) #45# #1# 21164) common-lisp-user::uni-run-process #:g20341 common-lisp-user::environment-connection si::structure-set #:g20344 common-lisp-user::*environment-control* #:g20342 common-lisp-user::environment-control-connections #:g20343 common-lisp-user::environment-control #:g20347 #:g20345 #:g20346 #Y(common-lisp-user::connect-to-environment nil nil (28 7 22 40 3 14 8 46 9 22 40 2 77 46 10 22 40 2 77 46 11 22 40 3 14 8 46 12 57 0 60 361 10 3 76 39 9 15 13 19 1 14 4 51 3 10 2 76 39 9 15 15 19 1 14 4 51 2 10 2 16 16 76 39 41 14 17 15 18 19 0 19 73 39 12 19 0 20 16 21 12 9 1 19 2 22 12 19 0 23 12 15 24 19 5 25 14 17 19 1 26 75 73 36 0 10 3 16 27 76 39 41 14 17 15 18 19 0 19 73 39 12 19 0 20 16 21 12 9 1 19 2 22 12 19 0 23 12 15 28 19 5 25 14 17 19 1 26 75 73 36 0 10 4 39 4 19 0 29 57 30 60 51 75 45 31 57 32 61 1 25 15 33 34 35 3 6 1 12 11 36 3 48 36 13 6 13 5 19 2 37 36 2 44 1 10 1 45 38 77 13 0 72 2 43 1 36 2 62 73 43 1 63 47 1 39 45 40 10 1 16 41 12 15 38 19 2 42 39 11 10 1 16 41 12 1 43 17 44 76 39 10 13 1 15 45 19 2 46 38 139 14 47 13 0 14 48 13 5 15 49 19 2 50 39 6 8 1 73 38 4 8 0 73 12 19 4 51 45 52 10 4 39 68 10 0 45 53 15 54 34 56 12 14 8 19 3 57 45 58 13 1 15 59 9 2 13 0 19 4 60 43 1 43 1 10 0 45 61 11 62 45 63 13 1 13 0 19 1 64 3 45 65 13 1 15 66 9 2 13 0 19 4 60 43 3 10 0 73 38 37 10 0 45 67 11 62 45 68 13 1 13 0 19 1 64 3 45 69 13 1 15 66 9 2 13 0 19 4 60 43 3 13 0 19 1 55 43 1 43 2 63 29) #45# #1# 21164) si::fset)) #1# 21164) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 15 0 15 3 15 4 15 5 19 4 6 1 0 73 29) #A(t (7) (common-lisp-user::*local-connection* si::*make-special boundp ext::location (defvar common-lisp-user::*local-connection*) (#1# . 23586) ext::annotate)) #1# 23586) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 61 12 19 2 62 1 0 73 29) #47=#A(t (63) (common-lisp-user::message-process ext::location (defun common-lisp-user::message-process) (#1# . 23738) ext::annotate :lambda-list (common-lisp-user::connection) common-lisp-user::connection "" common-lisp-user::environment-connection-stream common-lisp-user::input-stream common-lisp-user::old-string 0 common-lisp-user::uni-wait-for-char #:g20359 #:g20360 error si::temp #Y(nil nil nil (24 45 17 26 10 0 51 2 35 1 0 29) #47# #1# 23738) si::*handler-clusters* common-lisp-user::uni-socket-read-line condition common-lisp-user::value type-of subtypep "Read line failed" common-lisp-user::uni-report-error *error-output* "Environment Connection ended.~%" format :kill common-lisp-user::close-connection common-lisp-user::current-string "<end>" :test string-equal search string concatenate "" #:g20365 #:g20366 #Y(nil nil nil (24 45 17 26 10 0 51 2 35 1 0 29) #47# #1# 23738) common-lisp-user::problem read-from-string common-lisp-user::cmd-list "Error reading from message: ~s" equal "Invalid environment message ~s ~%" listp copy-tree common-lisp-user::cmd-copy "Environment-Handler" common-lisp-user::*environment-control* common-lisp-user::environment-control-handler-lock common-lisp-user::uni-lock common-lisp-user::process-connection common-lisp-user::uni-unlock #Y(nil nil nil (26 64 18 14 53 19 1 54 12 19 1 55 13 8 13 0 19 2 56 65 14 53 19 1 54 12 19 1 57 66 29) #47# #1# 23738) common-lisp-user::uni-run-process "Incorrect environment command recieved: ~S~%" #Y(common-lisp-user::message-process nil nil (24 45 7 26 15 8 13 0 19 1 9 12 46 10 46 11 58 60 314 57 12 61 1 1 13 3 19 1 13 76 39 5 75 73 36 1 57 14 60 49 75 45 15 57 12 61 1 23 15 16 34 18 3 6 1 12 11 19 3 48 19 13 6 19 1 20 36 2 44 1 10 1 45 21 77 13 0 72 2 43 1 36 2 62 73 43 1 63 47 1 21 45 22 10 1 16 23 12 15 21 19 2 24 39 29 13 1 15 25 19 2 26 14 27 15 28 19 2 29 13 6 14 30 77 19 3 31 75 73 36 3 38 3 10 0 43 2 45 32 15 33 13 0 14 34 33 35 12 19 4 36 76 39 14 15 37 13 3 13 0 19 3 38 51 3 38 158 15 37 13 3 13 0 19 3 38 51 0 1 39 51 3 57 40 60 52 75 45 41 57 12 61 1 26 15 16 34 42 3 6 1 12 11 19 3 48 19 13 3 77 15 43 19 3 44 36 2 44 1 10 1 45 21 77 13 0 72 2 43 1 36 2 62 73 43 1 63 47 1 21 45 45 10 1 16 23 12 15 21 19 2 24 39 17 13 1 77 15 46 13 2 19 3 29 12 19 2 26 38 53 15 43 10 0 17 47 39 12 14 27 15 48 13 2 19 3 29 38 34 10 0 16 49 39 19 10 0 16 50 45 51 15 52 34 58 12 19 2 59 43 1 38 10 14 27 15 60 13 2 19 3 29 43 2 43 1 35 0 0 62 73 63 43 2 29) #47# #1# 23738) si::fset)) #1# 23738) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 107 12 19 2 108 1 0 73 29) #48=#A(t (109) (common-lisp-user::process-connection ext::location (defun common-lisp-user::process-connection) (#1# . 27440) ext::annotate :lambda-list (common-lisp-user::connection common-lisp-user::cmd-list) common-lisp-user::connection common-lisp-user::cmd-list common-lisp-user::environment-connection-local common-lisp-user::*local-connection* common-lisp-user::create length = second :use-model :model seventh :socket common-lisp-user::environment-connection-stream :object-name third :target-name fourth :update-form fifth common-lisp-user::functionify make-instance common-lisp-user::new-handler common-lisp-user::name common-lisp-user::environment-connection-handlers si::hash-set common-lisp-user::send-register common-lisp-user::update-handler sixth si::%dolist-var common-lisp-user::x common-lisp-user::pre common-lisp-user::post common-lisp-user::conflict common-lisp-user::conflict-nil delete common-lisp-user::reset common-lisp-user::run-start common-lisp-user::run-end #:g20405 #:g20402 common-lisp-user::environment-connection-hooks #:g20403 gethash #:g20404 common-lisp-user::printing-module common-lisp-user::get-module-fct #:g20407 #:g20406 common-lisp-user::printing-module-v common-lisp-user::act-r-output-stream #:g20408 common-lisp-user::printing-module-model-warnings *error-output* eq common-lisp-user::*one-stream-hack* t *standard-output* eql "~&#|Warning~:[~*~; (in model ~a)~]: ~@? |#~%" common-lisp-user::mp-models > common-lisp-user::current-model "Invalid hook ~s for handler ~S" format finish-output "~&#|Warning~:[~*~; (in model ~a)~]: ~@? |#~%" "~&#|Warning~:[~*~; (in model ~a)~]: ~@? |#~%" "Invalid create message: ~s" common-lisp-user::update common-lisp-user::handler #:g20409 #:g20410 (setf common-lisp-user::update-form) "Invalid update message: ~s" remove common-lisp-user::safe-evaluation common-lisp-user::delete-handler "Invalid remove message: ~s" common-lisp-user::k-a #:g20411 #:g20412 0 error si::temp #Y(nil nil nil (24 45 90 26 10 0 51 2 35 1 0 29) #48# #1# 27440) si::*handler-clusters* "ka nil nil<end>~%" common-lisp-user::uni-send-string condition common-lisp-user::sync #:g20414 #:g20415 common-lisp-user::environment-connection si::structure-set common-lisp-user::goodbye "Environment Closed~%" :kill :send common-lisp-user::close-connection "Invalid command request: ~s~%" #Y(common-lisp-user::process-connection nil nil (24 45 7 24 45 8 26 13 1 19 1 9 48 10 10 0 4 42 11 426 10 0 16 12 12 9 6 19 2 13 40 11 10 0 16 12 12 9 7 19 2 13 39 391 10 0 16 14 12 14 15 10 0 16 12 12 9 7 19 2 13 12 14 16 10 0 16 12 12 9 7 19 2 13 39 7 10 0 16 17 38 3 75 73 12 14 18 13 1 19 1 19 12 14 20 10 0 16 21 12 14 22 10 0 16 23 12 14 24 10 0 16 25 12 19 1 26 12 19 13 27 45 28 13 0 19 1 29 12 13 2 19 1 30 12 13 0 19 3 31 13 0 19 1 32 13 0 13 0 19 2 33 10 1 16 34 45 35 75 45 36 38 260 10 1 4 51 0 10 0 41 37 25 41 38 22 41 39 19 41 40 16 41 11 13 41 41 10 41 42 7 41 43 4 42 44 41 10 2 45 45 10 1 45 46 13 6 19 1 47 45 48 13 2 13 1 13 0 19 2 49 3 45 50 13 2 13 1 13 0 19 3 31 43 4 38 181 15 51 19 1 52 47 1 53 45 54 10 1 39 10 13 0 19 1 55 12 19 1 56 39 154 13 0 19 1 55 12 19 1 56 45 57 13 1 19 1 58 76 40 133 10 0 76 40 27 13 0 11 59 17 60 40 19 11 61 40 15 13 0 11 62 17 60 39 7 14 59 11 63 17 64 39 37 14 59 15 65 19 0 66 16 12 12 9 1 19 2 67 12 19 0 68 12 15 69 13 3 13 6 19 7 70 14 59 19 1 71 38 64 14 59 15 72 19 0 66 16 12 12 9 1 19 2 67 12 19 0 68 12 15 69 13 3 13 6 19 7 70 14 59 19 1 71 13 0 15 73 19 0 66 16 12 12 9 1 19 2 67 12 19 0 68 12 15 69 13 3 13 6 19 7 70 43 1 43 2 10 1 5 51 1 10 1 40 -262 75 73 43 2 43 1 38 10 14 59 15 74 13 0 19 3 70 38 348 42 75 124 10 0 16 12 12 9 2 19 2 13 39 32 10 0 16 14 12 13 1 19 1 30 12 19 2 49 45 76 10 0 73 39 7 13 0 77 19 2 33 43 1 38 79 10 0 16 12 12 9 3 19 2 13 39 58 10 0 16 14 12 13 1 19 1 30 12 19 2 49 45 76 10 0 73 39 33 10 0 45 77 10 2 16 21 12 19 1 26 45 78 13 0 13 1 33 79 18 2 43 1 43 1 13 0 77 19 2 33 43 1 38 10 14 59 15 80 13 0 19 3 70 38 222 42 81 85 10 0 16 12 12 9 2 19 2 13 40 11 10 0 16 12 12 9 3 19 2 13 39 50 10 0 16 14 12 13 1 19 1 30 12 19 2 49 45 76 10 1 16 12 12 9 3 19 2 13 39 11 10 1 16 21 12 13 0 19 2 82 13 0 13 2 19 2 83 43 1 38 10 14 59 15 84 13 0 19 3 70 38 135 42 85 66 57 86 60 60 75 45 87 57 88 61 1 34 15 89 34 91 3 6 1 12 11 92 3 48 92 13 4 19 1 19 12 77 15 93 19 2 70 12 19 2 94 36 2 44 1 10 1 45 95 77 13 0 72 2 43 1 36 2 62 73 43 1 63 38 67 42 96 26 10 1 45 97 11 62 45 98 13 1 15 99 9 5 13 0 19 4 100 43 1 43 1 38 39 42 101 27 14 59 15 102 19 2 70 14 59 19 1 71 13 1 14 103 14 62 14 104 77 19 5 105 38 10 14 59 15 106 13 0 19 3 70 44 1 29) #48# #1# 27440) si::fset)) #1# 27440) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 74 12 19 2 75 1 0 73 29) #49=#A(t (76) (common-lisp-user::safe-evaluation ext::location (defun common-lisp-user::safe-evaluation) (#1# . 31904) ext::annotate :lambda-list (common-lisp-user::form common-lisp-user::handler) common-lisp-user::form common-lisp-user::handler common-lisp-user::handler-model common-lisp-user::it common-lisp-user::current-model common-lisp-user::model common-lisp-user::mp-models find common-lisp-user::*meta-processes* common-lisp-user::mps-current #:g20435 #:g20437 common-lisp-user::valid-model-name common-lisp-user::meta-p-current-model #:g20436 #:g20438 common-lisp-user::meta-p-models gethash #:g20439 common-lisp-user::meta-process si::structure-set #:g20440 #:g20442 common-lisp-user::meta-p-cannot-define-model + #:g20441 #:g20443 #:g20444 0 error si::temp #Y(nil nil nil (24 45 37 26 10 0 51 2 35 1 0 29) #49# #1# 31904) si::*handler-clusters* common-lisp-user::functionify condition common-lisp-user::err common-lisp-user::result type-of subtypep unbound-variable equal t "~S~%" format "Error in remove message for: ~S~%Removing: ~S~%Message: ~S~%" common-lisp-user::name common-lisp-user::obj-name common-lisp-user::uni-report-error #:g20446 #:g20447 #:g20448 #:g20450 - #:g20449 *error-output* #46# common-lisp-user::current-mp-fct length > "~S does not name a model in the current meta-process" finish-output "No actions taken in with-model because there is no current meta-process" #:g20451 #:g20452 #Y(nil nil nil (24 45 37 26 10 0 51 2 35 1 0 29) #49# #1# 31904) "~S~%" "Error in remove message for: ~S~%Removing: ~S~%Message: ~S~%" #Y(common-lisp-user::safe-evaluation nil nil (24 45 7 24 45 8 26 13 0 19 1 9 45 10 10 0 39 5 10 0 38 4 19 0 11 43 1 45 12 10 0 39 10 13 0 19 0 13 12 19 2 14 39 413 14 15 19 1 16 45 17 10 0 39 359 10 1 45 18 13 0 19 1 19 39 303 14 15 19 1 16 39 10 14 15 19 1 16 12 19 1 20 45 21 14 15 19 1 16 45 22 13 2 13 3 19 1 23 12 19 2 24 45 25 13 1 15 26 9 5 13 0 19 4 27 43 1 43 1 14 15 19 1 16 45 28 8 1 45 29 13 1 19 1 30 12 13 0 19 2 31 45 32 13 2 15 26 9 29 13 0 19 4 27 43 3 64 169 64 139 57 33 60 53 75 45 34 57 35 61 1 27 15 36 34 38 3 6 1 12 11 39 3 48 39 13 8 19 1 40 12 20 0 23 36 2 44 1 10 1 45 41 77 13 0 72 2 43 1 36 2 62 73 43 1 63 47 1 42 45 43 10 1 16 44 12 15 41 19 2 45 39 11 10 1 16 44 12 1 46 17 47 76 39 45 14 48 15 49 10 1 16 44 12 19 3 50 13 1 77 15 51 13 6 19 1 52 12 13 6 19 1 53 12 13 7 19 5 50 12 19 2 54 77 77 72 2 38 7 13 0 14 48 72 2 43 2 65 14 15 19 1 16 45 55 10 1 45 56 13 1 15 26 9 5 13 0 19 4 27 43 1 43 1 66 65 14 15 19 1 16 45 57 8 1 45 58 13 1 19 1 30 12 13 0 19 2 59 45 60 13 2 15 26 9 29 13 0 19 4 27 43 3 66 43 1 38 42 14 61 15 62 19 0 63 73 39 12 19 0 13 16 64 12 9 1 19 2 65 12 19 0 11 12 15 66 13 0 19 6 50 12 14 61 19 1 67 22 73 43 1 38 40 14 61 15 62 19 0 63 73 39 12 19 0 13 16 64 12 9 1 19 2 65 12 19 0 11 12 15 68 19 5 50 12 14 61 19 1 67 22 73 43 1 38 138 57 69 60 53 75 45 70 57 35 61 1 27 15 36 34 71 3 6 1 12 11 39 3 48 39 13 5 19 1 40 12 20 0 23 36 2 44 1 10 1 45 41 77 13 0 72 2 43 1 36 2 62 73 43 1 63 47 1 42 45 43 10 1 16 44 12 15 41 19 2 45 39 11 10 1 16 44 12 1 46 17 47 76 39 45 14 48 15 72 10 1 16 44 12 19 3 50 13 1 77 15 73 13 3 19 1 52 12 13 3 19 1 53 12 13 4 19 5 50 12 19 2 54 77 77 72 2 38 7 13 0 14 48 72 2 43 2 43 1 29) #49# #1# 31904) si::fset)) #1# 31904) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 25 12 19 2 26 1 0 73 29) #50=#A(t (27) (common-lisp-user::start-environment ext::location (defun common-lisp-user::start-environment) (#1# . 33234) ext::annotate :lambda-list common-lisp-user::*environment-control* common-lisp-user::environment-control-connections t "There is already a connection to the environment.~%You should either stop that first, or if you want to connect to a second or remote environment use the connect-to-environment command~%" format common-lisp-user::uni-run-process fboundp common-lisp-user::uni-make-socket common-lisp-user::connect-to-environment *error-output* #46# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "The ACT-R Environment cannot be used with the current Lisp." finish-output "Please see the docs/QuickStart.txt file for a list of compatable Lisp versions." #Y(common-lisp-user::start-environment nil nil (26 14 6 19 1 7 39 10 14 8 15 9 19 2 10 38 93 1 11 16 12 39 5 1 13 16 12 39 6 19 0 14 38 76 14 15 15 16 19 0 17 73 39 12 19 0 18 16 19 12 9 1 19 2 20 12 19 0 21 12 15 22 19 5 10 14 15 19 1 23 14 15 15 16 19 0 17 73 39 12 19 0 18 16 19 12 9 1 19 2 20 12 19 0 21 12 15 24 19 5 10 12 14 15 19 1 23 22 73 29) #50# #1# 33234) si::fset)) #1# 33234) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 14 12 19 2 15 1 0 73 29) #51=#A(t (16) (common-lisp-user::stop-environment ext::location (defun common-lisp-user::stop-environment) (#1# . 33903) ext::annotate :lambda-list common-lisp-user::*environment-control* common-lisp-user::environment-control-connections length > t "There is more than one environment currently connected.~%You must use either close-all-connections to stop them all or close-connection to stop a specific one.~%" format common-lisp-user::close-all-connections #Y(common-lisp-user::stop-environment nil nil (26 14 6 19 1 7 16 8 12 9 1 19 2 9 39 10 14 10 15 11 19 2 12 38 4 19 0 13 29) #51# #1# 33903) si::fset)) #1# 33903) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 38 12 19 2 39 15 0 15 40 15 41 19 3 42 1 0 73 29) #52=#A(t (43) (common-lisp-user::wait-for-environment ext::location (defun common-lisp-user::wait-for-environment) (#1# . 34219) ext::annotate :lambda-list (&optional (common-lisp-user::max-delay 10)) common-lisp-user::max-delay get-internal-real-time common-lisp-user::start-time common-lisp-user::*environment-control* common-lisp-user::environment-control-connections si::%dolist-var common-lisp-user::connection #:g20469 #:g20470 common-lisp-user::environment-connection si::structure-set #:g20471 #:g20472 0 error si::temp #Y(nil nil nil (24 45 22 26 10 0 51 2 35 1 0 29) #52# #1# 34219) si::*handler-clusters* common-lisp-user::environment-connection-stream "sync nil nil<end>~%" format common-lisp-user::uni-send-string condition common-lisp-user::environment-connection-sync every - internal-time-units-per-second / > #Y(nil nil nil (26 15 30 14 10 19 1 11 12 19 2 31 73 40 22 19 0 8 12 13 0 19 2 32 12 14 33 19 2 34 12 13 1 19 2 35 29) #52# #1# 34219) common-lisp-user::uni-wait-for #Y(common-lisp-user::wait-for-environment nil nil (25 40 3 9 10 46 7 26 19 0 8 45 9 14 10 19 1 11 45 12 75 45 13 38 95 10 1 4 51 0 10 0 45 14 75 45 15 13 1 15 16 9 5 13 0 19 4 17 43 1 43 1 57 18 60 59 75 45 19 57 20 61 1 34 15 21 34 23 3 6 1 12 11 24 3 48 24 13 3 19 1 25 12 77 15 26 19 2 27 12 19 2 28 36 2 44 1 10 1 45 29 77 13 0 72 2 43 1 36 2 62 43 1 63 10 1 5 51 1 10 1 40 -97 43 2 34 36 12 19 1 37 43 1 29) #52# #1# 34219) si::fset function "Send sync pulse to all current env connections and wait for all to respond or max-delay seconds to pass" si::set-documentation)) #1# 34219) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 8 12 19 2 9 1 0 73 29) #53=#A(t (10) (common-lisp-user::dummy-env-handler ext::location (defun common-lisp-user::dummy-env-handler) (#1# . 34943) ext::annotate :lambda-list (common-lisp-user::x) common-lisp-user::x #Y(common-lisp-user::dummy-env-handler nil nil (24 45 7 26 75 73 29) #53# #1# 34943) si::fset)) #1# 34943) #Y(si::bytecodes nil nil (1 0 16 1 76 73 39 33 15 0 15 2 15 3 15 4 19 4 5 15 0 14 6 77 15 7 19 4 5 15 0 1 19 12 19 2 20 1 0 73 29) #54=#A(t (21) (common-lisp-user::run-environment fboundp ext::location (defun common-lisp-user::run-environment) (#1# . 34998) ext::annotate :lambda-list (&optional (common-lisp-user::delay 0)) common-lisp-user::delay *error-output* #46# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "The run-environment command is not available for your current Lisp & OS combination." format finish-output #Y(common-lisp-user::run-environment nil nil (25 40 3 9 0 46 8 26 14 9 15 10 19 0 11 73 39 12 19 0 12 16 13 12 9 1 19 2 14 12 19 0 15 12 15 16 19 5 17 12 14 9 19 1 18 22 73 29) #54# #1# 34998) si::fset)) #1# 34998))
