(#Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ((ftype (function (t) (values t t)) common-lisp-user::get-module-fct) proclaim)) #1=#P"C:/Users/Son Pham/Desktop/actr7/framework/chunks.lisp" 0) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ((ftype (function (&optional t) t) common-lisp-user::sgp-fct) proclaim)) #1# 25290) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ((ftype (function nil t) common-lisp-user::current-model) proclaim)) #1# 25343) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ((ftype (function nil t) common-lisp-user::use-short-copy-names) proclaim)) #1# 25391) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ((ftype (function (&optional t) (values t t t)) common-lisp-user::new-name-fct) proclaim)) #1# 25446) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ((ftype (function nil t) common-lisp-user::update-chunks-on-the-fly) proclaim)) #1# 25517) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ((ftype (function (t) t) common-lisp-user::release-name-fct) proclaim)) #1# 25576) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ((ftype (function nil t) common-lisp-user::notify-on-the-fly-hooks) proclaim)) #1# 25628) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 8 0 52 0 15 0 15 3 15 4 15 5 19 4 6 1 0 73 29) #A(t (7) (common-lisp-user::*chunk-parameters-count* si::*make-special boundp ext::location (defvar common-lisp-user::*chunk-parameters-count*) (#1# . 25686) ext::annotate)) #1# 25686) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 8 15 3 19 1 4 52 0 15 0 15 5 15 6 15 7 19 4 8 1 0 73 29) #A(t (9) (common-lisp-user::*chunk-parameter-undefined* si::*make-special boundp "Unused-Param" gentemp ext::location (defvar common-lisp-user::*chunk-parameter-undefined*) (#1# . 25724) ext::annotate)) #1# 25724) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 15 0 15 3 15 4 19 3 5 15 0 15 6 15 7 15 8 19 4 9 1 0 73 29) #A(t (10) (common-lisp-user::*chunk-parameters-list* si::*make-special boundp variable "Internal list of parameters that have been added to chunks" si::set-documentation ext::location (defvar common-lisp-user::*chunk-parameters-list*) (#1# . 25787) ext::annotate)) #1# 25787) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 15 0 15 3 15 4 19 3 5 15 0 15 6 15 7 15 8 19 4 9 1 0 73 29) #A(t (10) (common-lisp-user::*chunk-parameters-copy-list* si::*make-special boundp variable "Internal list of parameters that have a copy function" si::set-documentation ext::location (defvar common-lisp-user::*chunk-parameters-copy-list*) (#1# . 25889) ext::annotate)) #1# 25889) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 15 0 15 3 15 4 19 3 5 15 0 15 6 15 7 15 8 19 4 9 1 0 73 29) #A(t (10) (common-lisp-user::*chunk-parameters-merge-list* si::*make-special boundp variable "Internal list of parameters that have a merge function" si::set-documentation ext::location (defvar common-lisp-user::*chunk-parameters-merge-list*) (#1# . 25990) ext::annotate)) #1# 25990) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 11 12 19 2 12 15 0 15 13 15 14 19 3 15 1 0 73 29) #2=#A(t (16) (common-lisp-user::chunk-parameter-default ext::location (defun common-lisp-user::chunk-parameter-default) (#1# . 26093) ext::annotate :lambda-list (common-lisp-user::param common-lisp-user::chunk-name) common-lisp-user::param common-lisp-user::chunk-name common-lisp-user::act-r-chunk-parameter-default-function common-lisp-user::act-r-chunk-parameter-default-value #Y(common-lisp-user::chunk-parameter-default nil nil (24 45 7 24 45 8 26 13 1 19 1 9 39 14 13 1 19 1 9 12 13 0 20 1 23 38 6 13 1 19 1 10 29) #2# #1# 26093) si::fset function "Return a default value for a parameter in a chunk" si::set-documentation)) #1# 26093) #Y(si::bytecodes nil nil (15 0 1 30 17 31 15 0 15 32 15 33 19 3 34 15 0 15 35 15 36 15 37 19 4 38 1 0 73 29) #3=#A(t (39) (common-lisp-user::*pprint-chunk-string* stream si::format-error :complaint #4="Required argument missing" :control-string "~S~:[ (~s)~;~*~]~%~@[~S~%~]~:{   ~s  ~s~%~}" :offset error #:format-arg-826 #:format-arg-827 #:format-arg-828 #:format-arg-830 #:format-arg-831 si::args prin1 #:format-arg-829 " (" write-string ")" terpri si::orig-args 0 #:g851 #5="No more arguments." si::outside-args "   " #:g854 "  " #:g855 #Y(nil nil nil (24 45 1 25 40 19 15 2 14 3 15 4 14 5 15 6 14 7 9 1 19 7 8 12 46 9 25 40 19 15 2 14 3 15 4 14 5 15 6 14 7 9 4 19 7 8 12 46 10 25 40 19 15 2 14 3 15 4 14 5 15 6 14 7 9 13 19 7 8 12 46 11 25 40 19 15 2 14 3 15 4 14 5 15 6 14 7 9 22 19 7 8 12 46 12 25 40 19 15 2 14 3 15 4 14 5 15 6 14 7 9 29 19 7 8 12 46 13 27 45 14 13 5 13 6 19 2 15 10 4 39 5 10 3 38 28 10 3 45 16 15 17 13 7 19 2 18 13 0 13 7 19 2 15 15 19 13 7 19 2 18 43 1 13 6 19 1 20 10 2 39 13 13 2 13 6 19 2 15 13 6 19 1 20 10 1 45 21 10 0 45 14 58 60 194 57 22 61 1 1 10 2 76 39 5 75 73 36 1 10 2 39 23 10 2 45 23 10 0 4 12 10 0 5 51 0 10 0 51 3 22 43 1 38 18 15 2 14 3 15 24 14 5 15 6 14 7 9 29 19 7 8 45 21 10 3 45 25 10 1 45 14 15 26 13 13 19 2 18 10 0 39 24 10 0 45 27 10 0 4 12 10 0 5 51 0 10 0 51 1 22 73 43 1 38 18 15 2 14 3 15 24 14 5 15 6 14 7 9 34 19 7 8 12 13 13 19 2 15 15 28 13 13 19 2 18 10 0 39 24 10 0 45 29 10 0 4 12 10 0 5 51 0 10 0 51 1 22 73 43 1 38 18 15 2 14 3 15 24 14 5 15 6 14 7 9 38 19 7 8 12 13 13 19 2 15 13 13 19 1 20 43 3 35 0 0 62 63 43 2 10 0 73 29) #3# #1# 26376) si::*make-constant variable "compiled format string for printing chunks" si::set-documentation ext::location (defconstant common-lisp-user::*pprint-chunk-string*) (#1# . 26376) ext::annotate)) #1# 26376) #Y(si::bytecodes nil nil (15 0 1 24 17 25 15 0 15 26 15 27 19 3 28 15 0 15 29 15 30 15 31 19 4 32 1 0 73 29) #6=#A(t (33) (common-lisp-user::*pprint-chunk-parameters-string* stream si::format-error :complaint #4# :control-string "~@[  --chunk parameters--~%~:{   ~s  ~s~%~}~]~%" :offset error #:format-arg-886 si::args "  --chunk parameters--" write-string terpri si::orig-args 0 #:g906 #5# si::outside-args "   " #:g909 prin1 "  " #:g910 #Y(nil nil nil (24 45 1 25 40 19 15 2 14 3 15 4 14 5 15 6 14 7 9 29 19 7 8 12 46 9 27 45 10 10 1 39 219 15 11 13 2 19 2 12 13 2 19 1 13 10 1 45 14 10 0 45 10 58 60 194 57 15 61 1 1 10 2 76 39 5 75 73 36 1 10 2 39 23 10 2 45 16 10 0 4 12 10 0 5 51 0 10 0 51 3 22 43 1 38 18 15 2 14 3 15 17 14 5 15 6 14 7 9 29 19 7 8 45 14 10 3 45 18 10 1 45 10 15 19 13 9 19 2 12 10 0 39 24 10 0 45 20 10 0 4 12 10 0 5 51 0 10 0 51 1 22 73 43 1 38 18 15 2 14 3 15 17 14 5 15 6 14 7 9 34 19 7 8 12 13 9 19 2 21 15 22 13 9 19 2 12 10 0 39 24 10 0 45 23 10 0 4 12 10 0 5 51 0 10 0 51 1 22 73 43 1 38 18 15 2 14 3 15 17 14 5 15 6 14 7 9 38 19 7 8 12 13 9 19 2 21 13 9 19 1 13 43 3 35 0 0 62 63 43 2 13 2 19 1 13 10 0 73 29) #6# #1# 26519) si::*make-constant variable "compiled format string for printing chunk parameters" si::set-documentation ext::location (defconstant common-lisp-user::*pprint-chunk-parameters-string*) (#1# . 26519) ext::annotate)) #1# 26519) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 47 12 19 2 48 15 0 15 49 15 50 19 3 51 1 0 73 29) #7=#A(t (52) (common-lisp-user::pprint-a-chunk ext::location (defun common-lisp-user::pprint-a-chunk) (#1# . 26686) ext::annotate :lambda-list (common-lisp-user::chunk-name &optional (common-lisp-user::w-params t)) common-lisp-user::chunk-name t common-lisp-user::w-params common-lisp-user::get-chunk common-lisp-user::chunk common-lisp-user::printing-module common-lisp-user::get-module-fct #:g941 #:g940 common-lisp-user::printing-module-suppress-cmds common-lisp-user::printing-module-c common-lisp-user::act-r-output-stream "~&~@?~%" "~a" common-lisp-user::*pprint-chunk-string* common-lisp-user::act-r-chunk-name eql common-lisp-user::act-r-chunk-documentation common-lisp-user::slot #Y(nil nil nil (24 45 25 26 10 0 4 12 10 0 5 6 2 73 29) #7# #1# 26686) common-lisp-user::act-r-chunk-slot-value-lists copy-tree < :key common-lisp-user::x common-lisp-user::slot-name->index #Y(nil nil nil (24 45 31 26 10 0 4 12 19 1 32 29) #7# #1# 26686) sort mapcar format #:g943 #:g942 "~a" common-lisp-user::*pprint-chunk-parameters-string* common-lisp-user::param common-lisp-user::act-r-chunk-parameter-name common-lisp-user::act-r-chunk-parameter-accessor #Y(nil nil nil (24 45 41 26 13 0 19 1 42 12 13 0 19 1 43 12 13 5 20 1 23 6 2 73 29) #7# #1# 26686) common-lisp-user::*chunk-parameters-list* :error #Y(common-lisp-user::pprint-a-chunk nil nil (24 45 7 25 40 3 14 8 46 9 26 13 1 19 1 10 45 11 10 0 39 188 15 12 19 1 13 47 1 14 45 15 10 1 39 18 13 0 19 1 16 76 39 10 13 0 19 1 17 12 19 1 18 39 76 13 0 19 1 17 12 19 1 18 12 15 19 15 20 77 14 21 13 4 13 4 13 2 19 1 22 17 23 12 13 2 19 1 22 12 13 2 19 1 24 12 34 26 12 13 2 19 1 27 16 28 12 33 29 12 14 30 34 33 12 19 4 34 12 19 2 35 12 19 7 36 12 19 4 36 43 2 10 1 39 69 15 12 19 1 13 47 1 37 45 38 10 1 39 18 13 0 19 1 16 76 39 10 13 0 19 1 17 12 19 1 18 39 34 13 0 19 1 17 12 19 1 18 12 15 19 15 39 77 14 40 34 44 12 14 45 19 2 35 12 19 3 36 12 19 4 36 43 2 10 2 73 38 4 11 46 73 43 1 29) #7# #1# 26686) si::fset function "Internal function for printing a chunk" si::set-documentation)) #1# 26686) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 13 12 14 14 9 1 19 4 15 15 0 15 16 15 17 19 3 18 1 0 73 29) #8=#A(t (19) (common-lisp-user::pprint-chunks ext::location (defmacro common-lisp-user::pprint-chunks) (#1# . 27769) ext::annotate :lambda-list (&rest common-lisp-user::chunk-names) #:g945 #:g944 #:g946 common-lisp-user::chunk-names common-lisp-user::pprint-chunks-fct quote #Y(common-lisp-user::pprint-chunks nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 45 10 15 11 15 12 10 0 6 2 6 2 73 29) #8# #1# 27769) t si::fset function "Print the chunks" si::set-documentation)) #1# 27769) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 29 12 19 2 30 15 0 15 31 15 32 19 3 33 1 0 73 29) #9=#A(t (34) (common-lisp-user::pprint-chunks-fct ext::location (defun common-lisp-user::pprint-chunks-fct) (#1# . 27873) ext::annotate :lambda-list (&optional common-lisp-user::chunk-names-list) common-lisp-user::chunk-names-list common-lisp-user::*meta-processes* common-lisp-user::mps-current *error-output* #10="~&#|Warning~:[~*~;~@[ (in model ~a)~]~]: ~@? |#~%" common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "pprint-chunks called with no current meta-process." format finish-output common-lisp-user::meta-p-current-model "pprint-chunks called with no current model." common-lisp-user::res common-lisp-user::chunks si::%dolist-var common-lisp-user::chunk common-lisp-user::pprint-a-chunk #:g954 nconc #Y(common-lisp-user::pprint-chunks-fct nil nil (25 40 2 77 46 7 26 14 8 19 1 9 76 39 42 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 17 19 5 18 12 14 10 19 1 19 22 73 38 121 14 8 19 1 9 12 19 1 20 76 39 42 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 21 19 5 18 12 14 10 19 1 19 22 73 38 68 75 45 22 10 1 76 39 6 19 0 23 38 3 10 1 45 24 75 45 25 38 32 10 1 4 51 0 13 0 77 19 2 26 6 1 45 27 13 3 13 0 19 2 28 51 3 43 1 10 1 5 51 1 10 1 40 -34 75 51 0 10 2 73 43 2 43 1 29) #9# #1# 27873) si::fset function "Print the chunks" si::set-documentation)) #1# 27873) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 13 12 19 2 14 1 0 73 29) #11=#A(t (15) (common-lisp-user::chunk-back-links ext::location (defun common-lisp-user::chunk-back-links) (#1# . 28261) ext::annotate :lambda-list (common-lisp-user::chunk-name) common-lisp-user::chunk-name common-lisp-user::*meta-processes* common-lisp-user::mps-current common-lisp-user::meta-p-current-model common-lisp-user::act-r-model-chunk-ref-table gethash #Y(common-lisp-user::chunk-back-links nil nil (24 45 7 26 13 0 14 8 19 1 9 73 39 10 14 8 19 1 9 12 19 1 10 12 19 1 11 12 19 2 12 29) #11# #1# 28261) si::fset)) #1# 28261) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 14 12 19 2 15 1 0 73 29) #12=#A(t (16) (common-lisp-user::set-chunk-back-links ext::location (defun common-lisp-user::set-chunk-back-links) (#1# . 28377) ext::annotate :lambda-list (common-lisp-user::chunk-name common-lisp-user::val) common-lisp-user::chunk-name common-lisp-user::val common-lisp-user::*meta-processes* common-lisp-user::mps-current common-lisp-user::meta-p-current-model common-lisp-user::act-r-model-chunk-ref-table si::hash-set #Y(common-lisp-user::set-chunk-back-links nil nil (24 45 7 24 45 8 26 13 1 14 9 19 1 10 73 39 10 14 9 19 1 10 12 19 1 11 12 19 1 12 12 13 0 19 3 13 29) #12# #1# 28377) si::fset)) #1# 28377) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 15 5 9 1 19 3 6 1 0 73 29) #A(t (7) (common-lisp-user::chunk-back-links ext::location (defsetf common-lisp-user::chunk-back-links) (#1# . 28511) ext::annotate common-lisp-user::set-chunk-back-links si::do-defsetf)) #1# 28511) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 13 12 14 14 9 1 19 4 15 15 0 15 16 15 17 19 3 18 1 0 73 29) #13=#A(t (19) (common-lisp-user::pprint-chunks-plus ext::location (defmacro common-lisp-user::pprint-chunks-plus) (#1# . 28560) ext::annotate :lambda-list (&rest common-lisp-user::chunk-names) #:g963 #:g962 #:g964 common-lisp-user::chunk-names common-lisp-user::pprint-chunks-plus-fct quote #Y(common-lisp-user::pprint-chunks-plus nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 45 10 15 11 15 12 10 0 6 2 6 2 73 29) #13# #1# 28560) t si::fset function "Print the chunks and their chunk parameters" si::set-documentation)) #1# 28560) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 30 12 19 2 31 15 0 15 32 15 33 19 3 34 1 0 73 29) #14=#A(t (35) (common-lisp-user::pprint-chunks-plus-fct ext::location (defun common-lisp-user::pprint-chunks-plus-fct) (#1# . 28702) ext::annotate :lambda-list (&optional common-lisp-user::chunk-names-list) common-lisp-user::chunk-names-list common-lisp-user::*meta-processes* common-lisp-user::mps-current *error-output* #10# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "pprint-chunks-plus called with no current meta-process." format finish-output common-lisp-user::meta-p-current-model "pprint-chunks-plus called with no current model." common-lisp-user::res common-lisp-user::chunks si::%dolist-var common-lisp-user::chunk t common-lisp-user::pprint-a-chunk #:g972 nconc #Y(common-lisp-user::pprint-chunks-plus-fct nil nil (25 40 2 77 46 7 26 14 8 19 1 9 76 39 42 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 17 19 5 18 12 14 10 19 1 19 22 73 38 122 14 8 19 1 9 12 19 1 20 76 39 42 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 21 19 5 18 12 14 10 19 1 19 22 73 38 69 75 45 22 10 1 76 39 6 19 0 23 38 3 10 1 45 24 75 45 25 38 33 10 1 4 51 0 13 0 14 26 19 2 27 6 1 45 28 13 3 13 0 19 2 29 51 3 43 1 10 1 5 51 1 10 1 40 -35 75 51 0 10 2 73 43 2 43 1 29) #14# #1# 28702) si::fset function "Print the chunks and their parameters" si::set-documentation)) #1# 28702) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 22 12 19 2 23 15 0 15 24 15 25 19 3 26 1 0 73 29) #15=#A(t (27) (common-lisp-user::chunks ext::location (defun common-lisp-user::chunks) (#1# . 29124) ext::annotate :lambda-list common-lisp-user::*meta-processes* common-lisp-user::mps-current *error-output* #10# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "chunks called with no current meta-process." format finish-output common-lisp-user::meta-p-current-model "chunks called with no current model." common-lisp-user::act-r-model-chunks-table common-lisp-user::hash-table-keys #Y(common-lisp-user::chunks nil nil (26 14 6 19 1 7 76 39 42 14 8 15 9 19 0 10 73 39 12 19 0 11 16 12 12 9 1 19 2 13 12 19 0 14 12 15 15 19 5 16 12 14 8 19 1 17 22 73 38 79 14 6 19 1 7 12 19 1 18 76 39 42 14 8 15 9 19 0 10 73 39 12 19 0 11 16 12 12 9 1 19 2 13 12 19 0 14 12 15 19 19 5 16 12 14 8 19 1 17 22 73 38 26 14 6 19 1 7 73 39 10 14 6 19 1 7 12 19 1 18 12 19 1 20 12 19 1 21 29) #15# #1# 29124) si::fset function "Returns a list of the names of all currently defined chunks" si::set-documentation)) #1# 29124) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 24 12 19 2 25 15 0 15 26 15 27 19 3 28 1 0 73 29) #16=#A(t (29) (common-lisp-user::get-chunk ext::location (defun common-lisp-user::get-chunk) (#1# . 29422) ext::annotate :lambda-list (common-lisp-user::name) common-lisp-user::name common-lisp-user::*meta-processes* common-lisp-user::mps-current *error-output* #10# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "get-chunk called with no current meta-process." format finish-output common-lisp-user::meta-p-current-model "get-chunk called with no current model." common-lisp-user::act-r-model-chunks-table gethash #Y(common-lisp-user::get-chunk nil nil (24 45 7 26 14 8 19 1 9 76 39 42 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 17 19 5 18 12 14 10 19 1 19 22 73 38 81 14 8 19 1 9 12 19 1 20 76 39 42 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 21 19 5 18 12 14 10 19 1 19 22 73 38 28 13 0 14 8 19 1 9 73 39 10 14 8 19 1 9 12 19 1 20 12 19 1 22 12 19 2 23 29) #16# #1# 29422) si::fset function "Internal function for getting the chunk structure from its name" si::set-documentation)) #1# 29422) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 26 12 19 2 27 15 0 15 28 15 29 19 3 30 1 0 73 29) #17=#A(t (31) (common-lisp-user::get-chunk-warn ext::location (defun common-lisp-user::get-chunk-warn) (#1# . 29733) ext::annotate :lambda-list (common-lisp-user::name) common-lisp-user::name common-lisp-user::*meta-processes* common-lisp-user::mps-current *error-output* #10# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "get-chunk called with no current meta-process." format finish-output common-lisp-user::meta-p-current-model "get-chunk called with no current model." common-lisp-user::act-r-model-chunks-table gethash common-lisp-user::c "~s does not name a chunk in the current model." #Y(common-lisp-user::get-chunk-warn nil nil (24 45 7 26 14 8 19 1 9 76 39 42 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 17 19 5 18 12 14 10 19 1 19 22 73 38 135 14 8 19 1 9 12 19 1 20 76 39 42 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 21 19 5 18 12 14 10 19 1 19 22 73 38 82 13 0 14 8 19 1 9 73 39 10 14 8 19 1 9 12 19 1 20 12 19 1 22 12 19 2 23 45 24 10 0 39 6 10 0 73 38 42 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 25 13 1 19 6 18 12 14 10 19 1 19 22 73 43 1 29) #17# #1# 29733) si::fset function "Internal function for getting the chunk structure from its name" si::set-documentation)) #1# 29733) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 15 12 14 16 9 2 19 4 17 15 0 15 18 15 19 19 3 20 1 0 73 29) #18=#A(t (21) (common-lisp-user::chunk-p ext::location (defmacro common-lisp-user::chunk-p) (#1# . 30155) ext::annotate :lambda-list (common-lisp-user::chunk-name?) #:g974 #:g973 #:g975 si::dm-too-few-arguments common-lisp-user::chunk-name? si::dm-too-many-arguments common-lisp-user::chunk-p-fct quote #Y(common-lisp-user::chunk-p nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 39 6 13 3 19 1 12 15 13 15 14 10 0 6 2 6 2 73 29) #18# #1# 30155) t si::fset function "Check a name to see if it names a chunk" si::set-documentation)) #1# 30155) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 1 0 73 29) #19=#A(t (15) (common-lisp-user::chunk-p-fct ext::location (defun common-lisp-user::chunk-p-fct) (#1# . 30264) ext::annotate :lambda-list (common-lisp-user::chunk-name?) common-lisp-user::chunk-name? common-lisp-user::get-chunk t #Y(common-lisp-user::chunk-p-fct nil nil (24 45 7 26 13 0 19 1 8 39 6 11 9 73 38 3 75 73 29) #19# #1# 30264) si::fset function "Check a name to see if it names a chunk" si::set-documentation)) #1# 30264) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 11 12 19 2 12 15 0 15 13 15 14 19 3 15 1 0 73 29) #20=#A(t (16) (common-lisp-user::chunk-slots-vector ext::location (defun common-lisp-user::chunk-slots-vector) (#1# . 30380) ext::annotate :lambda-list (common-lisp-user::chunk-name) common-lisp-user::chunk-name common-lisp-user::get-chunk-warn common-lisp-user::c common-lisp-user::act-r-chunk-filled-slots #Y(common-lisp-user::chunk-slots-vector nil nil (24 45 7 26 13 0 19 1 8 45 9 10 0 73 39 6 13 0 19 1 10 43 1 29) #20# #1# 30380) si::fset function "Return the bitvector of slots with values for a chunk" si::set-documentation)) #1# 30380) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 15 12 14 16 9 2 19 4 17 15 0 15 18 15 19 19 3 20 1 0 73 29) #21=#A(t (21) (common-lisp-user::chunk-documentation ext::location (defmacro common-lisp-user::chunk-documentation) (#1# . 30563) ext::annotate :lambda-list (common-lisp-user::chunk-name) #:g977 #:g976 #:g978 si::dm-too-few-arguments common-lisp-user::chunk-name si::dm-too-many-arguments common-lisp-user::chunk-documentation-fct quote #Y(common-lisp-user::chunk-documentation nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 39 6 13 3 19 1 12 15 13 15 14 10 0 6 2 6 2 73 29) #21# #1# 30563) t si::fset function "Return the documentation string for a chunk" si::set-documentation)) #1# 30563) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 11 12 19 2 12 15 0 15 13 15 14 19 3 15 1 0 73 29) #22=#A(t (16) (common-lisp-user::chunk-documentation-fct ext::location (defun common-lisp-user::chunk-documentation-fct) (#1# . 30698) ext::annotate :lambda-list (common-lisp-user::chunk-name) common-lisp-user::chunk-name common-lisp-user::get-chunk-warn common-lisp-user::c common-lisp-user::act-r-chunk-documentation #Y(common-lisp-user::chunk-documentation-fct nil nil (24 45 7 26 13 0 19 1 8 45 9 10 0 73 39 6 13 0 19 1 10 43 1 29) #22# #1# 30698) si::fset function "Return the documentation string for a chunk" si::set-documentation)) #1# 30698) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 34 12 19 2 35 15 0 15 36 15 37 19 3 38 1 0 73 29) #23=#A(t (39) (common-lisp-user::create-undefined-chunk ext::location (defun common-lisp-user::create-undefined-chunk) (#1# . 30885) ext::annotate :lambda-list (common-lisp-user::name) common-lisp-user::name common-lisp-user::printing-module common-lisp-user::get-module-fct #:g983 #:g982 common-lisp-user::printing-module-v common-lisp-user::act-r-output-stream #:g984 common-lisp-user::printing-module-model-warnings *error-output* eq common-lisp-user::*one-stream-hack* t *standard-output* eql #24="~&#|Warning~:[~*~; (in model ~a)~]: ~@? |#~%" common-lisp-user::mp-models length > common-lisp-user::current-model "Creating chunk ~S with no slots" format finish-output #25="~&#|Warning~:[~*~; (in model ~a)~]: ~@? |#~%" #26="~&#|Warning~:[~*~; (in model ~a)~]: ~@? |#~%" (common-lisp-user::isa common-lisp-user::chunk) common-lisp-user::define-chunks-fct #Y(common-lisp-user::create-undefined-chunk nil nil (24 45 7 26 15 8 19 1 9 47 1 10 45 11 10 1 39 10 13 0 19 1 12 12 19 1 13 39 148 13 0 19 1 12 12 19 1 13 45 14 13 1 19 1 15 76 40 127 10 0 76 40 27 13 0 11 16 17 17 40 19 11 18 40 15 13 0 11 19 17 17 39 7 14 16 11 20 17 21 39 35 14 16 15 22 19 0 23 16 24 12 9 1 19 2 25 12 19 0 26 12 15 27 13 3 19 6 28 14 16 19 1 29 38 60 14 16 15 30 19 0 23 16 24 12 9 1 19 2 25 12 19 0 26 12 15 27 13 3 19 6 28 14 16 19 1 29 13 0 15 31 19 0 23 16 24 12 9 1 19 2 25 12 19 0 26 12 15 27 13 3 19 6 28 43 1 43 2 13 0 1 32 7 2 6 1 12 19 1 33 29) #23# #1# 30885) si::fset function "Create a new chunk with the given name of chunk-type chunk with a warning" si::set-documentation)) #1# 30885) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 15 12 14 16 9 2 19 4 17 15 0 15 18 15 19 19 3 20 1 0 73 29) #27=#A(t (21) (common-lisp-user::copy-chunk ext::location (defmacro common-lisp-user::copy-chunk) (#1# . 31104) ext::annotate :lambda-list (common-lisp-user::chunk-name) #:g986 #:g985 #:g987 si::dm-too-few-arguments common-lisp-user::chunk-name si::dm-too-many-arguments common-lisp-user::copy-chunk-fct quote #Y(common-lisp-user::copy-chunk nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 39 6 13 3 19 1 12 15 13 15 14 10 0 6 2 6 2 73 29) #27# #1# 31104) t si::fset function "Create a new chunk which is a copy of the given chunk" si::set-documentation)) #1# 31104) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 73 12 19 2 74 15 0 15 75 15 76 19 3 77 1 0 73 29) #28=#A(t (78) (common-lisp-user::copy-chunk-fct ext::location (defun common-lisp-user::copy-chunk-fct) (#1# . 31232) ext::annotate :lambda-list (common-lisp-user::chunk-name) common-lisp-user::chunk-name common-lisp-user::get-chunk-warn common-lisp-user::chunk common-lisp-user::use-short-copy-names common-lisp-user::act-r-chunk-base-name #:g1025 string symbol-name "-" concatenate #:g1026 common-lisp-user::act-r-chunk si::structure-set "-" common-lisp-user::new-name-fct common-lisp-user::new-name :name :base-name :merged-chunks :filled-slots common-lisp-user::act-r-chunk-filled-slots :parameter-values common-lisp-user::*chunk-parameters-count* :initial-element common-lisp-user::*chunk-parameter-undefined* make-array :slot-value-lists common-lisp-user::act-r-chunk-slot-value-lists copy-tree common-lisp-user::make-act-r-chunk common-lisp-user::new-chunk common-lisp-user::update-chunks-on-the-fly si::%dolist-var common-lisp-user::slot common-lisp-user::old common-lisp-user::slot-name common-lisp-user::chunk-p-fct common-lisp-user::chunk-back-links common-lisp-user::bl hash-table-p #:g1039 #:g1036 #:g1037 gethash #:g1038 si::hash-set make-hash-table common-lisp-user::ht common-lisp-user::set-chunk-back-links common-lisp-user::*chunk-parameters-copy-list* common-lisp-user::param common-lisp-user::act-r-chunk-parameter-copy common-lisp-user::act-r-chunk-parameter-values common-lisp-user::act-r-chunk-parameter-index aref common-lisp-user::current eq common-lisp-user::chunk-parameter-default si::aset common-lisp-user::act-r-chunk-parameter-copy-from-chunk common-lisp-user::*meta-processes* common-lisp-user::mps-current common-lisp-user::meta-p-current-model common-lisp-user::act-r-model-chunks-table #:g1060 #:g1061 #Y(common-lisp-user::copy-chunk-fct nil nil (24 45 7 26 13 0 19 1 8 45 9 10 0 73 39 446 19 0 10 39 42 13 0 19 1 11 76 39 34 10 0 45 12 15 13 10 2 16 14 12 15 15 19 3 16 45 17 13 1 15 18 9 1 13 0 19 4 19 43 1 43 1 19 0 10 39 8 13 0 19 1 11 38 13 15 13 10 1 16 14 12 15 20 19 3 16 12 19 1 21 45 22 14 23 13 0 14 24 13 1 19 1 11 12 14 25 10 0 6 1 12 14 26 13 1 19 1 27 12 14 28 14 29 14 30 14 31 19 3 32 12 14 33 13 1 19 1 34 16 35 12 19 12 36 45 37 19 0 38 39 128 13 2 19 1 34 45 39 75 45 40 38 110 10 1 4 51 0 10 0 4 12 10 0 5 12 46 41 46 42 13 1 19 1 43 39 79 13 1 19 1 44 45 45 10 0 16 46 39 38 10 1 45 47 10 7 45 48 10 2 45 49 13 2 13 1 13 0 19 2 50 3 45 51 13 2 13 1 13 0 19 3 52 43 4 38 27 19 0 53 45 54 13 7 13 0 10 2 6 1 12 19 3 52 13 3 13 0 19 2 55 43 1 43 1 43 2 10 1 5 51 1 10 1 40 -112 43 2 11 56 45 39 75 45 57 38 112 10 1 4 51 0 13 0 19 1 58 39 68 13 4 19 1 59 12 13 0 19 1 60 12 19 2 61 45 62 13 3 19 1 59 12 13 1 19 1 60 12 13 1 19 1 58 12 13 0 11 31 17 63 39 10 13 1 13 6 19 2 64 38 4 10 0 73 12 20 1 23 12 19 3 65 43 1 38 28 13 2 19 1 59 12 13 0 19 1 60 12 13 0 19 1 66 12 13 5 20 1 23 12 19 3 65 10 1 5 51 1 10 1 40 -114 43 2 13 1 14 67 19 1 68 73 39 10 14 67 19 1 68 12 19 1 69 12 19 1 70 12 13 0 19 3 52 10 0 45 71 10 4 45 72 13 1 15 18 9 5 13 0 19 4 19 43 1 43 1 10 1 73 43 2 43 1 29) #28# #1# 31232) si::fset function "Create a new chunk which is a copy of the given chunk" si::set-documentation)) #1# 31232) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 15 12 14 16 9 2 19 4 17 15 0 15 18 15 19 19 3 20 1 0 73 29) #29=#A(t (21) (common-lisp-user::chunk-copied-from ext::location (defmacro common-lisp-user::chunk-copied-from) (#1# . 34130) ext::annotate :lambda-list (common-lisp-user::chunk-name) #:g1063 #:g1062 #:g1064 si::dm-too-few-arguments common-lisp-user::chunk-name si::dm-too-many-arguments common-lisp-user::chunk-copied-from-fct quote #Y(common-lisp-user::chunk-copied-from nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 39 6 13 3 19 1 12 15 13 15 14 10 0 6 2 6 2 73 29) #29# #1# 34130) t si::fset function "Return the name of the chunk from which the provided chunk was copied" si::set-documentation)) #1# 34130) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 14 12 19 2 15 15 0 15 16 15 17 19 3 18 1 0 73 29) #30=#A(t (19) (common-lisp-user::chunk-copied-from-fct ext::location (defun common-lisp-user::chunk-copied-from-fct) (#1# . 34287) ext::annotate :lambda-list (common-lisp-user::chunk-name) common-lisp-user::chunk-name common-lisp-user::get-chunk-warn common-lisp-user::chunk common-lisp-user::act-r-chunk-copied-from common-lisp-user::copied-from common-lisp-user::chunk-p-fct common-lisp-user::equal-chunks-fct #Y(common-lisp-user::chunk-copied-from-fct nil nil (24 45 7 26 13 0 19 1 8 45 9 10 0 73 39 39 13 0 19 1 10 45 11 10 0 39 15 13 0 19 1 12 39 8 13 2 13 0 19 2 13 73 39 4 10 0 73 12 13 0 72 2 43 1 43 1 29) #30# #1# 34287) si::fset function "Return the name of the chunk from which the provided chunk was copied" si::set-documentation)) #1# 34287) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 13 12 14 14 9 1 19 4 15 15 0 15 16 15 17 19 3 18 1 0 73 29) #31=#A(t (19) (common-lisp-user::define-chunks ext::location (defmacro common-lisp-user::define-chunks) (#1# . 34692) ext::annotate :lambda-list (&rest common-lisp-user::chunk-defs) #:g1066 #:g1065 #:g1067 common-lisp-user::chunk-defs common-lisp-user::define-chunks-fct quote #Y(common-lisp-user::define-chunks nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 45 10 15 11 15 12 10 0 6 2 6 2 73 29) #31# #1# 34692) t si::fset function "Create chunks in the current model" si::set-documentation)) #1# 34692) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 18 12 19 2 19 1 0 73 29) #32=#A(t (20) (common-lisp-user::create-slot-value-chunk-if-needed ext::location (defun common-lisp-user::create-slot-value-chunk-if-needed) (#1# . 34813) ext::annotate :lambda-list (common-lisp-user::value) common-lisp-user::value symbolp keywordp common-lisp-user::chunk-p-fct numberp t eq symbol-name char alphanumericp common-lisp-user::create-undefined-chunk #Y(common-lisp-user::create-slot-value-chunk-if-needed nil nil (24 45 7 26 10 0 39 49 10 0 16 8 39 43 10 0 16 9 76 39 36 13 0 19 1 10 76 39 28 10 0 16 11 76 39 21 14 12 10 0 17 13 76 39 12 10 0 16 14 12 8 0 17 15 16 16 73 39 6 13 0 19 1 17 29) #32# #1# 34813) si::fset)) #1# 34813) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 26 12 19 2 27 1 0 73 29) #33=#A(t (28) (common-lisp-user::convert-slot-value-to-true ext::location (defun common-lisp-user::convert-slot-value-to-true) (#1# . 35150) ext::annotate :lambda-list (common-lisp-user::chunk common-lisp-user::slot-name common-lisp-user::value) common-lisp-user::chunk common-lisp-user::slot-name common-lisp-user::value common-lisp-user::chunk-p-fct common-lisp-user::update-chunks-on-the-fly common-lisp-user::true-chunk-name-fct common-lisp-user::chunk-back-links common-lisp-user::bl hash-table-p #:g1082 common-lisp-user::act-r-chunk-name #:g1079 #:g1080 gethash #:g1081 si::hash-set make-hash-table common-lisp-user::ht common-lisp-user::set-chunk-back-links #Y(common-lisp-user::convert-slot-value-to-true nil nil (24 45 7 24 45 8 24 45 9 26 13 0 19 1 10 39 4 19 0 11 39 93 13 0 19 1 12 51 0 13 0 19 1 13 45 14 10 0 16 15 39 41 10 2 45 16 13 4 19 1 17 45 18 10 2 45 19 13 2 13 1 13 0 19 2 20 3 45 21 13 2 13 1 13 0 19 3 22 43 4 38 31 19 0 23 45 24 13 4 19 1 17 12 13 0 10 3 6 1 12 19 3 22 13 2 13 0 19 2 25 43 1 43 1 10 0 73 29) #33# #1# 35150) si::fset)) #1# 35150) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 151 12 19 2 152 15 0 15 153 15 154 19 3 155 1 0 73 29) #34=#A(t (156) (common-lisp-user::define-chunks-fct ext::location (defun common-lisp-user::define-chunks-fct) (#1# . 35673) ext::annotate :lambda-list (common-lisp-user::chunk-def-list) common-lisp-user::chunk-def-list common-lisp-user::*meta-processes* common-lisp-user::mps-current *error-output* #10# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "define-chunks called with no current meta-process." format finish-output common-lisp-user::meta-p-current-model "define-chunks called with no current model." common-lisp-user::chunk-list si::%dolist-var common-lisp-user::chunk-def listp common-lisp-user::isa position stringp min subseq position-if oddp common-lisp-user::odd common-lisp-user::even common-lisp-user::parity common-lisp-user::doc-pos common-lisp-user::type-pos common-lisp-user::slots-and-values common-lisp-user::slots type common-lisp-user::doc common-lisp-user::name count "Invalid chunk definition: ~S has more than one ISA." "Invalid chunk definition: ~S too many specifiers before ISA." 1+ = "Invalid chunk definition: ~S no chunk-type specified after ISA." nth common-lisp-user::get-chunk-type "Invalid chunk definition: ~S chunk-type specified does not exist." eq "Invalid chunk definition: ~S odd number of items after type specification." zerop "Invalid chunk definition: ~s odd number of items after type specification." common-lisp-user::act-r-chunk-type-name symbol-name "CHUNK" common-lisp-user::new-name-fct + "Invalid chunk definition: ~S ISA does not specify a valid type." symbolp keywordp "Invalid chunk definition: ~S chunk name is not a valid symbol." char alphanumericp "Invalid chunk definition: ~S chunk name must be a symbol starting with an alphanumeric character." "Invalid chunk definition: ~S documentation is not a string." "Invalid chunk definition: ~S slot and values list is an odd length." common-lisp-user::chunk-p-fct "Invalid chunk definition: ~S names a chunk which already exists." common-lisp-user::s common-lisp-user::s-name second common-lisp-user::s-val common-lisp-user::valid-ct-slot common-lisp-user::valid-slot-name assoc common-lisp-user::it #:g1238 #:g1239 rplacd "Invalid slot ~s specified when creating chunk with type ~s, but creating chunk ~s anyway." #:g1241 #:g1242 "Invalid slot ~s specified when creating chunk ~s with type ~s.  Extending chunks with slot named ~s." common-lisp-user::extend-possible-slots common-lisp-user::printing-module common-lisp-user::get-module-fct #:g1246 #:g1245 common-lisp-user::printing-module-v common-lisp-user::act-r-output-stream #:g1247 common-lisp-user::printing-module-model-warnings common-lisp-user::*one-stream-hack* t *standard-output* eql #24# "Extending chunks with slot named ~s because of chunk definition ~s" #25# #26# "Invalid chunk definition: ~S invalid slot name ~s." :error cddr :name :merged-chunks :documentation :parameter-values common-lisp-user::*chunk-parameters-count* :initial-element common-lisp-user::*chunk-parameter-undefined* make-array :slot-value-lists common-lisp-user::act-r-chunk-type-initial-spec common-lisp-user::make-act-r-chunk common-lisp-user::c #:g1252 nconc common-lisp-user::act-r-model-chunks-table si::hash-set "~S is not a list in call to define-chunks-fct" common-lisp-user::chunk common-lisp-user::slots-list common-lisp-user::act-r-chunk-slot-value-lists common-lisp-user::specified-slots common-lisp-user::x common-lisp-user::act-r-slot-spec-name common-lisp-user::act-r-slot-spec-value #Y(nil nil nil (24 45 128 26 13 0 19 1 129 12 13 0 19 1 130 3 73 29) #34# #1# 35673) common-lisp-user::act-r-chunk-spec-slots mapcar common-lisp-user::default-slots common-lisp-user::default common-lisp-user::slot slot-value common-lisp-user::slot-name common-lisp-user::create-slot-value-chunk-if-needed common-lisp-user::convert-slot-value-to-true #:g1276 common-lisp-user::act-r-chunk-filled-slots common-lisp-user::slot-name->mask logior #:g1277 common-lisp-user::act-r-chunk si::structure-set #:g1278 #:g1279 common-lisp-user::act-r-chunk-name #Y(common-lisp-user::define-chunks-fct nil nil (24 45 7 26 14 8 19 1 9 76 39 42 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 17 19 5 18 12 14 10 19 1 19 22 73 38 1936 14 8 19 1 9 12 19 1 20 76 39 42 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 21 19 5 18 12 14 10 19 1 19 22 73 38 1883 75 45 22 10 1 45 23 75 45 24 38 1613 10 1 4 51 0 10 0 16 25 39 1559 77 77 77 77 77 15 26 13 0 19 2 27 12 15 28 13 0 9 0 10 0 16 14 12 9 2 19 2 29 12 19 3 30 12 19 2 31 12 10 0 16 14 16 32 39 6 1 33 73 38 4 1 34 73 12 46 35 46 36 46 37 46 38 46 39 46 40 46 41 46 42 15 26 13 8 19 2 43 12 9 1 19 2 15 39 41 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 44 13 8 19 6 18 14 10 19 1 19 38 1429 10 5 39 8 13 5 9 2 19 2 15 39 41 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 45 13 8 19 6 18 14 10 19 1 19 38 1376 10 5 39 14 10 5 16 46 12 10 8 16 14 12 19 2 47 39 41 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 48 13 8 19 6 18 14 10 19 1 19 38 1317 10 5 39 15 10 5 16 46 12 10 8 17 49 12 19 1 50 76 39 41 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 51 13 8 19 6 18 14 10 19 1 19 38 1257 10 5 39 16 13 5 9 1 19 2 47 39 7 13 7 1 34 17 52 39 41 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 53 13 8 19 6 18 14 10 19 1 19 38 1196 10 5 39 13 10 5 16 54 39 7 13 7 1 33 17 52 39 41 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 55 13 8 19 6 18 14 10 19 1 19 38 1138 10 5 39 16 10 5 16 46 12 10 8 17 49 12 19 1 50 51 2 13 7 1 33 17 52 39 4 10 5 76 40 38 13 7 1 33 17 52 39 4 10 6 76 40 25 10 5 39 21 13 5 9 2 19 2 47 39 12 10 6 39 8 13 6 9 1 19 2 47 39 8 10 8 4 51 0 38 23 10 2 39 10 13 2 19 1 56 16 57 38 4 1 58 73 12 19 1 59 51 0 10 6 39 3 10 5 39 9 13 6 10 8 17 49 51 1 10 5 39 16 13 8 9 2 13 5 19 2 60 12 19 2 30 38 20 13 7 1 34 17 52 39 5 10 8 38 8 13 8 9 1 19 2 30 51 4 10 5 39 4 10 2 76 39 41 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 61 13 8 19 6 18 14 10 19 1 19 38 933 10 0 76 40 12 10 0 16 62 76 40 5 10 0 16 63 39 41 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 64 13 8 19 6 18 14 10 19 1 19 38 875 10 0 16 57 12 8 0 17 65 16 66 76 39 41 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 67 13 8 19 6 18 14 10 19 1 19 38 821 10 1 39 6 10 1 16 28 76 39 41 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 68 13 8 19 6 18 14 10 19 1 19 38 770 10 4 16 14 16 32 39 41 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 69 13 8 19 6 18 14 10 19 1 19 38 722 13 0 19 1 70 39 41 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 71 13 8 19 6 18 14 10 19 1 19 38 675 10 4 45 72 10 0 4 45 73 10 1 16 74 45 75 38 544 10 5 39 8 13 5 13 1 19 2 76 40 18 10 5 76 39 13 13 1 19 1 77 39 6 10 1 16 63 76 39 51 13 1 13 6 19 2 78 45 79 10 0 39 23 10 0 45 80 10 2 45 81 13 1 10 0 17 82 10 0 43 1 43 1 38 12 13 2 10 1 3 12 10 7 3 51 7 43 1 38 445 10 1 16 62 39 19 10 1 16 63 76 39 12 10 1 16 57 12 8 0 17 65 16 66 39 372 10 5 39 170 13 1 19 1 77 39 97 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 83 13 1 13 5 19 1 56 12 13 3 19 8 18 14 10 19 1 19 13 1 13 6 19 2 78 45 79 10 0 39 23 10 0 45 84 10 2 45 85 13 1 10 0 17 82 10 0 43 1 43 1 38 12 13 2 10 1 3 12 10 7 3 51 7 43 1 38 65 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 86 13 1 13 3 13 5 19 1 56 12 13 1 19 9 18 14 10 19 1 19 13 1 19 1 87 13 1 10 0 3 12 10 6 3 51 6 38 197 15 88 19 1 89 47 1 90 45 91 10 1 39 10 13 0 19 1 92 12 19 1 93 39 154 13 0 19 1 92 12 19 1 93 45 94 13 1 19 1 95 76 40 133 10 0 76 40 27 13 0 11 10 17 52 40 19 11 96 40 15 13 0 11 97 17 52 39 7 14 10 11 98 17 99 39 37 14 10 15 100 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 101 13 4 13 14 19 7 18 14 10 19 1 19 38 64 14 10 15 102 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 101 13 4 13 14 19 7 18 14 10 19 1 19 13 0 15 103 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 101 13 4 13 14 19 7 18 43 1 43 2 13 1 19 1 87 13 1 10 0 3 12 10 6 3 51 6 38 48 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 104 13 11 13 1 19 7 18 14 10 19 1 19 75 51 2 11 105 51 6 10 2 16 106 51 2 10 2 4 51 1 10 2 16 74 51 0 10 2 76 39 -547 43 3 13 3 11 105 17 52 76 39 99 14 107 13 0 14 108 10 0 6 1 12 14 109 13 1 14 110 14 111 14 112 14 113 19 3 114 12 14 115 13 3 10 2 39 8 13 2 19 1 116 38 2 75 3 12 19 10 117 45 118 10 0 6 1 45 119 13 12 13 0 19 2 120 51 12 43 1 13 1 14 8 19 1 9 73 39 10 14 8 19 1 9 12 19 1 20 12 19 1 121 12 13 0 19 3 122 43 1 43 8 38 39 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 123 13 0 19 6 18 14 10 19 1 19 10 1 5 51 1 10 1 40 -1615 43 2 10 0 45 23 75 45 124 38 229 10 1 4 51 0 75 45 125 13 1 19 1 126 4 45 127 34 131 12 13 2 19 1 126 5 45 79 10 0 39 8 13 0 19 1 132 38 3 75 73 12 43 1 19 2 133 45 134 10 0 45 23 75 45 135 38 30 10 1 4 51 0 10 0 4 12 13 3 19 2 78 76 39 8 13 0 10 3 3 51 3 10 1 5 51 1 10 1 40 -32 43 2 10 1 45 23 75 45 136 38 92 10 1 4 51 0 10 0 4 12 10 0 5 12 46 137 46 138 10 1 39 64 13 1 19 1 139 13 7 13 0 13 1 19 3 140 51 1 13 0 10 1 3 12 10 6 3 51 6 10 7 45 141 13 8 19 1 142 12 13 1 19 1 143 12 19 2 144 45 145 13 1 15 146 9 3 13 0 19 4 147 43 1 43 1 43 2 10 1 5 51 1 10 1 40 -94 43 2 10 3 45 148 10 3 45 149 13 1 15 146 9 4 13 0 19 4 147 43 1 43 1 43 3 10 1 5 51 1 10 1 40 -231 43 2 15 150 13 0 19 2 133 43 1 29) #34# #1# 35673) si::fset function "Create chunks in the current model" si::set-documentation)) #1# 35673) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 11 12 19 2 12 15 0 15 13 15 14 19 3 15 1 0 73 29) #35=#A(t (16) (common-lisp-user::chk-slot-value ext::location (defun common-lisp-user::chk-slot-value) (#1# . 45248) ext::annotate :lambda-list (common-lisp-user::chunk common-lisp-user::slot-name) common-lisp-user::chunk common-lisp-user::slot-name common-lisp-user::act-r-chunk-slot-value-lists assoc #Y(common-lisp-user::chk-slot-value nil nil (24 45 7 24 45 8 26 13 0 13 1 19 1 9 12 19 2 10 5 73 29) #35# #1# 45248) si::fset function "Internal function for getting the value of a slot in a chunk structure" si::set-documentation)) #1# 45248) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 16 12 14 17 9 3 19 4 18 15 0 15 19 15 20 19 3 21 1 0 73 29) #36=#A(t (22) (common-lisp-user::chunk-slot-value ext::location (defmacro common-lisp-user::chunk-slot-value) (#1# . 45437) ext::annotate :lambda-list (common-lisp-user::chunk-name common-lisp-user::slot-name) #:g1281 #:g1280 #:g1282 si::dm-too-few-arguments common-lisp-user::chunk-name common-lisp-user::slot-name si::dm-too-many-arguments common-lisp-user::chunk-slot-value-fct quote #Y(common-lisp-user::chunk-slot-value nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 76 39 6 13 3 19 1 10 10 1 4 12 10 1 5 51 1 22 45 12 10 2 39 6 13 4 19 1 13 15 14 15 15 10 1 6 2 12 15 15 10 0 6 2 6 3 73 29) #36# #1# 45437) t si::fset function "Return the value of a slot for the named chunk" si::set-documentation)) #1# 45437) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 12 12 19 2 13 15 0 15 14 15 15 19 3 16 1 0 73 29) #37=#A(t (17) (common-lisp-user::chunk-slot-value-fct ext::location (defun common-lisp-user::chunk-slot-value-fct) (#1# . 45591) ext::annotate :lambda-list (common-lisp-user::chunk-name common-lisp-user::slot-name) common-lisp-user::chunk-name common-lisp-user::slot-name common-lisp-user::get-chunk-warn common-lisp-user::c common-lisp-user::chk-slot-value #Y(common-lisp-user::chunk-slot-value-fct nil nil (24 45 7 24 45 8 26 13 1 19 1 9 45 10 10 0 73 39 8 13 0 13 1 19 2 11 43 1 29) #37# #1# 45591) si::fset function "Return the value of a slot for the named chunk" si::set-documentation)) #1# 45591) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 16 12 14 17 9 3 19 4 18 15 0 15 19 15 20 19 3 21 1 0 73 29) #38=#A(t (22) (common-lisp-user::chunk-filled-slots-list ext::location (defmacro common-lisp-user::chunk-filled-slots-list) (#1# . 45785) ext::annotate :lambda-list (common-lisp-user::chunk-name &optional common-lisp-user::sorted) #:g1284 #:g1283 #:g1285 si::dm-too-few-arguments common-lisp-user::chunk-name common-lisp-user::sorted si::dm-too-many-arguments common-lisp-user::chunk-filled-slots-list-fct quote #Y(common-lisp-user::chunk-filled-slots-list nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 39 13 10 1 4 12 10 1 5 51 1 22 38 2 75 45 12 10 2 39 6 13 4 19 1 13 15 14 15 15 10 1 6 2 12 10 0 6 3 73 29) #38# #1# 45785) t si::fset function "Return a sorted list of slots that exist in the named chunk" si::set-documentation)) #1# 45785) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 21 12 19 2 22 1 0 73 29) #39=#A(t (23) (common-lisp-user::chunk-filled-slots-list-fct ext::location (defun common-lisp-user::chunk-filled-slots-list-fct) (#1# . 45969) ext::annotate :lambda-list (common-lisp-user::chunk-name &optional common-lisp-user::sorted) common-lisp-user::chunk-name common-lisp-user::sorted common-lisp-user::get-chunk-warn common-lisp-user::c car common-lisp-user::act-r-chunk-slot-value-lists copy-tree < :key common-lisp-user::x common-lisp-user::slot-name->index #Y(nil nil nil (24 45 16 26 10 0 4 12 19 1 17 29) #39# #1# 45969) sort mapcar #Y(common-lisp-user::chunk-filled-slots-list-fct nil nil (24 45 7 25 40 2 77 46 8 26 13 1 19 1 9 45 10 10 0 73 39 43 10 1 39 28 15 11 13 0 19 1 12 16 13 12 33 14 12 14 15 34 18 12 19 4 19 12 19 2 20 38 12 15 11 13 0 19 1 12 12 19 2 20 43 1 29) #39# #1# 45969) si::fset)) #1# 45969) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 17 12 14 18 9 4 19 4 19 15 0 15 20 15 21 19 3 22 1 0 73 29) #40=#A(t (23) (common-lisp-user::set-chunk-slot-value ext::location (defmacro common-lisp-user::set-chunk-slot-value) (#1# . 46289) ext::annotate :lambda-list (common-lisp-user::chunk-name common-lisp-user::slot-name common-lisp-user::value) #:g1287 #:g1286 #:g1288 si::dm-too-few-arguments common-lisp-user::chunk-name common-lisp-user::slot-name common-lisp-user::value si::dm-too-many-arguments common-lisp-user::set-chunk-slot-value-fct quote #Y(common-lisp-user::set-chunk-slot-value nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 76 39 6 13 3 19 1 10 10 1 4 12 10 1 5 51 1 22 45 12 10 2 76 39 6 13 4 19 1 10 10 2 4 12 10 2 5 51 2 22 45 13 10 3 39 6 13 5 19 1 14 15 15 15 16 10 2 6 2 12 15 16 10 1 6 2 12 15 16 10 0 6 2 6 4 73 29) #40# #1# 46289) t si::fset function "Set the value of a chunk's slot" si::set-documentation)) #1# 46289) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 13 12 19 2 14 15 0 15 15 15 16 19 3 17 1 0 73 29) #41=#A(t (18) (common-lisp-user::set-chunk-slot-value-fct ext::location (defun common-lisp-user::set-chunk-slot-value-fct) (#1# . 46453) ext::annotate :lambda-list (common-lisp-user::chunk-name common-lisp-user::slot-name common-lisp-user::value) common-lisp-user::chunk-name common-lisp-user::slot-name common-lisp-user::value common-lisp-user::get-chunk-warn common-lisp-user::c common-lisp-user::set-chk-slot-value #Y(common-lisp-user::set-chunk-slot-value-fct nil nil (24 45 7 24 45 8 24 45 9 26 13 2 19 1 10 45 11 10 0 73 39 10 13 0 13 2 13 1 19 3 12 43 1 29) #41# #1# 46453) si::fset function "Set the value of a chunk's slot" si::set-documentation)) #1# 46453) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 15 12 19 2 16 1 0 73 29) #42=#A(t (17) (common-lisp-user::make-chunk-immutable ext::location (defun common-lisp-user::make-chunk-immutable) (#1# . 46652) ext::annotate :lambda-list (common-lisp-user::chunk-name) common-lisp-user::chunk-name common-lisp-user::get-chunk common-lisp-user::c #:g1291 t #:g1292 common-lisp-user::act-r-chunk si::structure-set #Y(common-lisp-user::make-chunk-immutable nil nil (24 45 7 26 13 0 19 1 8 45 9 10 0 73 39 24 10 0 45 10 11 11 45 12 13 1 15 13 9 8 13 0 19 4 14 43 1 43 1 43 1 29) #42# #1# 46652) si::fset)) #1# 46652) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 61 12 19 2 62 15 0 15 63 15 64 19 3 65 1 0 73 29) #43=#A(t (66) (common-lisp-user::set-chk-slot-value ext::location (defun common-lisp-user::set-chk-slot-value) (#1# . 46788) ext::annotate :lambda-list (common-lisp-user::c common-lisp-user::slot-name common-lisp-user::value) common-lisp-user::c common-lisp-user::slot-name common-lisp-user::value common-lisp-user::act-r-chunk-immutable common-lisp-user::chk-slot-value common-lisp-user::chunk-slot-equal *error-output* #10# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "Cannot change contents of chunk ~s." common-lisp-user::act-r-chunk-name format finish-output common-lisp-user::valid-slot-name #:g1293 #:g1294 common-lisp-user::act-r-chunk si::structure-set common-lisp-user::update-chunks-on-the-fly common-lisp-user::old common-lisp-user::chunk-p-fct common-lisp-user::chunk-back-links common-lisp-user::bl gethash remove common-lisp-user::new-links si::hash-set remhash common-lisp-user::create-slot-value-chunk-if-needed common-lisp-user::convert-slot-value-to-true common-lisp-user::slot-name->mask common-lisp-user::mask common-lisp-user::act-r-chunk-filled-slots logtest common-lisp-user::act-r-chunk-slot-value-lists assoc rplacd #:g1301 #:g1299 #:g1300 #:g1302 logior #:g1303 #:g1304 delete #:g1305 #:g1306 logandc1 #:g1307 "~s is not a valid slot name.  You can use extend-possible-slots to add it first if needed." #Y(common-lisp-user::set-chk-slot-value nil nil (24 45 7 24 45 8 24 45 9 26 57 0 60 435 13 3 19 1 10 39 63 13 1 13 3 13 2 19 2 11 12 19 2 12 76 39 47 14 13 15 14 19 0 15 73 39 12 19 0 16 16 17 12 9 1 19 2 18 12 19 0 19 12 15 20 13 3 19 1 21 12 19 6 22 14 13 19 1 23 75 73 36 0 13 2 19 1 24 39 317 10 3 45 25 75 45 26 13 1 15 27 9 5 13 0 19 4 28 43 1 43 1 19 0 29 39 76 13 3 13 2 19 2 11 45 30 13 0 19 1 31 39 58 13 0 19 1 32 45 33 13 4 13 5 19 1 21 12 13 0 19 2 34 12 19 2 35 45 36 10 0 39 16 13 6 19 1 21 12 13 1 13 0 19 3 37 38 11 13 6 19 1 21 12 10 1 17 38 43 2 43 1 13 1 19 1 39 13 3 13 2 13 1 19 3 40 51 1 13 2 19 1 41 45 42 10 2 39 98 13 0 13 4 19 1 43 17 44 39 19 13 3 13 4 19 1 45 12 19 2 46 12 10 2 17 47 38 67 13 3 10 2 3 45 48 10 5 45 49 13 1 13 0 19 1 45 3 45 50 13 1 15 27 9 4 13 0 19 4 28 43 3 10 4 45 51 13 1 13 5 19 1 43 12 19 2 52 45 53 13 1 15 27 9 3 13 0 19 4 28 43 1 43 1 38 84 13 0 13 4 19 1 43 17 44 39 73 10 4 45 54 13 4 13 5 19 1 45 12 19 2 46 12 13 5 19 1 45 12 19 2 55 45 56 13 1 15 27 9 4 13 0 19 4 28 43 1 43 1 10 4 45 57 13 1 13 5 19 1 43 17 58 45 59 13 1 15 27 9 3 13 0 19 4 28 43 1 43 1 43 1 10 1 73 38 42 14 13 15 14 19 0 15 73 39 12 19 0 16 16 17 12 9 1 19 2 18 12 19 0 19 12 15 60 13 2 19 6 22 12 14 13 19 1 23 22 73 63 29) #43# #1# 46788) si::fset function "internal chunk slot setting function" si::set-documentation)) #1# 46788) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 15 12 14 16 9 2 19 4 17 15 0 15 18 15 19 19 3 20 1 0 73 29) #44=#A(t (21) (common-lisp-user::mod-chunk ext::location (defmacro common-lisp-user::mod-chunk) (#1# . 49432) ext::annotate :lambda-list (common-lisp-user::chunk-name &rest common-lisp-user::modifications) #:g1309 #:g1308 #:g1310 si::dm-too-few-arguments common-lisp-user::chunk-name common-lisp-user::modifications common-lisp-user::mod-chunk-fct quote #Y(common-lisp-user::mod-chunk nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 45 12 15 13 15 14 10 1 6 2 12 15 14 10 0 6 2 6 3 73 29) #44# #1# 49432) t si::fset function "Modify the slot values of a chunk" si::set-documentation)) #1# 49432) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 41 12 19 2 42 15 0 15 43 15 44 19 3 45 1 0 73 29) #45=#A(t (46) (common-lisp-user::mod-chunk-fct ext::location (defun common-lisp-user::mod-chunk-fct) (#1# . 49574) ext::annotate :lambda-list (common-lisp-user::chunk-name common-lisp-user::modifications-list) common-lisp-user::chunk-name common-lisp-user::modifications-list common-lisp-user::get-chunk-warn common-lisp-user::c length oddp *error-output* #10# common-lisp-user::current-mp-fct common-lisp-user::mp-models > common-lisp-user::current-model "Odd length modifications list in call to mod-chunk." format finish-output common-lisp-user::slots-and-values common-lisp-user::slots common-lisp-user::s adjoin second cddr = "Slot name used more than once in modifications list." common-lisp-user::valid-slot-name every "Invalid slot name ~s specified for mod-chunk." common-lisp-user::x #Y(nil nil nil (24 45 33 26 13 0 19 1 30 76 73 29) #45# #1# 49574) find-if common-lisp-user::act-r-chunk-immutable "Cannot modify chunk ~s because it is immutable." si::%dolist-var slot-value common-lisp-user::set-chk-slot-value #Y(common-lisp-user::mod-chunk-fct nil nil (24 45 7 24 45 8 26 13 1 19 1 9 45 10 10 0 73 39 315 10 1 16 11 16 12 39 42 14 13 15 14 19 0 15 73 39 12 19 0 16 16 11 12 9 1 19 2 17 12 19 0 18 12 15 19 19 5 20 12 14 13 19 1 21 22 73 38 266 77 77 46 22 46 23 10 3 45 24 38 34 10 0 4 12 13 1 19 2 25 51 1 10 0 4 12 10 0 16 26 3 12 10 2 3 51 2 10 0 16 27 12 53 0 10 0 76 39 -37 43 1 10 0 16 11 12 10 1 16 11 12 19 2 28 76 39 42 14 13 15 14 19 0 15 73 39 12 19 0 16 16 11 12 9 1 19 2 17 12 19 0 18 12 15 29 19 5 20 12 14 13 19 1 21 22 73 38 155 15 30 13 0 19 2 31 76 39 51 14 13 15 14 19 0 15 73 39 12 19 0 16 16 11 12 9 1 19 2 17 12 19 0 18 12 15 32 34 34 12 13 0 19 2 35 12 19 6 20 12 14 13 19 1 21 22 73 38 95 13 2 19 1 36 39 44 14 13 15 14 19 0 15 73 39 12 19 0 16 16 11 12 9 1 19 2 17 12 19 0 18 12 15 37 13 4 19 6 20 12 14 13 19 1 21 22 73 38 45 10 1 45 38 75 45 39 38 24 10 1 4 51 0 13 4 10 0 4 12 10 0 5 12 19 3 40 10 1 5 51 1 10 1 40 -26 75 51 0 10 6 73 43 2 43 2 43 1 29) #45# #1# 49574) si::fset function "Modify the slot values of a chunk" si::set-documentation)) #1# 49574) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 12 12 19 2 13 15 0 15 14 15 15 19 3 16 1 0 73 29) #46=#A(t (17) (common-lisp-user::fast-chunk-slot-value-fct ext::location (defun common-lisp-user::fast-chunk-slot-value-fct) (#1# . 50776) ext::annotate :lambda-list (common-lisp-user::chunk-name common-lisp-user::slot-name) common-lisp-user::chunk-name common-lisp-user::slot-name common-lisp-user::get-chunk common-lisp-user::c common-lisp-user::chk-slot-value #Y(common-lisp-user::fast-chunk-slot-value-fct nil nil (24 45 7 24 45 8 26 13 1 19 1 9 45 10 10 0 73 39 8 13 0 13 1 19 2 11 43 1 29) #46# #1# 50776) si::fset function "Return the value of a slot for the named chunk without testing validity" si::set-documentation)) #1# 50776) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 13 12 19 2 14 15 0 15 15 15 16 19 3 17 1 0 73 29) #47=#A(t (18) (common-lisp-user::fast-set-chunk-slot-value-fct ext::location (defun common-lisp-user::fast-set-chunk-slot-value-fct) (#1# . 51184) ext::annotate :lambda-list (common-lisp-user::chunk-name common-lisp-user::slot-name common-lisp-user::value) common-lisp-user::chunk-name common-lisp-user::slot-name common-lisp-user::value common-lisp-user::get-chunk common-lisp-user::c common-lisp-user::set-chk-slot-value #Y(common-lisp-user::fast-set-chunk-slot-value-fct nil nil (24 45 7 24 45 8 24 45 9 26 13 2 19 1 10 45 11 10 0 73 39 10 13 0 13 2 13 1 19 3 12 43 1 29) #47# #1# 51184) si::fset function "Set the value of a chunk's slot without testing validity" si::set-documentation)) #1# 51184) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 17 12 19 2 18 15 0 15 19 15 20 19 3 21 1 0 73 29) #48=#A(t (22) (common-lisp-user::fast-mod-chunk-fct ext::location (defun common-lisp-user::fast-mod-chunk-fct) (#1# . 51414) ext::annotate :lambda-list (common-lisp-user::chunk-name common-lisp-user::modifications-list) common-lisp-user::chunk-name common-lisp-user::modifications-list common-lisp-user::get-chunk common-lisp-user::c length oddp 0 #:g1323 #:g1324 common-lisp-user::set-chk-slot-value #Y(common-lisp-user::fast-mod-chunk-fct nil nil (24 45 7 24 45 8 26 13 1 19 1 9 45 10 10 0 73 39 79 10 1 16 11 16 12 76 73 39 69 58 60 63 57 13 61 1 1 10 3 76 39 5 75 73 36 1 13 2 10 3 45 14 10 0 4 12 10 0 5 51 0 10 0 51 4 43 1 10 3 45 15 10 0 4 12 10 0 5 51 0 10 0 51 4 43 1 19 3 16 35 0 0 62 63 10 2 73 43 1 29) #48# #1# 51414) si::fset function "Modify the slot values of a chunk without testing validity" si::set-documentation)) #1# 51414) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 20 12 19 2 21 15 0 15 22 15 23 19 3 24 1 0 73 29) #49=#A(t (25) (common-lisp-user::mod-chunk-with-spec-fct ext::location (defun common-lisp-user::mod-chunk-with-spec-fct) (#1# . 51842) ext::annotate :lambda-list (common-lisp-user::chunk-name common-lisp-user::mod-spec) common-lisp-user::chunk-name common-lisp-user::mod-spec common-lisp-user::get-chunk common-lisp-user::c common-lisp-user::act-r-chunk-spec-slots si::%dolist-var common-lisp-user::x common-lisp-user::act-r-slot-spec-name common-lisp-user::name keywordp common-lisp-user::chunk-spec-variable-p common-lisp-user::act-r-slot-spec-value common-lisp-user::set-chk-slot-value #Y(common-lisp-user::mod-chunk-with-spec-fct nil nil (24 45 7 24 45 8 26 13 1 19 1 9 45 10 10 0 73 39 71 13 1 19 1 11 45 12 75 45 13 38 47 10 1 4 51 0 13 0 19 1 14 45 15 10 0 16 16 40 6 13 0 19 1 17 76 39 14 13 3 13 0 13 1 19 1 18 12 19 3 19 43 1 10 1 5 51 1 10 1 40 -49 75 51 0 10 4 73 43 2 43 1 29) #49# #1# 51842) si::fset function "Modify the slot values without testing except to skip request parameters and variables" si::set-documentation)) #1# 51842) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 15 12 14 16 9 2 19 4 17 15 0 15 18 15 19 19 3 20 1 0 73 29) #50=#A(t (21) (common-lisp-user::delete-chunk ext::location (defmacro common-lisp-user::delete-chunk) (#1# . 52286) ext::annotate :lambda-list (common-lisp-user::chunk-name) #:g1326 #:g1325 #:g1327 si::dm-too-few-arguments common-lisp-user::chunk-name si::dm-too-many-arguments common-lisp-user::delete-chunk-fct quote #Y(common-lisp-user::delete-chunk nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 39 6 13 3 19 1 12 15 13 15 14 10 0 6 2 6 2 73 29) #50# #1# 52286) t si::fset function "Delete a chunk from a model" si::set-documentation)) #1# 52286) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 68 12 19 2 69 15 0 15 70 15 71 19 3 72 1 0 73 29) #51=#A(t (73) (common-lisp-user::delete-chunk-fct ext::location (defun common-lisp-user::delete-chunk-fct) (#1# . 52545) ext::annotate :lambda-list (common-lisp-user::chunk-name) common-lisp-user::chunk-name common-lisp-user::get-chunk-warn common-lisp-user::c common-lisp-user::act-r-chunk-immutable *error-output* #10# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "Cannot delete chunk ~s because it is marked as immutable." format finish-output common-lisp-user::act-r-chunk-name common-lisp-user::tn common-lisp-user::update-chunks-on-the-fly common-lisp-user::chunk-back-links hash-table-p hash-table-count zerop common-lisp-user::printing-module common-lisp-user::get-module-fct #:g1341 #:g1340 common-lisp-user::printing-module-v common-lisp-user::act-r-output-stream #:g1342 common-lisp-user::printing-module-model-warnings eq common-lisp-user::*one-stream-hack* t *standard-output* eql #24# "Chunk ~s is being deleted but it is still used as a slot value in other chunks." #25# #26# #:g1344 #:g1343 #:g1345 "Chunk ~s is being deleted but its true name ~s is still used as a slot value in other chunks." common-lisp-user::act-r-chunk-slot-value-lists si::%dolist-var common-lisp-user::slots common-lisp-user::old common-lisp-user::slot-name common-lisp-user::chunk-p-fct common-lisp-user::bl gethash remove common-lisp-user::new-links si::hash-set remhash common-lisp-user::act-r-chunk-merged-chunks common-lisp-user::x common-lisp-user::*meta-processes* common-lisp-user::mps-current common-lisp-user::meta-p-current-model common-lisp-user::act-r-model-chunks-table common-lisp-user::act-r-model-chunk-ref-table #Y(common-lisp-user::delete-chunk-fct nil nil (24 45 7 26 13 0 19 1 8 45 9 10 0 73 39 650 13 0 19 1 10 39 44 14 11 15 12 19 0 13 73 39 12 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 18 13 1 19 6 19 12 14 11 19 1 20 22 73 38 600 13 0 19 1 21 45 22 19 0 23 39 500 13 2 19 1 24 16 25 39 11 13 2 19 1 24 16 26 16 27 76 39 175 15 28 19 1 29 47 1 30 45 31 10 1 39 10 13 0 19 1 32 12 19 1 33 39 148 13 0 19 1 32 12 19 1 33 45 34 13 1 19 1 35 76 40 127 10 0 76 40 27 13 0 11 11 17 36 40 19 11 37 40 15 13 0 11 38 17 36 39 7 14 11 11 39 17 40 39 35 14 11 15 41 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 42 13 5 19 6 19 14 11 19 1 20 38 60 14 11 15 43 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 42 13 5 19 6 19 14 11 19 1 20 13 0 15 44 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 42 13 5 19 6 19 43 1 43 2 13 0 10 2 17 36 76 39 20 13 0 19 1 24 16 25 39 11 13 0 19 1 24 16 26 16 27 76 39 181 15 28 19 1 29 47 1 45 45 46 10 1 39 10 13 0 19 1 32 12 19 1 33 39 154 13 0 19 1 32 12 19 1 33 45 47 13 1 19 1 35 76 40 133 10 0 76 40 27 13 0 11 11 17 36 40 19 11 37 40 15 13 0 11 38 17 36 39 7 14 11 11 39 17 40 39 37 14 11 15 41 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 48 13 5 13 3 19 7 19 14 11 19 1 20 38 64 14 11 15 43 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 48 13 5 13 3 19 7 19 14 11 19 1 20 13 0 15 44 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 48 13 5 13 3 19 7 19 43 1 43 2 13 1 19 1 49 45 50 75 45 51 38 77 10 1 4 51 0 10 0 4 12 10 0 5 12 46 52 46 53 13 1 19 1 54 39 46 13 1 19 1 24 45 55 13 1 13 5 13 0 19 2 56 12 19 2 57 45 58 10 0 39 12 13 6 13 1 13 0 19 3 59 38 7 13 6 10 1 17 60 43 2 43 2 10 1 5 51 1 10 1 40 -79 43 2 13 1 19 1 61 45 50 75 45 62 38 66 10 1 4 51 0 13 0 14 63 19 1 64 73 39 10 14 63 19 1 64 12 19 1 65 12 19 1 66 17 60 19 0 23 39 26 13 0 14 63 19 1 64 73 39 10 14 63 19 1 64 12 19 1 65 12 19 1 67 17 60 10 1 5 51 1 10 1 40 -68 43 2 10 2 73 43 1 43 1 29) #51# #1# 52545) si::fset function "Delete a chunk from a model" si::set-documentation)) #1# 52545) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 15 12 14 16 9 2 19 4 17 15 0 15 18 15 19 19 3 20 1 0 73 29) #52=#A(t (21) (common-lisp-user::purge-chunk ext::location (defmacro common-lisp-user::purge-chunk) (#1# . 54487) ext::annotate :lambda-list (common-lisp-user::chunk-name) #:g1353 #:g1352 #:g1354 si::dm-too-few-arguments common-lisp-user::chunk-name si::dm-too-many-arguments common-lisp-user::purge-chunk-fct quote #Y(common-lisp-user::purge-chunk nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 39 6 13 3 19 1 12 15 13 15 14 10 0 6 2 6 2 73 29) #52# #1# 54487) t si::fset function "delete a chunk and release its name" si::set-documentation)) #1# 54487) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 11 12 19 2 12 1 0 73 29) #53=#A(t (13) (common-lisp-user::purge-chunk-fct ext::location (defun common-lisp-user::purge-chunk-fct) (#1# . 54598) ext::annotate :lambda-list (common-lisp-user::chunk-name) common-lisp-user::chunk-name common-lisp-user::delete-chunk-fct common-lisp-user::name common-lisp-user::release-name-fct #Y(common-lisp-user::purge-chunk-fct nil nil (24 45 7 26 13 0 19 1 8 45 9 10 0 73 39 6 13 0 19 1 10 43 1 29) #53# #1# 54598) si::fset)) #1# 54598) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 16 12 14 17 9 3 19 4 18 15 0 15 19 15 20 19 3 21 1 0 73 29) #54=#A(t (22) (common-lisp-user::merge-chunks ext::location (defmacro common-lisp-user::merge-chunks) (#1# . 54729) ext::annotate :lambda-list (common-lisp-user::chunk-name1 common-lisp-user::chunk-name2) #:g1356 #:g1355 #:g1357 si::dm-too-few-arguments common-lisp-user::chunk-name1 common-lisp-user::chunk-name2 si::dm-too-many-arguments common-lisp-user::merge-chunks-fct quote #Y(common-lisp-user::merge-chunks nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 76 39 6 13 3 19 1 10 10 1 4 12 10 1 5 51 1 22 45 12 10 2 39 6 13 4 19 1 13 15 14 15 15 10 1 6 2 12 15 15 10 0 6 2 6 3 73 29) #54# #1# 54729) t si::fset function "Merge two chunks into a single representation" si::set-documentation)) #1# 54729) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 59 12 19 2 60 15 0 15 61 15 62 19 3 63 1 0 73 29) #55=#A(t (64) (common-lisp-user::merge-chunks-fct ext::location (defun common-lisp-user::merge-chunks-fct) (#1# . 54880) ext::annotate :lambda-list (common-lisp-user::chunk-name1 common-lisp-user::chunk-name2) common-lisp-user::chunk-name1 common-lisp-user::chunk-name2 common-lisp-user::get-chunk-warn common-lisp-user::c2 common-lisp-user::c1 common-lisp-user::chunk-equal-test eq common-lisp-user::*chunk-parameters-merge-list* si::%dolist-var common-lisp-user::param common-lisp-user::act-r-chunk-parameter-values common-lisp-user::act-r-chunk-parameter-index common-lisp-user::act-r-chunk-parameter-merge :second aref si::aset common-lisp-user::act-r-chunk-immutable #:g1364 t #:g1365 common-lisp-user::act-r-chunk si::structure-set common-lisp-user::act-r-chunk-merged-chunks common-lisp-user::x common-lisp-user::*meta-processes* common-lisp-user::mps-current common-lisp-user::meta-p-current-model common-lisp-user::act-r-model-chunks-table si::hash-set #:g1377 #:g1375 #:g1376 common-lisp-user::update-chunks-on-the-fly common-lisp-user::act-r-chunk-slot-value-lists common-lisp-user::slots common-lisp-user::old common-lisp-user::slot-name common-lisp-user::chunk-p-fct common-lisp-user::chunk-back-links common-lisp-user::bl gethash remove common-lisp-user::new-links remhash hash-table-p common-lisp-user::chunk common-lisp-user::fast-set-chunk-slot-value-fct common-lisp-user::notify-on-the-fly-hooks common-lisp-user::notify #Y(nil nil nil (24 45 52 24 45 41 26 10 0 45 15 75 45 30 38 53 10 1 4 51 0 13 3 13 0 13 8 19 3 53 19 0 54 45 15 75 45 55 38 18 10 1 4 51 0 13 0 13 5 20 1 23 10 1 5 51 1 10 1 40 -20 43 2 10 1 5 51 1 10 1 40 -55 75 73 43 2 29) #55# #1# 54880) maphash clrhash #Y(common-lisp-user::merge-chunks-fct nil nil (24 45 7 24 45 8 26 57 0 60 381 13 2 19 1 9 12 13 1 19 1 9 12 46 10 46 11 10 0 39 3 10 1 73 39 353 13 0 13 1 19 2 12 76 39 5 75 73 36 2 13 0 10 1 17 13 76 39 327 11 14 45 15 75 45 16 38 69 10 1 4 51 0 13 2 19 1 17 12 13 0 19 1 18 12 13 0 19 1 19 12 11 20 17 13 39 18 13 3 19 1 17 12 13 0 19 1 18 12 19 2 21 38 14 13 0 19 1 19 12 13 6 13 5 20 2 23 12 19 3 22 10 1 5 51 1 10 1 40 -71 43 2 13 1 19 1 23 39 24 10 0 45 24 11 25 45 26 13 1 15 27 9 8 13 0 19 4 28 43 1 43 1 13 1 19 1 29 45 15 75 45 30 38 71 10 1 4 51 0 13 0 14 31 19 1 32 73 39 10 14 31 19 1 32 12 19 1 33 12 19 1 34 12 13 2 19 3 35 10 0 45 36 10 3 45 37 13 1 13 0 19 1 29 3 45 38 13 1 15 27 9 6 13 0 19 4 28 43 3 10 1 5 51 1 10 1 40 -73 43 2 19 0 39 39 121 13 1 19 1 40 45 15 75 45 41 38 77 10 1 4 51 0 10 0 4 12 10 0 5 12 46 42 46 43 13 1 19 1 44 39 46 13 1 19 1 45 45 46 13 1 13 8 13 0 19 2 47 12 19 2 48 45 49 10 0 39 12 13 9 13 1 13 0 19 3 35 38 7 13 9 10 1 17 50 43 2 43 2 10 1 5 51 1 10 1 40 -79 43 2 13 3 19 1 45 16 51 39 18 34 56 12 13 3 19 1 45 17 57 13 3 19 1 45 16 58 10 4 73 43 2 63 29) #55# #1# 54880) si::fset function "Merge two chunks into a single representation" si::set-documentation)) #1# 54880) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 16 12 14 17 9 3 19 4 18 1 0 73 29) #56=#A(t (19) (common-lisp-user::create-chunk-alias ext::location (defmacro common-lisp-user::create-chunk-alias) (#1# . 57511) ext::annotate :lambda-list (common-lisp-user::chunk common-lisp-user::alias) #:g1385 #:g1384 #:g1386 si::dm-too-few-arguments common-lisp-user::chunk common-lisp-user::alias si::dm-too-many-arguments common-lisp-user::create-chunk-alias-fct quote #Y(common-lisp-user::create-chunk-alias nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 76 39 6 13 3 19 1 10 10 1 4 12 10 1 5 51 1 22 45 12 10 2 39 6 13 4 19 1 13 15 14 15 15 10 1 6 2 12 15 15 10 0 6 2 6 3 73 29) #56# #1# 57511) t si::fset)) #1# 57511) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 60 12 19 2 61 1 0 73 29) #57=#A(t (62) (common-lisp-user::create-chunk-alias-fct ext::location (defun common-lisp-user::create-chunk-alias-fct) (#1# . 57602) ext::annotate :lambda-list (common-lisp-user::chunk common-lisp-user::alias) common-lisp-user::chunk common-lisp-user::alias common-lisp-user::*meta-processes* common-lisp-user::mps-current *error-output* #10# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "create-chunk-alias called with no current meta-process." format finish-output common-lisp-user::meta-p-current-model "create-chunk-alias called with no current model." common-lisp-user::chunk-p-fct common-lisp-user::printing-module common-lisp-user::get-module-fct #:g1403 #:g1402 common-lisp-user::printing-module-v common-lisp-user::act-r-output-stream #:g1404 common-lisp-user::printing-module-model-warnings eq common-lisp-user::*one-stream-hack* t *standard-output* eql #24# "~s is not the name of a chunk in the current model." #25# #26# #:g1406 #:g1405 #:g1407 "~s is already the name of a chunk in the current model and cannot be used as an alias." symbolp #:g1409 #:g1408 #:g1410 "~s is not a symbol and thus cannot be used as a chunk alias." common-lisp-user::get-chunk common-lisp-user::c common-lisp-user::act-r-model-chunks-table si::hash-set #:g1416 #:g1414 common-lisp-user::act-r-chunk-merged-chunks #:g1415 common-lisp-user::act-r-chunk si::structure-set #Y(common-lisp-user::create-chunk-alias-fct nil nil (24 45 7 24 45 8 26 14 9 19 1 10 76 39 42 14 11 15 12 19 0 13 73 39 12 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 18 19 5 19 12 14 11 19 1 20 22 73 38 685 14 9 19 1 10 12 19 1 21 76 39 42 14 11 15 12 19 0 13 73 39 12 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 22 19 5 19 12 14 11 19 1 20 22 73 38 632 13 1 19 1 23 76 39 180 15 24 19 1 25 47 1 26 45 27 10 1 39 10 13 0 19 1 28 12 19 1 29 73 39 150 13 0 19 1 28 12 19 1 29 45 30 13 1 19 1 31 76 40 127 10 0 76 40 27 13 0 11 11 17 32 40 19 11 33 40 15 13 0 11 34 17 32 39 7 14 11 11 35 17 36 39 35 14 11 15 37 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 38 13 4 19 6 19 14 11 19 1 20 38 60 14 11 15 39 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 38 13 4 19 6 19 14 11 19 1 20 13 0 15 40 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 38 13 4 19 6 19 75 73 43 1 43 2 38 445 13 0 19 1 23 39 180 15 24 19 1 25 47 1 41 45 42 10 1 39 10 13 0 19 1 28 12 19 1 29 73 39 150 13 0 19 1 28 12 19 1 29 45 43 13 1 19 1 31 76 40 127 10 0 76 40 27 13 0 11 11 17 32 40 19 11 33 40 15 13 0 11 34 17 32 39 7 14 11 11 35 17 36 39 35 14 11 15 37 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 44 13 3 19 6 19 14 11 19 1 20 38 60 14 11 15 39 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 44 13 3 19 6 19 14 11 19 1 20 13 0 15 40 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 44 13 3 19 6 19 75 73 43 1 43 2 38 259 10 0 16 45 76 39 180 15 24 19 1 25 47 1 46 45 47 10 1 39 10 13 0 19 1 28 12 19 1 29 73 39 150 13 0 19 1 28 12 19 1 29 45 48 13 1 19 1 31 76 40 127 10 0 76 40 27 13 0 11 11 17 32 40 19 11 33 40 15 13 0 11 34 17 32 39 7 14 11 11 35 17 36 39 35 14 11 15 37 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 49 13 3 19 6 19 14 11 19 1 20 38 60 14 11 15 39 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 49 13 3 19 6 19 14 11 19 1 20 13 0 15 40 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 49 13 3 19 6 19 75 73 43 1 43 2 38 73 13 1 19 1 50 45 51 13 1 14 9 19 1 10 73 39 10 14 9 19 1 10 12 19 1 21 12 19 1 52 12 13 0 19 3 53 10 1 45 54 10 1 45 55 13 1 13 0 19 1 56 3 45 57 13 1 15 58 9 6 13 0 19 4 59 43 3 10 1 73 43 1 29) #57# #1# 57602) si::fset)) #1# 57602) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 16 12 14 17 9 3 19 4 18 15 0 15 19 15 20 19 3 21 1 0 73 29) #58=#A(t (22) (common-lisp-user::eq-chunks ext::location (defmacro common-lisp-user::eq-chunks) (#1# . 58442) ext::annotate :lambda-list (common-lisp-user::chunk-name1 common-lisp-user::chunk-name2) #:g1418 #:g1417 #:g1419 si::dm-too-few-arguments common-lisp-user::chunk-name1 common-lisp-user::chunk-name2 si::dm-too-many-arguments common-lisp-user::eq-chunks-fct quote #Y(common-lisp-user::eq-chunks nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 76 39 6 13 3 19 1 10 10 1 4 12 10 1 5 51 1 22 45 12 10 2 39 6 13 4 19 1 13 15 14 15 15 10 1 6 2 12 15 15 10 0 6 2 6 3 73 29) #58# #1# 58442) t si::fset function "Return t if two chunks have the same underlying representation" si::set-documentation)) #1# 58442) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 13 12 19 2 14 15 0 15 15 15 16 19 3 17 1 0 73 29) #59=#A(t (18) (common-lisp-user::eq-chunks-fct ext::location (defun common-lisp-user::eq-chunks-fct) (#1# . 58605) ext::annotate :lambda-list (common-lisp-user::chunk-name1 common-lisp-user::chunk-name2) common-lisp-user::chunk-name1 common-lisp-user::chunk-name2 common-lisp-user::get-chunk-warn common-lisp-user::c2 common-lisp-user::c1 eq #Y(common-lisp-user::eq-chunks-fct nil nil (24 45 7 24 45 8 26 13 1 19 1 9 12 13 0 19 1 9 12 46 10 46 11 10 0 73 39 12 10 1 73 39 7 13 0 10 1 17 12 43 2 29) #59# #1# 58605) si::fset function "Return t if two chunks have the same underlying representation" si::set-documentation)) #1# 58605) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 15 12 14 16 9 2 19 4 17 15 0 15 18 15 19 19 3 20 1 0 73 29) #60=#A(t (21) (common-lisp-user::true-chunk-name ext::location (defmacro common-lisp-user::true-chunk-name) (#1# . 58834) ext::annotate :lambda-list (common-lisp-user::chunk-name) #:g1421 #:g1420 #:g1422 si::dm-too-few-arguments common-lisp-user::chunk-name si::dm-too-many-arguments common-lisp-user::true-chunk-name-fct quote #Y(common-lisp-user::true-chunk-name nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 39 6 13 3 19 1 12 15 13 15 14 10 0 6 2 6 2 73 29) #60# #1# 58834) t si::fset function "Return the prototypical name of a chunk in the event of merging" si::set-documentation)) #1# 58834) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 11 12 19 2 12 15 0 15 13 15 14 19 3 15 1 0 73 29) #61=#A(t (16) (common-lisp-user::true-chunk-name-fct ext::location (defun common-lisp-user::true-chunk-name-fct) (#1# . 58981) ext::annotate :lambda-list (common-lisp-user::chunk-name) common-lisp-user::chunk-name common-lisp-user::get-chunk common-lisp-user::c common-lisp-user::act-r-chunk-name #Y(common-lisp-user::true-chunk-name-fct nil nil (24 45 7 26 13 0 19 1 8 45 9 10 0 39 8 13 0 19 1 10 38 4 10 1 73 43 1 29) #61# #1# 58981) si::fset function "Return the prototypical name of a chunk in the event of merging" si::set-documentation)) #1# 58981) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 16 12 14 17 9 3 19 4 18 15 0 15 19 15 20 19 3 21 1 0 73 29) #62=#A(t (22) (common-lisp-user::equal-chunks ext::location (defmacro common-lisp-user::equal-chunks) (#1# . 59185) ext::annotate :lambda-list (common-lisp-user::chunk-name1 common-lisp-user::chunk-name2) #:g1424 #:g1423 #:g1425 si::dm-too-few-arguments common-lisp-user::chunk-name1 common-lisp-user::chunk-name2 si::dm-too-many-arguments common-lisp-user::equal-chunks-fct quote #Y(common-lisp-user::equal-chunks nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 76 39 6 13 3 19 1 10 10 1 4 12 10 1 5 51 1 22 45 12 10 2 39 6 13 4 19 1 13 15 14 15 15 10 1 6 2 12 15 15 10 0 6 2 6 3 73 29) #62# #1# 59185) t si::fset function "Return t if two chunks are of the same chunk-type and have equal slot values" si::set-documentation)) #1# 59185) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 13 12 19 2 14 15 0 15 15 15 16 19 3 17 1 0 73 29) #63=#A(t (18) (common-lisp-user::equal-chunks-fct ext::location (defun common-lisp-user::equal-chunks-fct) (#1# . 59367) ext::annotate :lambda-list (common-lisp-user::chunk-name1 common-lisp-user::chunk-name2) common-lisp-user::chunk-name1 common-lisp-user::chunk-name2 common-lisp-user::get-chunk-warn common-lisp-user::c2 common-lisp-user::c1 common-lisp-user::chunk-equal-test #Y(common-lisp-user::equal-chunks-fct nil nil (24 45 7 24 45 8 26 13 1 19 1 9 12 13 0 19 1 9 12 46 10 46 11 13 0 13 1 19 2 12 43 2 29) #63# #1# 59367) si::fset function "Return t if two chunks are of the same chunk-type and have equal slot values" si::set-documentation)) #1# 59367) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 18 12 19 2 19 15 0 15 20 15 21 19 3 22 1 0 73 29) #64=#A(t (23) (common-lisp-user::chunk-equal-test ext::location (defun common-lisp-user::chunk-equal-test) (#1# . 59615) ext::annotate :lambda-list (common-lisp-user::c1 common-lisp-user::c2) common-lisp-user::c1 common-lisp-user::c2 eq common-lisp-user::act-r-chunk-filled-slots = common-lisp-user::slot common-lisp-user::chk-slot-value common-lisp-user::chunk-slot-equal #Y(nil nil nil (24 45 12 26 10 0 5 12 13 1 10 0 4 12 19 2 13 12 19 2 14 29) #64# #1# 59615) common-lisp-user::act-r-chunk-slot-value-lists every #Y(common-lisp-user::chunk-equal-test nil nil (24 45 7 24 45 8 26 10 1 73 39 45 10 0 73 39 40 13 1 10 0 17 9 73 40 31 13 1 19 1 10 12 13 0 19 1 10 12 19 2 11 73 39 13 34 15 12 13 1 19 1 16 12 19 2 17 29) #64# #1# 59615) si::fset function "Internal function for comparing the equality of two chunks" si::set-documentation)) #1# 59615) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 17 12 19 2 18 1 0 73 29) #65=#A(t (19) (common-lisp-user::chunk-slot-equal ext::location (defun common-lisp-user::chunk-slot-equal) (#1# . 60121) ext::annotate :lambda-list (common-lisp-user::val1 common-lisp-user::val2) common-lisp-user::val1 common-lisp-user::val2 eq t common-lisp-user::c2 common-lisp-user::c1 common-lisp-user::get-chunk stringp string-equal equalp #Y(common-lisp-user::chunk-slot-equal nil nil (24 45 7 24 45 8 26 13 1 10 0 17 9 39 6 11 10 73 38 63 77 77 46 11 46 12 13 3 19 1 13 51 0 39 8 13 2 19 1 13 51 1 39 9 13 0 10 1 17 9 38 29 10 3 16 14 39 17 10 2 16 14 73 39 8 13 3 13 2 19 2 15 38 7 13 3 10 2 17 16 43 2 29) #65# #1# 60121) si::fset)) #1# 60121) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 15 0 15 3 15 4 15 5 19 4 6 1 0 73 29) #A(t (7) (common-lisp-user::*suppress-extend-item-warning* si::*make-special boundp ext::location (defvar common-lisp-user::*suppress-extend-item-warning*) (#1# . 60449) ext::annotate)) #1# 60449) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 8 12 19 2 9 1 0 73 29) #66=#A(t (10) (common-lisp-user::suppress-extension-warnings ext::location (defun common-lisp-user::suppress-extension-warnings) (#1# . 60495) ext::annotate :lambda-list t common-lisp-user::*suppress-extend-item-warning* #Y(common-lisp-user::suppress-extension-warnings nil nil (26 11 6 52 7 73 29) #66# #1# 60495) si::fset)) #1# 60495) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 7 12 19 2 8 1 0 73 29) #67=#A(t (9) (common-lisp-user::unsuppress-extension-warnings ext::location (defun common-lisp-user::unsuppress-extension-warnings) (#1# . 60577) ext::annotate :lambda-list common-lisp-user::*suppress-extend-item-warning* #Y(common-lisp-user::unsuppress-extension-warnings nil nil (26 75 52 6 73 29) #67# #1# 60577) si::fset)) #1# 60577) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 117 12 14 118 9 2 19 4 119 15 0 15 120 15 121 19 3 122 1 0 73 29) #68=#A(t (123) (common-lisp-user::extend-chunks ext::location (defmacro common-lisp-user::extend-chunks) (#1# . 60665) ext::annotate :lambda-list (common-lisp-user::parameter-name &key (common-lisp-user::default-value nil) (common-lisp-user::default-function nil) (common-lisp-user::merge-function nil) (common-lisp-user::copy-function nil) (common-lisp-user::copy-from-chunk-function nil)) #:g1435 #:g1434 #:g1436 si::dm-too-few-arguments common-lisp-user::parameter-name :default-value si::search-keyword #:g1437 si::missing-keyword eq common-lisp-user::default-value :default-function #:g1438 common-lisp-user::default-function :merge-function #:g1439 common-lisp-user::merge-function :copy-function #:g1440 common-lisp-user::copy-function :copy-from-chunk-function #:g1441 common-lisp-user::copy-from-chunk-function (:copy-from-chunk-function :copy-function :merge-function :default-function :default-value) si::check-keyword symbolp keywordp *error-output* #10# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "~s is not a valid symbol for specifying a chunk parameter." format finish-output string "CHUNK-" string-upcase concatenate intern "CHUNK-" "-SETF" gensym common-lisp-user::param common-lisp-user::exists common-lisp-user::index common-lisp-user::setf-name common-lisp-user::accessor-name common-lisp-user::*chunk-parameters-list* :key common-lisp-user::act-r-chunk-parameter-name find "Parameter ~s already defined for chunks." :duplicate-parameter "~{Invalid value ~s specified for the ~s function to extend chunks~^~%~}" common-lisp-user::x common-lisp-user::y common-lisp-user::fctornil #Y(nil nil nil (24 45 64 24 45 65 26 13 1 19 1 66 76 73 39 8 13 1 10 0 6 2 73 29) #68# #1# 60665) mapcan eval-when (:compile-toplevel :load-toplevel :execute) unless common-lisp-user::*suppress-extend-item-warning* when fboundp quote common-lisp-user::print-warning "Function ~s already exists and is being redefined." "Function ~s already exists and is being redefined." let* common-lisp-user::*chunk-parameters-count* (common-lisp-user::*chunk-parameters-list* :key #'common-lisp-user::act-r-chunk-parameter-name) common-lisp-user::make-act-r-chunk-parameter :name :index :merge :copy :copy-from-chunk :accessor if progn setf common-lisp-user::act-r-chunk-parameter-index remove common-lisp-user::*chunk-parameters-copy-list* common-lisp-user::*chunk-parameters-merge-list* (incf common-lisp-user::*chunk-parameters-count*) push defun (common-lisp-user::chunk-name) let ((common-lisp-user::c (common-lisp-user::get-chunk common-lisp-user::chunk-name))) common-lisp-user::c common-lisp-user::v aref (common-lisp-user::act-r-chunk-parameter-values common-lisp-user::c) (eq common-lisp-user::v common-lisp-user::*chunk-parameter-undefined*) (common-lisp-user::act-r-chunk-parameter-values common-lisp-user::c) common-lisp-user::chunk-parameter-default common-lisp-user::chunk-name "Chunk ~s does not exist in attempt to access ~a." (common-lisp-user::chunk-name common-lisp-user::new-value) ((common-lisp-user::c (common-lisp-user::get-chunk common-lisp-user::chunk-name))) (common-lisp-user::act-r-chunk-parameter-values common-lisp-user::c) common-lisp-user::new-value "Chunk ~s does not exist in attempt to set ~a." defsetf #Y(common-lisp-user::extend-chunks nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 13 1 15 12 19 2 13 45 14 13 0 1 15 17 16 39 4 75 38 3 10 0 45 17 13 3 15 18 19 2 13 45 19 13 0 1 15 17 16 39 4 75 38 3 10 0 45 20 13 5 15 21 19 2 13 45 22 13 0 1 15 17 16 39 4 75 38 3 10 0 45 23 13 7 15 24 19 2 13 45 25 13 0 1 15 17 16 39 4 75 38 3 10 0 45 26 13 9 15 27 19 2 13 45 28 13 0 1 15 17 16 39 4 75 38 3 10 0 45 29 13 11 15 30 19 2 31 10 10 16 32 76 40 5 10 10 16 33 39 44 14 34 15 35 19 0 36 73 39 12 19 0 37 16 38 12 9 1 19 2 39 12 19 0 40 12 15 41 13 10 19 6 42 12 14 34 19 1 43 22 73 38 677 15 44 15 45 13 10 19 1 46 12 19 3 47 12 19 1 48 12 15 44 15 49 13 10 19 1 46 12 15 50 19 4 47 12 19 1 48 12 19 0 51 12 19 0 51 12 19 0 51 12 46 52 46 53 46 54 46 55 46 56 13 15 14 57 14 58 33 59 12 19 4 60 39 44 14 34 15 35 19 0 36 73 39 12 19 0 37 16 38 12 9 1 19 2 39 12 19 0 40 12 15 61 13 15 19 6 42 14 34 19 1 43 11 62 73 38 558 75 39 71 14 34 15 35 19 0 36 73 39 12 19 0 37 16 38 12 9 1 19 2 39 12 19 0 40 12 15 63 34 67 12 13 11 13 9 13 7 10 5 6 4 12 14 18 14 21 14 24 11 27 6 4 12 19 3 68 12 19 6 42 12 14 34 19 1 43 22 73 38 485 15 69 15 70 15 71 15 72 15 73 15 74 15 75 10 0 6 2 6 2 12 15 76 15 77 15 75 10 0 6 2 6 3 6 3 12 15 73 15 74 15 75 10 1 6 2 6 2 12 15 76 15 78 15 75 10 1 6 2 6 3 6 3 6 4 12 15 79 13 2 1 80 6 2 12 13 3 15 60 15 75 10 15 6 2 12 1 81 7 3 6 2 12 13 4 15 82 14 83 15 75 10 15 6 2 12 14 84 13 2 14 12 15 75 10 13 6 2 12 14 18 15 75 10 11 6 2 12 14 85 15 75 10 9 6 2 12 14 86 15 75 10 7 6 2 12 14 87 15 75 10 5 6 2 12 14 88 15 75 10 0 6 2 6 17 6 2 6 3 12 15 89 13 3 15 90 15 91 13 2 15 92 10 3 6 2 6 3 12 15 91 15 57 15 93 13 3 1 57 6 3 6 3 12 15 91 15 94 15 93 13 3 1 94 6 3 6 3 12 15 91 15 95 15 93 13 3 1 95 6 3 6 3 12 15 91 15 92 10 4 6 2 12 15 92 10 3 6 2 6 3 6 6 12 1 96 6 4 12 15 97 13 4 1 57 6 3 12 15 89 15 75 10 7 6 2 12 15 97 13 4 1 94 6 3 12 15 73 15 75 10 5 6 2 12 15 97 13 4 1 94 6 3 6 3 6 4 12 15 73 15 75 10 9 6 2 12 15 97 13 4 1 95 6 3 6 3 12 15 98 13 0 15 99 15 100 15 101 15 89 15 102 15 100 15 103 15 104 15 105 10 2 6 3 6 2 6 1 12 15 89 15 106 15 91 15 104 15 107 10 2 6 3 12 15 108 13 4 1 109 6 3 6 3 12 1 103 6 4 6 3 12 15 76 15 110 15 109 15 75 10 0 6 2 6 4 6 4 6 3 6 4 12 15 98 13 1 15 111 15 100 15 112 15 89 15 102 15 91 15 104 15 113 10 2 6 3 12 1 114 6 3 12 15 76 15 115 15 109 15 75 10 0 6 2 6 4 6 4 6 3 6 4 12 15 116 13 0 10 1 6 3 12 15 75 10 0 6 2 6 10 6 4 73 43 5 29) #68# #1# 60665) t si::fset function "Add new parameters to all chunks" si::set-documentation)) #1# 60665) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 58 12 19 2 59 1 0 73 29) #69=#A(t (60) (common-lisp-user::normalize-chunk-names ext::location (defun common-lisp-user::normalize-chunk-names) (#1# . 65797) ext::annotate :lambda-list (&optional (common-lisp-user::unintern? nil)) common-lisp-user::unintern? common-lisp-user::*meta-processes* common-lisp-user::mps-current common-lisp-user::meta-p-current-model common-lisp-user::update-chunks-on-the-fly common-lisp-user::key common-lisp-user::value common-lisp-user::act-r-chunk-name eq common-lisp-user::chunk-back-links common-lisp-user::bl hash-table-p common-lisp-user::true-chunk-name-fct common-lisp-user::tn common-lisp-user::c common-lisp-user::ss si::%dolist-var common-lisp-user::s common-lisp-user::fast-set-chunk-slot-value-fct common-lisp-user::notify-on-the-fly-hooks common-lisp-user::notify #Y(nil nil nil (24 45 21 24 45 22 26 10 0 45 23 75 45 24 38 53 10 1 4 51 0 13 3 13 0 13 4 19 3 25 19 0 26 45 23 75 45 27 38 18 10 1 4 51 0 13 0 13 5 20 1 23 10 1 5 51 1 10 1 40 -20 43 2 10 1 5 51 1 10 1 40 -55 75 73 43 2 29) #69# #1# 65797) maphash clrhash common-lisp-user::act-r-model-chunks-table remhash common-lisp-user::act-r-model-chunk-ref-table common-lisp-user::release-name-fct #Y(nil nil nil (24 45 12 24 45 13 26 13 1 13 0 19 1 14 17 15 76 73 39 96 13 1 19 1 16 45 17 10 0 16 18 39 21 13 2 19 1 19 45 20 34 28 12 10 1 17 29 43 1 10 0 16 30 43 1 10 2 73 39 56 13 1 14 8 19 1 9 73 39 10 14 8 19 1 9 12 19 1 10 12 19 1 31 17 32 13 1 14 8 19 1 9 73 39 10 14 8 19 1 9 12 19 1 10 12 19 1 33 17 32 13 1 19 1 34 29) #69# #1# 65797) common-lisp-user::possible-removals #Y(nil nil nil (24 45 12 24 45 13 26 13 1 13 0 19 1 14 17 15 76 73 39 9 13 1 10 2 3 51 2 73 29) #69# #1# 65797) common-lisp-user::chunk common-lisp-user::val common-lisp-user::get-chunk common-lisp-user::act-r-chunk-slot-value-lists common-lisp-user::slot-val common-lisp-user::slot common-lisp-user::chunk-p-fct member #Y(nil nil nil (24 45 38 24 45 39 26 13 1 13 0 19 1 14 17 15 73 39 111 13 1 19 1 40 12 19 1 41 45 23 75 45 42 38 87 10 1 4 51 0 10 0 4 12 10 0 5 12 46 13 46 43 13 1 19 1 44 39 8 13 1 13 6 19 2 45 39 47 13 5 13 0 13 1 19 1 19 12 19 3 25 19 0 26 45 23 75 45 27 38 18 10 1 4 51 0 13 0 13 7 20 1 23 10 1 5 51 1 10 1 40 -20 43 2 43 2 10 1 5 51 1 10 1 40 -89 75 73 43 2 29) #69# #1# 65797) common-lisp-user::x *error-output* #10# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "No current model in which to normalize chunk names." format finish-output #Y(common-lisp-user::normalize-chunk-names nil nil (25 40 2 77 46 7 26 14 8 19 1 9 39 10 14 8 19 1 9 12 19 1 10 39 159 19 0 11 39 29 34 35 12 14 8 19 1 9 73 39 10 14 8 19 1 9 12 19 1 10 12 19 1 31 17 29 38 124 75 45 36 34 37 12 14 8 19 1 9 73 39 10 14 8 19 1 9 12 19 1 10 12 19 1 31 17 29 10 0 39 27 34 46 12 14 8 19 1 9 73 39 10 14 8 19 1 9 12 19 1 10 12 19 1 31 17 29 10 1 73 39 58 10 0 45 23 75 45 47 38 41 10 1 4 51 0 13 0 14 8 19 1 9 73 39 10 14 8 19 1 9 12 19 1 10 12 19 1 31 17 32 13 0 19 1 34 10 1 5 51 1 10 1 40 -43 75 73 43 2 43 1 38 40 14 48 15 49 19 0 50 73 39 12 19 0 51 16 52 12 9 1 19 2 53 12 19 0 54 12 15 55 19 5 56 12 14 48 19 1 57 22 73 29) #69# #1# 65797) si::fset)) #1# 65797))
