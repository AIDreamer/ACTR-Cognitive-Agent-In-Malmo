(#Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 16 77 15 6 15 7 19 15 8 15 0 15 9 15 10 15 11 19 4 12 15 13 15 9 15 14 15 15 19 4 12 15 13 14 16 77 15 17 19 4 12 15 0 19 1 39 78 35 15 13 1 37 12 19 2 38 1 0 73 29) #1=#A(t (40) (common-lisp-user::act-r-buffer "ACT-R-BUFFER-" (#2="The internal structure for a buffer" common-lisp-user::name common-lisp-user::chunk common-lisp-user::flags common-lisp-user::module common-lisp-user::spread common-lisp-user::queries common-lisp-user::requests (common-lisp-user::requests-mask 0) common-lisp-user::parameter-name common-lisp-user::requested common-lisp-user::status-printing common-lisp-user::multi common-lisp-user::searchable common-lisp-user::chunk-set common-lisp-user::copy common-lisp-user::trackable) ((common-lisp-user::name nil t nil 0 nil) (common-lisp-user::chunk nil t nil 1 nil) (common-lisp-user::flags nil t nil 2 nil) (common-lisp-user::module nil t nil 3 nil) (common-lisp-user::spread nil t nil 4 nil) (common-lisp-user::queries nil t nil 5 nil) (common-lisp-user::requests nil t nil 6 nil) (common-lisp-user::requests-mask 0 t nil 7 nil) (common-lisp-user::parameter-name nil t nil 8 nil) (common-lisp-user::requested nil t nil 9 nil) (common-lisp-user::status-printing nil t nil 10 nil) (common-lisp-user::multi nil t nil 11 nil) (common-lisp-user::searchable nil t nil 12 nil) (common-lisp-user::chunk-set nil t nil 13 nil) (common-lisp-user::copy nil t nil 14 nil) (common-lisp-user::trackable nil t nil 15 nil)) common-lisp-user::copy-act-r-buffer (common-lisp-user::make-act-r-buffer) #2# common-lisp-user::act-r-buffer-p si::define-structure ext::location (defstruct common-lisp-user::act-r-buffer) (#3=#P"C:/Users/Son Pham/Desktop/actr7/framework/internal-structures.lisp" . 0) ext::annotate common-lisp-user::make-act-r-buffer (defun common-lisp-user::make-act-r-buffer) (#3# . 0) :lambda-list (&key #4=#:name #5=#:chunk #6=#:flags #7=#:module #8=#:spread #9=#:queries #10=#:requests (#11=#:requests-mask 0) #12=#:parameter-name #13=#:requested #14=#:status-printing #15=#:multi #16=#:searchable #17=#:chunk-set #18=#:copy #19=#:trackable) (nil :trackable :copy :chunk-set :searchable :multi :status-printing :requested :parameter-name :requests-mask :requests :queries :spread :module :flags :chunk :name) #4# #5# #6# #7# #8# #9# #10# #11# #12# #13# #14# #15# #16# #17# #18# #19# 0 si::make-structure #Y(common-lisp-user::make-act-r-buffer nil nil (28 18 22 40 2 77 46 19 22 40 2 77 46 20 22 40 2 77 46 21 22 40 2 77 46 22 22 40 2 77 46 23 22 40 2 77 46 24 22 40 2 77 46 25 22 40 3 9 0 46 26 22 40 2 77 46 27 22 40 2 77 46 28 22 40 2 77 46 29 22 40 2 77 46 30 22 40 2 77 46 31 22 40 2 77 46 32 22 40 2 77 46 33 22 40 2 77 46 34 15 35 13 15 13 14 13 13 13 12 13 11 13 10 13 9 13 8 13 7 13 6 13 5 13 4 13 3 13 2 13 1 13 0 19 17 36 29) #1# #3# 0) si::fset find-class)) #3# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 11 77 15 6 15 7 19 15 8 15 0 15 9 15 10 15 11 19 4 12 15 13 15 9 15 14 15 15 19 4 12 15 13 14 16 77 15 17 19 4 12 15 0 19 1 34 78 30 15 13 1 32 12 19 2 33 1 0 73 29) #20=#A(t (35) (common-lisp-user::act-r-chunk-spec "ACT-R-CHUNK-SPEC-" (#21="The internal structure of a chunk-spec" (common-lisp-user::filled-slots 0) (common-lisp-user::empty-slots 0) (common-lisp-user::request-param-slots 0) (common-lisp-user::duplicate-slots 0) (common-lisp-user::equal-slots 0) (common-lisp-user::negated-slots 0) (common-lisp-user::relative-slots 0) common-lisp-user::variables common-lisp-user::slot-vars common-lisp-user::dependencies common-lisp-user::slots) ((common-lisp-user::filled-slots 0 t nil 0 nil) (common-lisp-user::empty-slots 0 t nil 1 nil) (common-lisp-user::request-param-slots 0 t nil 2 nil) (common-lisp-user::duplicate-slots 0 t nil 3 nil) (common-lisp-user::equal-slots 0 t nil 4 nil) (common-lisp-user::negated-slots 0 t nil 5 nil) (common-lisp-user::relative-slots 0 t nil 6 nil) (common-lisp-user::variables nil t nil 7 nil) (common-lisp-user::slot-vars nil t nil 8 nil) (common-lisp-user::dependencies nil t nil 9 nil) (common-lisp-user::slots nil t nil 10 nil)) common-lisp-user::copy-act-r-chunk-spec (common-lisp-user::make-act-r-chunk-spec) #21# common-lisp-user::act-r-chunk-spec-p si::define-structure ext::location (defstruct common-lisp-user::act-r-chunk-spec) (#3# . 17774) ext::annotate common-lisp-user::make-act-r-chunk-spec (defun common-lisp-user::make-act-r-chunk-spec) (#3# . 17774) :lambda-list (&key (#22=#:filled-slots 0) (#23=#:empty-slots 0) (#24=#:request-param-slots 0) (#25=#:duplicate-slots 0) (#26=#:equal-slots 0) (#27=#:negated-slots 0) (#28=#:relative-slots 0) #29=#:variables #30=#:slot-vars #31=#:dependencies #32=#:slots) (nil :slots :dependencies :slot-vars :variables :relative-slots :negated-slots :equal-slots :duplicate-slots :request-param-slots :empty-slots :filled-slots) #22# #23# #24# #25# #26# #27# #28# #29# #30# #31# #32# 0 si::make-structure #Y(common-lisp-user::make-act-r-chunk-spec nil nil (28 18 22 40 3 9 0 46 19 22 40 3 9 0 46 20 22 40 3 9 0 46 21 22 40 3 9 0 46 22 22 40 3 9 0 46 23 22 40 3 9 0 46 24 22 40 3 9 0 46 25 22 40 2 77 46 26 22 40 2 77 46 27 22 40 2 77 46 28 22 40 2 77 46 29 15 30 13 10 13 9 13 8 13 7 13 6 13 5 13 4 13 3 13 2 13 1 13 0 19 12 31 29) #20# #3# 17774) si::fset find-class)) #3# 17774) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 6 77 15 6 15 7 19 15 8 15 0 15 9 15 10 15 11 19 4 12 15 13 15 9 15 14 15 15 19 4 12 15 13 14 16 77 15 17 19 4 12 15 0 19 1 30 78 26 15 13 1 28 12 19 2 29 1 0 73 29) #33=#A(t (31) (common-lisp-user::act-r-slot-spec "ACT-R-SLOT-SPEC-" (#34="The internal structure of a chunk-spec's slot specification" (common-lisp-user::modifier #35='=) common-lisp-user::name common-lisp-user::value common-lisp-user::testable variable common-lisp-user::request-param) ((common-lisp-user::modifier #35# t nil 0 nil) (common-lisp-user::name nil t nil 1 nil) (common-lisp-user::value nil t nil 2 nil) (common-lisp-user::testable nil t nil 3 nil) (variable nil t nil 4 nil) (common-lisp-user::request-param nil t nil 5 nil)) common-lisp-user::copy-act-r-slot-spec (common-lisp-user::make-act-r-slot-spec) #34# common-lisp-user::act-r-slot-spec-p si::define-structure ext::location (defstruct common-lisp-user::act-r-slot-spec) (#3# . 18041) ext::annotate common-lisp-user::make-act-r-slot-spec (defun common-lisp-user::make-act-r-slot-spec) (#3# . 18041) :lambda-list (&key (#36=#:modifier '=) #37=#:name #38=#:value #39=#:testable #40=#:variable #41=#:request-param) (nil :request-param :variable :testable :value :name :modifier) = #36# #37# #38# #39# #40# #41# 0 si::make-structure #Y(common-lisp-user::make-act-r-slot-spec nil nil (28 18 22 40 3 15 19 46 20 22 40 2 77 46 21 22 40 2 77 46 22 22 40 2 77 46 23 22 40 2 77 46 24 22 40 2 77 46 25 15 26 13 5 13 4 13 3 13 2 13 1 13 0 19 7 27 29) #33# #3# 18041) si::fset find-class)) #3# 18041) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 8 77 15 6 15 7 19 15 8 15 0 15 9 15 10 15 11 19 4 12 15 13 15 9 15 14 15 15 19 4 12 15 13 14 16 77 15 17 19 4 12 15 0 19 1 32 78 28 15 13 1 30 12 19 2 31 1 0 73 29) #42=#A(t (33) (common-lisp-user::act-r-chunk-type "ACT-R-CHUNK-TYPE-" (#43="The internal structure of a chunk-type" common-lisp-user::name documentation common-lisp-user::super-types common-lisp-user::parents common-lisp-user::slots common-lisp-user::possible-slots common-lisp-user::slot-vector (common-lisp-user::initial-spec #44=(common-lisp-user::make-act-r-chunk-spec))) ((common-lisp-user::name nil t nil 0 nil) (documentation nil t nil 1 nil) (common-lisp-user::super-types nil t nil 2 nil) (common-lisp-user::parents nil t nil 3 nil) (common-lisp-user::slots nil t nil 4 nil) (common-lisp-user::possible-slots nil t nil 5 nil) (common-lisp-user::slot-vector nil t nil 6 nil) (common-lisp-user::initial-spec #44# t nil 7 nil)) common-lisp-user::copy-act-r-chunk-type (common-lisp-user::make-act-r-chunk-type) #43# common-lisp-user::act-r-chunk-type-p si::define-structure ext::location (defstruct common-lisp-user::act-r-chunk-type) (#3# . 18194) ext::annotate common-lisp-user::make-act-r-chunk-type (defun common-lisp-user::make-act-r-chunk-type) (#3# . 18194) :lambda-list (&key #45=#:name #46=#:documentation #47=#:super-types #48=#:parents #49=#:slots #50=#:possible-slots #51=#:slot-vector (#52=#:initial-spec (common-lisp-user::make-act-r-chunk-spec))) (nil :initial-spec :slot-vector :possible-slots :slots :parents :super-types :documentation :name) #45# #46# #47# #48# #49# #50# #51# common-lisp-user::make-act-r-chunk-spec #52# 0 si::make-structure #Y(common-lisp-user::make-act-r-chunk-type nil nil (28 18 22 40 2 77 46 19 22 40 2 77 46 20 22 40 2 77 46 21 22 40 2 77 46 22 22 40 2 77 46 23 22 40 2 77 46 24 22 40 2 77 46 25 22 40 5 19 0 26 12 46 27 15 28 13 7 13 6 13 5 13 4 13 3 13 2 13 1 13 0 19 9 29 29) #42# #3# 18194) si::fset find-class)) #3# 18194) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 9 77 15 6 15 7 19 15 8 15 0 15 9 15 10 15 11 19 4 12 15 13 15 9 15 14 15 15 19 4 12 15 13 14 16 77 15 17 19 4 12 15 0 19 1 38 78 34 15 13 1 36 12 19 2 37 1 0 73 29) #53=#A(t (39) (common-lisp-user::act-r-chunk-type-info "ACT-R-CHUNK-TYPE-INFO-" (#54="The structure to hold chunk-type information for a model" (common-lisp-user::slot->index #55=(make-hash-table)) (common-lisp-user::index->slot #56=(make-array (list 0) :adjustable t :fill-pointer t)) (common-lisp-user::slot->mask #57=(make-hash-table)) (common-lisp-user::size 0) (common-lisp-user::distinct-types #58=(make-hash-table)) common-lisp-user::extended-slots common-lisp-user::query-slots (common-lisp-user::table #59=(make-hash-table)) (common-lisp-user::types #60=(list 'common-lisp-user::chunk))) ((common-lisp-user::slot->index #55# t nil 0 nil) (common-lisp-user::index->slot #56# t nil 1 nil) (common-lisp-user::slot->mask #57# t nil 2 nil) (common-lisp-user::size 0 t nil 3 nil) (common-lisp-user::distinct-types #58# t nil 4 nil) (common-lisp-user::extended-slots nil t nil 5 nil) (common-lisp-user::query-slots nil t nil 6 nil) (common-lisp-user::table #59# t nil 7 nil) (common-lisp-user::types #60# t nil 8 nil)) common-lisp-user::copy-act-r-chunk-type-info (common-lisp-user::make-act-r-chunk-type-info) #54# common-lisp-user::act-r-chunk-type-info-p si::define-structure ext::location (defstruct common-lisp-user::act-r-chunk-type-info) (#3# . 18590) ext::annotate common-lisp-user::make-act-r-chunk-type-info (defun common-lisp-user::make-act-r-chunk-type-info) (#3# . 18590) :lambda-list (&key (#61=#:slot->index (make-hash-table)) (#62=#:index->slot (make-array (list 0) :adjustable t :fill-pointer t)) (#63=#:slot->mask (make-hash-table)) (#64=#:size 0) (#65=#:distinct-types (make-hash-table)) #66=#:extended-slots #67=#:query-slots (#68=#:table (make-hash-table)) (#69=#:types (list 'common-lisp-user::chunk))) (nil :types :table :query-slots :extended-slots :distinct-types :size :slot->mask :index->slot :slot->index) make-hash-table #61# :adjustable t :fill-pointer make-array #62# #63# #64# #65# #66# #67# #68# common-lisp-user::chunk #69# 0 si::make-structure #Y(common-lisp-user::make-act-r-chunk-type-info nil nil (28 18 22 40 5 19 0 19 12 46 20 22 40 18 8 0 6 1 12 14 21 14 22 14 23 14 22 19 5 24 12 46 25 22 40 5 19 0 19 12 46 26 22 40 3 9 0 46 27 22 40 5 19 0 19 12 46 28 22 40 2 77 46 29 22 40 2 77 46 30 22 40 5 19 0 19 12 46 31 22 40 6 1 32 6 1 12 46 33 15 34 13 8 13 7 13 6 13 5 13 4 13 3 13 2 13 1 13 0 19 10 35 29) #53# #3# 18590) si::fset find-class)) #3# 18590) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 9 77 15 6 15 7 19 15 8 15 0 15 9 15 10 15 11 19 4 12 15 13 15 9 15 14 15 15 19 4 12 15 13 14 16 77 15 17 19 4 12 15 0 19 1 32 78 28 15 13 1 30 12 19 2 31 1 0 73 29) #70=#A(t (33) (common-lisp-user::act-r-chunk "ACT-R-CHUNK-" (#71="The internal structure of a chunk" common-lisp-user::name common-lisp-user::base-name documentation (common-lisp-user::filled-slots 0) common-lisp-user::slot-value-lists common-lisp-user::copied-from common-lisp-user::merged-chunks common-lisp-user::parameter-values common-lisp-user::immutable) ((common-lisp-user::name nil t nil 0 nil) (common-lisp-user::base-name nil t nil 1 nil) (documentation nil t nil 2 nil) (common-lisp-user::filled-slots 0 t nil 3 nil) (common-lisp-user::slot-value-lists nil t nil 4 nil) (common-lisp-user::copied-from nil t nil 5 nil) (common-lisp-user::merged-chunks nil t nil 6 nil) (common-lisp-user::parameter-values nil t nil 7 nil) (common-lisp-user::immutable nil t nil 8 nil)) common-lisp-user::copy-act-r-chunk (common-lisp-user::make-act-r-chunk) #71# common-lisp-user::act-r-chunk-p si::define-structure ext::location (defstruct common-lisp-user::act-r-chunk) (#3# . 18957) ext::annotate common-lisp-user::make-act-r-chunk (defun common-lisp-user::make-act-r-chunk) (#3# . 18957) :lambda-list (&key #72=#:name #73=#:base-name #74=#:documentation (#75=#:filled-slots 0) #76=#:slot-value-lists #77=#:copied-from #78=#:merged-chunks #79=#:parameter-values #80=#:immutable) (nil :immutable :parameter-values :merged-chunks :copied-from :slot-value-lists :filled-slots :documentation :base-name :name) #72# #73# #74# #75# #76# #77# #78# #79# #80# 0 si::make-structure #Y(common-lisp-user::make-act-r-chunk nil nil (28 18 22 40 2 77 46 19 22 40 2 77 46 20 22 40 2 77 46 21 22 40 3 9 0 46 22 22 40 2 77 46 23 22 40 2 77 46 24 22 40 2 77 46 25 22 40 2 77 46 26 22 40 2 77 46 27 15 28 13 8 13 7 13 6 13 5 13 4 13 3 13 2 13 1 13 0 19 10 29 29) #70# #3# 18957) si::fset find-class)) #3# 18957) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 8 77 15 6 15 7 19 15 8 15 0 15 9 15 10 15 11 19 4 12 15 13 15 9 15 14 15 15 19 4 12 15 13 14 16 77 15 17 19 4 12 15 0 19 1 31 78 27 15 13 1 29 12 19 2 30 1 0 73 29) #81=#A(t (32) (common-lisp-user::act-r-chunk-parameter "ACT-R-CHUNK-PARAMETER-" (#82="The internal structure of a chunk parameter" common-lisp-user::name common-lisp-user::index common-lisp-user::default-value common-lisp-user::default-function merge common-lisp-user::copy common-lisp-user::copy-from-chunk common-lisp-user::accessor) ((common-lisp-user::name nil t nil 0 nil) (common-lisp-user::index nil t nil 1 nil) (common-lisp-user::default-value nil t nil 2 nil) (common-lisp-user::default-function nil t nil 3 nil) (merge nil t nil 4 nil) (common-lisp-user::copy nil t nil 5 nil) (common-lisp-user::copy-from-chunk nil t nil 6 nil) (common-lisp-user::accessor nil t nil 7 nil)) common-lisp-user::copy-act-r-chunk-parameter (common-lisp-user::make-act-r-chunk-parameter) #82# common-lisp-user::act-r-chunk-parameter-p si::define-structure ext::location (defstruct common-lisp-user::act-r-chunk-parameter) (#3# . 19155) ext::annotate common-lisp-user::make-act-r-chunk-parameter (defun common-lisp-user::make-act-r-chunk-parameter) (#3# . 19155) :lambda-list (&key #83=#:name #84=#:index #85=#:default-value #86=#:default-function #87=#:merge #88=#:copy #89=#:copy-from-chunk #90=#:accessor) (nil :accessor :copy-from-chunk :copy :merge :default-function :default-value :index :name) #83# #84# #85# #86# #87# #88# #89# #90# 0 si::make-structure #Y(common-lisp-user::make-act-r-chunk-parameter nil nil (28 18 22 40 2 77 46 19 22 40 2 77 46 20 22 40 2 77 46 21 22 40 2 77 46 22 22 40 2 77 46 23 22 40 2 77 46 24 22 40 2 77 46 25 22 40 2 77 46 26 15 27 13 7 13 6 13 5 13 4 13 3 13 2 13 1 13 0 19 9 28 29) #81# #3# 19155) si::fset find-class)) #3# 19155) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 13 77 15 6 15 7 19 15 8 15 9 15 10 15 11 15 12 19 4 13 15 14 15 10 15 15 15 16 19 4 13 15 14 14 17 77 15 18 19 4 13 15 0 19 1 38 78 34 15 14 1 36 12 19 2 37 1 0 73 29) #91=#A(t (39) (common-lisp-user::act-r-event common-lisp-user::evt- (#92="Internal ACT-R event" common-lisp-user::mstime common-lisp-user::priority common-lisp-user::action common-lisp-user::model common-lisp-user::mp common-lisp-user::module common-lisp-user::destination common-lisp-user::params common-lisp-user::details (common-lisp-user::output t) common-lisp-user::wait-condition common-lisp-user::dynamic common-lisp-user::precondition) ((common-lisp-user::mstime nil t nil 0 nil) (common-lisp-user::priority nil t nil 1 nil) (common-lisp-user::action nil t nil 2 nil) (common-lisp-user::model nil t nil 3 nil) (common-lisp-user::mp nil t nil 4 nil) (common-lisp-user::module nil t nil 5 nil) (common-lisp-user::destination nil t nil 6 nil) (common-lisp-user::params nil t nil 7 nil) (common-lisp-user::details nil t nil 8 nil) (common-lisp-user::output t t nil 9 nil) (common-lisp-user::wait-condition nil t nil 10 nil) (common-lisp-user::dynamic nil t nil 11 nil) (common-lisp-user::precondition nil t nil 12 nil)) common-lisp-user::copy-act-r-event (common-lisp-user::make-act-r-event) #92# common-lisp-user::act-r-event-p si::define-structure #93=(common-lisp-user::act-r-event (:conc-name common-lisp-user::evt-)) ext::location (defstruct #93#) (#3# . 19318) ext::annotate common-lisp-user::make-act-r-event (defun common-lisp-user::make-act-r-event) (#3# . 19318) :lambda-list (&key #94=#:mstime #95=#:priority #96=#:action #97=#:model #98=#:mp #99=#:module #100=#:destination #101=#:params #102=#:details (#103=#:output t) #104=#:wait-condition #105=#:dynamic #106=#:precondition) (nil :precondition :dynamic :wait-condition :output :details :params :destination :module :mp :model :action :priority :mstime) #94# #95# #96# #97# #98# #99# #100# #101# #102# t #103# #104# #105# #106# 0 si::make-structure #Y(common-lisp-user::make-act-r-event nil nil (28 19 22 40 2 77 46 20 22 40 2 77 46 21 22 40 2 77 46 22 22 40 2 77 46 23 22 40 2 77 46 24 22 40 2 77 46 25 22 40 2 77 46 26 22 40 2 77 46 27 22 40 2 77 46 28 22 40 3 14 29 46 30 22 40 2 77 46 31 22 40 2 77 46 32 22 40 2 77 46 33 15 34 13 12 13 11 13 10 13 9 13 8 13 7 13 6 13 5 13 4 13 3 13 2 13 1 13 0 19 14 35 29) #91# #3# 19318) si::fset find-class)) #3# 19318) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 12 12 19 2 13 1 0 73 29) #107=#A(t (14) (common-lisp-user::evt-time ext::location (defun common-lisp-user::evt-time) (#3# . 19506) ext::annotate :lambda-list (common-lisp-user::event) common-lisp-user::event common-lisp-user::evt-mstime numberp 0.001 * #Y(common-lisp-user::evt-time nil nil (24 45 7 26 13 0 19 1 8 16 9 73 39 12 13 0 19 1 8 12 15 10 19 2 11 29) #107# #3# 19506) si::fset)) #3# 19506) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 15 5 77 77 15 6 9 13 77 15 7 15 8 19 15 9 15 10 15 11 15 12 15 13 19 4 14 15 15 15 11 15 16 15 17 19 4 14 15 15 14 18 77 15 19 19 4 14 15 0 19 1 39 78 35 15 15 1 37 12 19 2 38 1 0 73 29) #108=#A(t (40) (common-lisp-user::act-r-maintenance-event "ACT-R-MAINTENANCE-EVENT-" (#109="Events for system maintenance") ((common-lisp-user::mstime nil t nil 0 common-lisp-user::evt-mstime) (common-lisp-user::priority nil t nil 1 common-lisp-user::evt-priority) (common-lisp-user::action nil t nil 2 common-lisp-user::evt-action) (common-lisp-user::model nil t nil 3 common-lisp-user::evt-model) (common-lisp-user::mp nil t nil 4 common-lisp-user::evt-mp) (common-lisp-user::module nil t nil 5 common-lisp-user::evt-module) (common-lisp-user::destination nil t nil 6 common-lisp-user::evt-destination) (common-lisp-user::params nil t nil 7 common-lisp-user::evt-params) (common-lisp-user::details nil t nil 8 common-lisp-user::evt-details) (common-lisp-user::output #110='common-lisp-user::low t nil 9 common-lisp-user::evt-output) (common-lisp-user::wait-condition nil t nil 10 common-lisp-user::evt-wait-condition) (common-lisp-user::dynamic nil t nil 11 common-lisp-user::evt-dynamic) (common-lisp-user::precondition nil t nil 12 common-lisp-user::evt-precondition)) common-lisp-user::copy-act-r-maintenance-event common-lisp-user::act-r-event (common-lisp-user::make-act-r-maintenance-event) #109# common-lisp-user::act-r-maintenance-event-p si::define-structure #111=(common-lisp-user::act-r-maintenance-event (:include common-lisp-user::act-r-event (common-lisp-user::output #110#))) ext::location (defstruct #111#) (#3# . 19602) ext::annotate common-lisp-user::make-act-r-maintenance-event (defun common-lisp-user::make-act-r-maintenance-event) (#3# . 19602) :lambda-list (&key #112=#:mstime #113=#:priority #114=#:action #115=#:model #116=#:mp #117=#:module #118=#:destination #119=#:params #120=#:details (#121=#:output 'common-lisp-user::low) #122=#:wait-condition #123=#:dynamic #124=#:precondition) (nil :precondition :dynamic :wait-condition :output :details :params :destination :module :mp :model :action :priority :mstime) #112# #113# #114# #115# #116# #117# #118# #119# #120# common-lisp-user::low #121# #122# #123# #124# 0 si::make-structure #Y(common-lisp-user::make-act-r-maintenance-event nil nil (28 20 22 40 2 77 46 21 22 40 2 77 46 22 22 40 2 77 46 23 22 40 2 77 46 24 22 40 2 77 46 25 22 40 2 77 46 26 22 40 2 77 46 27 22 40 2 77 46 28 22 40 2 77 46 29 22 40 3 15 30 46 31 22 40 2 77 46 32 22 40 2 77 46 33 22 40 2 77 46 34 15 35 13 12 13 11 13 10 13 9 13 8 13 7 13 6 13 5 13 4 13 3 13 2 13 1 13 0 19 14 36 29) #108# #3# 19602) si::fset find-class)) #3# 19602) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 15 5 77 77 15 6 9 13 77 15 7 15 8 19 15 9 15 10 15 11 15 12 15 13 19 4 14 15 15 15 11 15 16 15 17 19 4 14 15 15 14 18 77 15 19 19 4 14 15 0 19 1 40 78 36 15 15 1 38 12 19 2 39 1 0 73 29) #125=#A(t (41) (common-lisp-user::act-r-break-event "ACT-R-BREAK-EVENT-" (#126="The ACT-R break events") (#127=(common-lisp-user::mstime nil t nil 0 common-lisp-user::act-r-maintenance-event-mstime) #128=(common-lisp-user::priority nil t nil 1 common-lisp-user::act-r-maintenance-event-priority) (common-lisp-user::action #129='common-lisp-user::act-r-event-break-action t nil 2 common-lisp-user::act-r-maintenance-event-action) #130=(common-lisp-user::model nil t nil 3 common-lisp-user::act-r-maintenance-event-model) #131=(common-lisp-user::mp nil t nil 4 common-lisp-user::act-r-maintenance-event-mp) #132=(common-lisp-user::module nil t nil 5 common-lisp-user::act-r-maintenance-event-module) #133=(common-lisp-user::destination nil t nil 6 common-lisp-user::act-r-maintenance-event-destination) #134=(common-lisp-user::params nil t nil 7 common-lisp-user::act-r-maintenance-event-params) #135=(common-lisp-user::details nil t nil 8 common-lisp-user::act-r-maintenance-event-details) #136=(common-lisp-user::output 'common-lisp-user::low t nil 9 common-lisp-user::act-r-maintenance-event-output) #137=(common-lisp-user::wait-condition nil t nil 10 common-lisp-user::act-r-maintenance-event-wait-condition) #138=(common-lisp-user::dynamic nil t nil 11 common-lisp-user::act-r-maintenance-event-dynamic) #139=(common-lisp-user::precondition nil t nil 12 common-lisp-user::act-r-maintenance-event-precondition)) common-lisp-user::copy-act-r-break-event common-lisp-user::act-r-maintenance-event (common-lisp-user::make-act-r-break-event) #126# common-lisp-user::act-r-break-event-p si::define-structure #140=(common-lisp-user::act-r-break-event (:include common-lisp-user::act-r-maintenance-event (common-lisp-user::action #129#))) ext::location (defstruct #140#) (#3# . 19712) ext::annotate common-lisp-user::make-act-r-break-event (defun common-lisp-user::make-act-r-break-event) (#3# . 19712) :lambda-list (&key #141=#:mstime #142=#:priority (#143=#:action 'common-lisp-user::act-r-event-break-action) #144=#:model #145=#:mp #146=#:module #147=#:destination #148=#:params #149=#:details (#150=#:output 'common-lisp-user::low) #151=#:wait-condition #152=#:dynamic #153=#:precondition) (nil :precondition :dynamic :wait-condition :output :details :params :destination :module :mp :model :action :priority :mstime) #141# #142# common-lisp-user::act-r-event-break-action #143# #144# #145# #146# #147# #148# #149# common-lisp-user::low #150# #151# #152# #153# 0 si::make-structure #Y(common-lisp-user::make-act-r-break-event nil nil (28 20 22 40 2 77 46 21 22 40 2 77 46 22 22 40 3 15 23 46 24 22 40 2 77 46 25 22 40 2 77 46 26 22 40 2 77 46 27 22 40 2 77 46 28 22 40 2 77 46 29 22 40 2 77 46 30 22 40 3 15 31 46 32 22 40 2 77 46 33 22 40 2 77 46 34 22 40 2 77 46 35 15 36 13 12 13 11 13 10 13 9 13 8 13 7 13 6 13 5 13 4 13 3 13 2 13 1 13 0 19 14 37 29) #125# #3# 19712) si::fset find-class)) #3# 19712) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 15 5 77 77 15 6 9 14 77 15 7 15 8 19 15 9 15 10 15 11 15 12 15 13 19 4 14 15 15 15 11 15 16 15 17 19 4 14 15 15 14 18 77 15 19 19 4 14 15 0 19 1 40 78 36 15 15 1 38 12 19 2 39 1 0 73 29) #154=#A(t (41) (common-lisp-user::act-r-periodic-event "ACT-R-PERIODIC-EVENT-" (#155="special event that repeatedly schedules a user's event" common-lisp-user::id) (#127# #128# (common-lisp-user::action nil t nil 2 common-lisp-user::act-r-maintenance-event-action) #130# #131# #132# #133# #134# #135# #136# #137# #138# #139# (common-lisp-user::id nil t nil 13 nil)) common-lisp-user::copy-act-r-periodic-event common-lisp-user::act-r-maintenance-event (common-lisp-user::make-act-r-periodic-event) #155# common-lisp-user::act-r-periodic-event-p si::define-structure #156=(common-lisp-user::act-r-periodic-event (:include common-lisp-user::act-r-maintenance-event)) ext::location (defstruct #156#) (#3# . 19859) ext::annotate common-lisp-user::make-act-r-periodic-event (defun common-lisp-user::make-act-r-periodic-event) (#3# . 19859) :lambda-list (&key #157=#:mstime #158=#:priority #159=#:action #160=#:model #161=#:mp #162=#:module #163=#:destination #164=#:params #165=#:details (#166=#:output 'common-lisp-user::low) #167=#:wait-condition #168=#:dynamic #169=#:precondition #170=#:id) (nil :id :precondition :dynamic :wait-condition :output :details :params :destination :module :mp :model :action :priority :mstime) #157# #158# #159# #160# #161# #162# #163# #164# #165# common-lisp-user::low #166# #167# #168# #169# #170# 0 si::make-structure #Y(common-lisp-user::make-act-r-periodic-event nil nil (28 20 22 40 2 77 46 21 22 40 2 77 46 22 22 40 2 77 46 23 22 40 2 77 46 24 22 40 2 77 46 25 22 40 2 77 46 26 22 40 2 77 46 27 22 40 2 77 46 28 22 40 2 77 46 29 22 40 3 15 30 46 31 22 40 2 77 46 32 22 40 2 77 46 33 22 40 2 77 46 34 22 40 2 77 46 35 15 36 13 13 13 12 13 11 13 10 13 9 13 8 13 7 13 6 13 5 13 4 13 3 13 2 13 1 13 0 19 15 37 29) #154# #3# 19859) si::fset find-class)) #3# 19859) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 3 77 15 6 15 7 19 15 8 15 9 15 10 15 11 15 12 19 4 13 15 14 15 10 15 15 15 16 19 4 13 15 14 14 17 77 15 18 19 4 13 15 0 19 1 28 78 24 15 14 1 26 12 19 2 27 1 0 73 29) #171=#A(t (29) (common-lisp-user::meta-processes common-lisp-user::mps- (#172="The internal structure that holds meta-processes" (common-lisp-user::table #173=(make-hash-table)) (count 0) common-lisp-user::current) ((common-lisp-user::table #173# t nil 0 nil) (count 0 t nil 1 nil) (common-lisp-user::current nil t nil 2 nil)) common-lisp-user::copy-meta-processes (common-lisp-user::make-meta-processes) #172# common-lisp-user::meta-processes-p si::define-structure #174=(common-lisp-user::meta-processes (:conc-name common-lisp-user::mps-)) ext::location (defstruct #174#) (#3# . 19995) ext::annotate common-lisp-user::make-meta-processes (defun common-lisp-user::make-meta-processes) (#3# . 19995) :lambda-list (&key (#175=#:table (make-hash-table)) (#176=#:count 0) #177=#:current) (nil :current :count :table) make-hash-table #175# #176# #177# 0 si::make-structure #Y(common-lisp-user::make-meta-processes nil nil (28 19 22 40 5 19 0 20 12 46 21 22 40 3 9 0 46 22 22 40 2 77 46 23 15 24 13 2 13 1 13 0 19 4 25 29) #171# #3# 19995) si::fset find-class)) #3# 19995) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 30 77 15 6 15 7 19 15 8 15 9 15 10 15 11 15 12 19 4 13 15 14 15 10 15 15 15 16 19 4 13 15 14 14 17 77 15 18 19 4 13 15 0 19 1 62 78 58 15 14 1 60 12 19 2 61 1 0 73 29) #178=#A(t (63) (common-lisp-user::meta-process common-lisp-user::meta-p- (#179="The internal representation of the meta-process" common-lisp-user::name (time 0) common-lisp-user::start-time common-lisp-user::start-real-time (common-lisp-user::models #180=(make-hash-table :size 5)) common-lisp-user::current-model (common-lisp-user::model-count 0) (common-lisp-user::model-name-len 0) common-lisp-user::events common-lisp-user::delayed common-lisp-user::dynamics common-lisp-user::allow-dynamics common-lisp-user::in-slack break common-lisp-user::pre-events common-lisp-user::post-events (common-lisp-user::time-function #181='get-internal-real-time) (common-lisp-user::units-per-second internal-time-units-per-second) (common-lisp-user::slack-function #182='common-lisp-user::real-time-slack) (common-lisp-user::real-time-scale #183=1.0) common-lisp-user::max-time-delta common-lisp-user::max-time-maintenance (common-lisp-user::next-hook-id 0) (common-lisp-user::hook-table #184=(make-hash-table)) (common-lisp-user::version common-lisp-user::*actr-version-string*) (documentation #185="") (common-lisp-user::running nil) common-lisp-user::time-overflow-warning common-lisp-user::model-order (common-lisp-user::cannot-define-model 0)) ((common-lisp-user::name nil t nil 0 nil) (time 0 t nil 1 nil) (common-lisp-user::start-time nil t nil 2 nil) (common-lisp-user::start-real-time nil t nil 3 nil) (common-lisp-user::models #180# t nil 4 nil) (common-lisp-user::current-model nil t nil 5 nil) (common-lisp-user::model-count 0 t nil 6 nil) (common-lisp-user::model-name-len 0 t nil 7 nil) (common-lisp-user::events nil t nil 8 nil) (common-lisp-user::delayed nil t nil 9 nil) (common-lisp-user::dynamics nil t nil 10 nil) (common-lisp-user::allow-dynamics nil t nil 11 nil) (common-lisp-user::in-slack nil t nil 12 nil) (break nil t nil 13 nil) (common-lisp-user::pre-events nil t nil 14 nil) (common-lisp-user::post-events nil t nil 15 nil) (common-lisp-user::time-function #181# t nil 16 nil) (common-lisp-user::units-per-second internal-time-units-per-second t nil 17 nil) (common-lisp-user::slack-function #182# t nil 18 nil) (common-lisp-user::real-time-scale #183# t nil 19 nil) (common-lisp-user::max-time-delta nil t nil 20 nil) (common-lisp-user::max-time-maintenance nil t nil 21 nil) (common-lisp-user::next-hook-id 0 t nil 22 nil) (common-lisp-user::hook-table #184# t nil 23 nil) (common-lisp-user::version common-lisp-user::*actr-version-string* t nil 24 nil) (documentation #185# t nil 25 nil) (common-lisp-user::running nil t nil 26 nil) (common-lisp-user::time-overflow-warning nil t nil 27 nil) (common-lisp-user::model-order nil t nil 28 nil) (common-lisp-user::cannot-define-model 0 t nil 29 nil)) common-lisp-user::copy-meta-process (common-lisp-user::make-meta-process) #179# common-lisp-user::meta-process-p si::define-structure #186=(common-lisp-user::meta-process (:conc-name common-lisp-user::meta-p-)) ext::location (defstruct #186#) (#3# . 20146) ext::annotate common-lisp-user::make-meta-process (defun common-lisp-user::make-meta-process) (#3# . 20146) :lambda-list (&key #187=#:name (#188=#:time 0) #189=#:start-time #190=#:start-real-time (#191=#:models (make-hash-table :size 5)) #192=#:current-model (#193=#:model-count 0) (#194=#:model-name-len 0) #195=#:events #196=#:delayed #197=#:dynamics #198=#:allow-dynamics #199=#:in-slack #200=#:break #201=#:pre-events #202=#:post-events (#203=#:time-function 'get-internal-real-time) (#204=#:units-per-second internal-time-units-per-second) (#205=#:slack-function 'common-lisp-user::real-time-slack) (#206=#:real-time-scale #183#) #207=#:max-time-delta #208=#:max-time-maintenance (#209=#:next-hook-id 0) (#210=#:hook-table (make-hash-table)) (#211=#:version common-lisp-user::*actr-version-string*) (#212=#:documentation #185#) #213=#:running #214=#:time-overflow-warning #215=#:model-order (#216=#:cannot-define-model 0)) (nil :cannot-define-model :model-order :time-overflow-warning :running :documentation :version :hook-table :next-hook-id :max-time-maintenance :max-time-delta :real-time-scale :slack-function :units-per-second :time-function :post-events :pre-events :break :in-slack :allow-dynamics :dynamics :delayed :events :model-name-len :model-count :current-model :models :start-real-time :start-time :time :name) #187# #188# #189# #190# :size make-hash-table #191# #192# #193# #194# #195# #196# #197# #198# #199# #200# #201# #202# get-internal-real-time #203# internal-time-units-per-second #204# common-lisp-user::real-time-slack #205# #183# #206# #207# #208# #209# #210# common-lisp-user::*actr-version-string* #211# #185# #212# #213# #214# #215# #216# 0 si::make-structure #Y(common-lisp-user::make-meta-process nil nil (28 19 22 40 2 77 46 20 22 40 3 9 0 46 21 22 40 2 77 46 22 22 40 2 77 46 23 22 40 9 14 24 9 5 19 2 25 12 46 26 22 40 2 77 46 27 22 40 3 9 0 46 28 22 40 3 9 0 46 29 22 40 2 77 46 30 22 40 2 77 46 31 22 40 2 77 46 32 22 40 2 77 46 33 22 40 2 77 46 34 22 40 2 77 46 35 22 40 2 77 46 36 22 40 2 77 46 37 22 40 3 15 38 46 39 22 40 3 14 40 46 41 22 40 3 15 42 46 43 22 40 3 15 44 46 45 22 40 2 77 46 46 22 40 2 77 46 47 22 40 3 9 0 46 48 22 40 5 19 0 25 12 46 49 22 40 3 14 50 46 51 22 40 3 15 52 46 53 22 40 2 77 46 54 22 40 2 77 46 55 22 40 2 77 46 56 22 40 3 9 0 46 57 15 58 13 29 13 28 13 27 13 26 13 25 13 24 13 23 13 22 13 21 13 20 13 19 13 18 13 17 13 16 13 15 13 14 13 13 13 12 13 11 13 10 13 9 13 8 13 7 13 6 13 5 13 4 13 3 13 2 13 1 13 0 19 31 59 29) #178# #3# 20146) si::fset find-class)) #3# 20146) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 13 77 15 6 15 7 19 15 8 15 0 15 9 15 10 15 11 19 4 12 15 13 15 9 15 14 15 15 19 4 12 15 13 14 16 77 15 17 19 4 12 15 0 19 1 39 78 35 15 13 1 37 12 19 2 38 1 0 73 29) #217=#A(t (40) (common-lisp-user::act-r-model "ACT-R-MODEL-" (#218="The internal structure of a model" (common-lisp-user::modules-table #219=(make-hash-table)) (common-lisp-user::buffers #220=(make-hash-table)) (common-lisp-user::chunks-table #221=(make-hash-table)) (common-lisp-user::chunk-ref-table #222=(make-hash-table)) (common-lisp-user::chunk-types-info #223=(common-lisp-user::make-act-r-chunk-type-info)) common-lisp-user::name common-lisp-user::code (common-lisp-user::chunk-update t) (common-lisp-user::dynamic-update t) common-lisp-user::delete-chunks common-lisp-user::dynamic-update-hooks common-lisp-user::short-copy-names common-lisp-user::tracked-requests) ((common-lisp-user::modules-table #219# t nil 0 nil) (common-lisp-user::buffers #220# t nil 1 nil) (common-lisp-user::chunks-table #221# t nil 2 nil) (common-lisp-user::chunk-ref-table #222# t nil 3 nil) (common-lisp-user::chunk-types-info #223# t nil 4 nil) (common-lisp-user::name nil t nil 5 nil) (common-lisp-user::code nil t nil 6 nil) (common-lisp-user::chunk-update t t nil 7 nil) (common-lisp-user::dynamic-update t t nil 8 nil) (common-lisp-user::delete-chunks nil t nil 9 nil) (common-lisp-user::dynamic-update-hooks nil t nil 10 nil) (common-lisp-user::short-copy-names nil t nil 11 nil) (common-lisp-user::tracked-requests nil t nil 12 nil)) common-lisp-user::copy-act-r-model (common-lisp-user::make-act-r-model) #218# common-lisp-user::act-r-model-p si::define-structure ext::location (defstruct common-lisp-user::act-r-model) (#3# . 20874) ext::annotate common-lisp-user::make-act-r-model (defun common-lisp-user::make-act-r-model) (#3# . 20874) :lambda-list (&key (#224=#:modules-table (make-hash-table)) (#225=#:buffers (make-hash-table)) (#226=#:chunks-table (make-hash-table)) (#227=#:chunk-ref-table (make-hash-table)) (#228=#:chunk-types-info (common-lisp-user::make-act-r-chunk-type-info)) #229=#:name #230=#:code (#231=#:chunk-update t) (#232=#:dynamic-update t) #233=#:delete-chunks #234=#:dynamic-update-hooks #235=#:short-copy-names #236=#:tracked-requests) (nil :tracked-requests :short-copy-names :dynamic-update-hooks :delete-chunks :dynamic-update :chunk-update :code :name :chunk-types-info :chunk-ref-table :chunks-table :buffers :modules-table) make-hash-table #224# #225# #226# #227# common-lisp-user::make-act-r-chunk-type-info #228# #229# #230# t #231# #232# #233# #234# #235# #236# 0 si::make-structure #Y(common-lisp-user::make-act-r-model nil nil (28 18 22 40 5 19 0 19 12 46 20 22 40 5 19 0 19 12 46 21 22 40 5 19 0 19 12 46 22 22 40 5 19 0 19 12 46 23 22 40 5 19 0 24 12 46 25 22 40 2 77 46 26 22 40 2 77 46 27 22 40 3 14 28 46 29 22 40 3 14 28 46 30 22 40 2 77 46 31 22 40 2 77 46 32 22 40 2 77 46 33 22 40 2 77 46 34 15 35 13 12 13 11 13 10 13 9 13 8 13 7 13 6 13 5 13 4 13 3 13 2 13 1 13 0 19 14 36 29) #217# #3# 20874) si::fset find-class)) #3# 20874) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 8 77 15 6 15 7 19 15 8 15 0 15 9 15 10 15 11 19 4 12 15 13 15 9 15 14 15 15 19 4 12 15 13 14 16 77 15 17 19 4 12 15 0 19 1 32 78 28 15 13 1 30 12 19 2 31 1 0 73 29) #237=#A(t (33) (common-lisp-user::act-r-modules "ACT-R-MODULES-" (#238="The internal structure that holds the modules" (common-lisp-user::table #239=(make-hash-table)) (count 0) (common-lisp-user::name-len 0) common-lisp-user::notify common-lisp-user::update common-lisp-user::run-notify common-lisp-user::run-over-notify common-lisp-user::sorted-names) ((common-lisp-user::table #239# t nil 0 nil) (count 0 t nil 1 nil) (common-lisp-user::name-len 0 t nil 2 nil) (common-lisp-user::notify nil t nil 3 nil) (common-lisp-user::update nil t nil 4 nil) (common-lisp-user::run-notify nil t nil 5 nil) (common-lisp-user::run-over-notify nil t nil 6 nil) (common-lisp-user::sorted-names nil t nil 7 nil)) common-lisp-user::copy-act-r-modules (common-lisp-user::make-act-r-modules) #238# common-lisp-user::act-r-modules-p si::define-structure ext::location (defstruct common-lisp-user::act-r-modules) (#3# . 21260) ext::annotate common-lisp-user::make-act-r-modules (defun common-lisp-user::make-act-r-modules) (#3# . 21260) :lambda-list (&key (#240=#:table (make-hash-table)) (#241=#:count 0) (#242=#:name-len 0) #243=#:notify #244=#:update #245=#:run-notify #246=#:run-over-notify #247=#:sorted-names) (nil :sorted-names :run-over-notify :run-notify :update :notify :name-len :count :table) make-hash-table #240# #241# #242# #243# #244# #245# #246# #247# 0 si::make-structure #Y(common-lisp-user::make-act-r-modules nil nil (28 18 22 40 5 19 0 19 12 46 20 22 40 3 9 0 46 21 22 40 3 9 0 46 22 22 40 2 77 46 23 22 40 2 77 46 24 22 40 2 77 46 25 22 40 2 77 46 26 22 40 2 77 46 27 15 28 13 7 13 6 13 5 13 4 13 3 13 2 13 1 13 0 19 9 29 29) #237# #3# 21260) si::fset find-class)) #3# 21260) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 20 77 15 6 15 7 19 15 8 15 0 15 9 15 10 15 11 19 4 12 15 13 15 9 15 14 15 15 19 4 12 15 13 14 16 77 15 17 19 4 12 15 0 19 1 43 78 39 15 13 1 41 12 19 2 42 1 0 73 29) #248=#A(t (44) (common-lisp-user::act-r-module "ACT-R-MODULE-" (#249="The internal structure of a module" common-lisp-user::name common-lisp-user::buffers common-lisp-user::version documentation common-lisp-user::creation common-lisp-user::reset common-lisp-user::query common-lisp-user::request common-lisp-user::buffer-mod common-lisp-user::params delete common-lisp-user::notify-on-clear common-lisp-user::update common-lisp-user::secondary-reset common-lisp-user::tertiary-reset warn search common-lisp-user::offset common-lisp-user::run-notify common-lisp-user::run-over-notify) ((common-lisp-user::name nil t nil 0 nil) (common-lisp-user::buffers nil t nil 1 nil) (common-lisp-user::version nil t nil 2 nil) (documentation nil t nil 3 nil) (common-lisp-user::creation nil t nil 4 nil) (common-lisp-user::reset nil t nil 5 nil) (common-lisp-user::query nil t nil 6 nil) (common-lisp-user::request nil t nil 7 nil) (common-lisp-user::buffer-mod nil t nil 8 nil) (common-lisp-user::params nil t nil 9 nil) (delete nil t nil 10 nil) (common-lisp-user::notify-on-clear nil t nil 11 nil) (common-lisp-user::update nil t nil 12 nil) (common-lisp-user::secondary-reset nil t nil 13 nil) (common-lisp-user::tertiary-reset nil t nil 14 nil) (warn nil t nil 15 nil) (search nil t nil 16 nil) (common-lisp-user::offset nil t nil 17 nil) (common-lisp-user::run-notify nil t nil 18 nil) (common-lisp-user::run-over-notify nil t nil 19 nil)) common-lisp-user::copy-act-r-module (common-lisp-user::make-act-r-module) #249# common-lisp-user::act-r-module-p si::define-structure ext::location (defstruct common-lisp-user::act-r-module) (#3# . 21456) ext::annotate common-lisp-user::make-act-r-module (defun common-lisp-user::make-act-r-module) (#3# . 21456) :lambda-list (&key #250=#:name #251=#:buffers #252=#:version #253=#:documentation #254=#:creation #255=#:reset #256=#:query #257=#:request #258=#:buffer-mod #259=#:params #260=#:delete #261=#:notify-on-clear #262=#:update #263=#:secondary-reset #264=#:tertiary-reset #265=#:warn #266=#:search #267=#:offset #268=#:run-notify #269=#:run-over-notify) (nil :run-over-notify :run-notify :offset :search :warn :tertiary-reset :secondary-reset :update :notify-on-clear :delete :params :buffer-mod :request :query :reset :creation :documentation :version :buffers :name) #250# #251# #252# #253# #254# #255# #256# #257# #258# #259# #260# #261# #262# #263# #264# #265# #266# #267# #268# #269# 0 si::make-structure #Y(common-lisp-user::make-act-r-module nil nil (28 18 22 40 2 77 46 19 22 40 2 77 46 20 22 40 2 77 46 21 22 40 2 77 46 22 22 40 2 77 46 23 22 40 2 77 46 24 22 40 2 77 46 25 22 40 2 77 46 26 22 40 2 77 46 27 22 40 2 77 46 28 22 40 2 77 46 29 22 40 2 77 46 30 22 40 2 77 46 31 22 40 2 77 46 32 22 40 2 77 46 33 22 40 2 77 46 34 22 40 2 77 46 35 22 40 2 77 46 36 22 40 2 77 46 37 22 40 2 77 46 38 15 39 13 19 13 18 13 17 13 16 13 15 13 14 13 13 13 12 13 11 13 10 13 9 13 8 13 7 13 6 13 5 13 4 13 3 13 2 13 1 13 0 19 21 40 29) #248# #3# 21456) si::fset find-class)) #3# 21456) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 7 77 15 6 15 7 19 15 8 15 0 15 9 15 10 15 11 19 4 12 15 13 15 9 15 14 15 15 19 4 12 15 13 14 16 77 15 17 19 4 12 15 0 19 1 30 78 26 15 13 1 28 12 19 2 29 1 0 73 29) #270=#A(t (31) (common-lisp-user::act-r-parameter "ACT-R-PARAMETER-" (#271="The internal structure of a parameter" common-lisp-user::param-name common-lisp-user::default common-lisp-user::test warning common-lisp-user::details common-lisp-user::owner common-lisp-user::users) ((common-lisp-user::param-name nil t nil 0 nil) (common-lisp-user::default nil t nil 1 nil) (common-lisp-user::test nil t nil 2 nil) (warning nil t nil 3 nil) (common-lisp-user::details nil t nil 4 nil) (common-lisp-user::owner nil t nil 5 nil) (common-lisp-user::users nil t nil 6 nil)) common-lisp-user::copy-act-r-parameter (common-lisp-user::make-act-r-parameter) #271# common-lisp-user::act-r-parameter-p si::define-structure ext::location (defstruct common-lisp-user::act-r-parameter) (#3# . 21717) ext::annotate common-lisp-user::make-act-r-parameter (defun common-lisp-user::make-act-r-parameter) (#3# . 21717) :lambda-list (&key #272=#:param-name #273=#:default #274=#:test #275=#:warning #276=#:details #277=#:owner #278=#:users) (nil :users :owner :details :warning :test :default :param-name) #272# #273# #274# #275# #276# #277# #278# 0 si::make-structure #Y(common-lisp-user::make-act-r-parameter nil nil (28 18 22 40 2 77 46 19 22 40 2 77 46 20 22 40 2 77 46 21 22 40 2 77 46 22 22 40 2 77 46 23 22 40 2 77 46 24 22 40 2 77 46 25 15 26 13 6 13 5 13 4 13 3 13 2 13 1 13 0 19 8 27 29) #270# #3# 21717) si::fset find-class)) #3# 21717) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 2 77 15 6 15 7 19 15 8 15 0 15 9 15 10 15 11 19 4 12 15 13 15 9 15 14 15 15 19 4 12 15 13 14 16 77 15 17 19 4 12 15 0 19 1 25 78 21 15 13 1 23 12 19 2 24 1 0 73 29) #279=#A(t (26) (common-lisp-user::act-r-output "ACT-R-OUTPUT-" (#280="The internal structure of an output stream for the printing module" stream common-lisp-user::file) ((stream nil t nil 0 nil) (common-lisp-user::file nil t nil 1 nil)) common-lisp-user::copy-act-r-output (common-lisp-user::make-act-r-output) #280# common-lisp-user::act-r-output-p si::define-structure ext::location (defstruct common-lisp-user::act-r-output) (#3# . 21859) ext::annotate common-lisp-user::make-act-r-output (defun common-lisp-user::make-act-r-output) (#3# . 21859) :lambda-list (&key #281=#:stream #282=#:file) (nil :file :stream) #281# #282# 0 si::make-structure #Y(common-lisp-user::make-act-r-output nil nil (28 18 22 40 2 77 46 19 22 40 2 77 46 20 15 21 13 1 13 0 19 3 22 29) #279# #3# 21859) si::fset find-class)) #3# 21859) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 14 5 1 9 12 1 10 7 3 12 14 5 1 11 12 1 12 7 3 12 15 13 15 14 15 15 15 16 15 17 15 18 15 19 15 20 14 5 1 24 12 1 25 7 3 6 11 12 77 19 4 26 29) #283=#A(t (27) (common-lisp-user::printing-module ext::location (defclass common-lisp-user::printing-module) (#3# . 21970) ext::annotate :initfunction :stream t common-lisp-user::make-act-r-output #Y(nil nil nil (26 14 6 14 7 19 2 8 29) #283# #3# 21970) (:initform (common-lisp-user::make-act-r-output :stream t) :writers ((setf common-lisp-user::printing-module-v)) :readers (common-lisp-user::printing-module-v) :name common-lisp-user::v) #Y(nil nil nil (26 14 6 14 7 19 2 8 29) #283# #3# 21970) (:initform (common-lisp-user::make-act-r-output :stream t) :writers ((setf common-lisp-user::printing-module-c)) :readers (common-lisp-user::printing-module-c) :name common-lisp-user::c) (:initform nil :writers ((setf common-lisp-user::printing-module-suppress-cmds)) :readers (common-lisp-user::printing-module-suppress-cmds) :name common-lisp-user::suppress-cmds) (:initform nil :writers ((setf common-lisp-user::printing-module-filter)) :readers (common-lisp-user::printing-module-filter) :name common-lisp-user::filter) (:initform 'common-lisp-user::high :writers ((setf common-lisp-user::printing-module-detail)) :readers (common-lisp-user::printing-module-detail) :name common-lisp-user::detail) (:initform t :writers ((setf common-lisp-user::printing-module-model-warnings)) :readers (common-lisp-user::printing-module-model-warnings) :name common-lisp-user::model-warnings) (:initform nil :writers ((setf common-lisp-user::printing-module-cbct)) :readers (common-lisp-user::printing-module-cbct) :name common-lisp-user::cbct) (:initform nil :writers ((setf common-lisp-user::printing-module-one-time-tags)) :readers (common-lisp-user::printing-module-one-time-tags) :name common-lisp-user::one-time-tags) (:initform nil :writers ((setf common-lisp-user::printing-module-save-trace)) :readers (common-lisp-user::printing-module-save-trace) :name common-lisp-user::save-trace) (:initform nil :writers ((setf common-lisp-user::printing-module-saved-trace)) :readers (common-lisp-user::printing-module-saved-trace) :name common-lisp-user::saved-trace) :test eq make-hash-table #Y(nil nil nil (26 14 21 15 22 19 2 23 29) #283# #3# 21970) (:allocation :class :initform (make-hash-table :test 'eq) :writers ((setf common-lisp-user::printing-module-event-hook)) :readers (common-lisp-user::printing-module-event-hook) :name common-lisp-user::event-hook) clos::load-defclass)) #3# 21970))
