(#Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ((ftype (function (t) t) common-lisp-user::format-event) proclaim)) #1=#P"C:/Users/Son Pham/Desktop/actr7/framework/meta-process.lisp" 0) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ((ftype (function nil t) common-lisp-user::global-modules-table) proclaim)) #1# 11194) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ((ftype (function nil t) common-lisp-user::max-module-name-length) proclaim)) #1# 11249) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ((ftype (function (t) t) common-lisp-user::delete-model-fct) proclaim)) #1# 11306) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ((ftype (function (t) (values t t)) common-lisp-user::get-abstract-module) proclaim)) #1# 11358) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ((ftype (function nil t) common-lisp-user::all-module-names) proclaim)) #1# 11424) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ((ftype (function (t) t) common-lisp-user::event-displayed-p) proclaim)) #1# 11475) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 6 19 0 3 52 0 15 0 15 4 15 5 19 3 6 15 0 15 7 15 8 15 9 19 4 10 1 0 73 29) #A(t (11) (common-lisp-user::*meta-processes* si::*make-special boundp common-lisp-user::make-meta-processes variable "The table of all defined meta-processes" si::set-documentation ext::location (defvar common-lisp-user::*meta-processes*) (#1# . 11528) ext::annotate)) #1# 11528) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 11 12 14 12 9 1 19 4 13 1 0 73 29) #2=#A(t (14) (common-lisp-user::current-mp ext::location (defmacro common-lisp-user::current-mp) (#1# . 11783) ext::annotate :lambda-list #:g447 #:g446 #:g448 si::dm-too-many-arguments (common-lisp-user::mps-current common-lisp-user::*meta-processes*) #Y(common-lisp-user::current-mp nil nil (24 45 6 24 45 7 26 10 1 5 45 8 10 0 39 6 13 2 19 1 9 1 10 73 29) #2# #1# 11783) t si::fset)) #1# 11783) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 8 12 19 2 9 1 0 73 29) #3=#A(t (10) (common-lisp-user::current-mp-fct ext::location (defun common-lisp-user::current-mp-fct) (#1# . 11843) ext::annotate :lambda-list common-lisp-user::*meta-processes* common-lisp-user::mps-current #Y(common-lisp-user::current-mp-fct nil nil (26 14 6 19 1 7 29) #3# #1# 11843) si::fset)) #1# 11843) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 11 12 19 2 12 1 0 73 29) #4=#A(t (13) (common-lisp-user::get-mp ext::location (defun common-lisp-user::get-mp) (#1# . 11903) ext::annotate :lambda-list (common-lisp-user::mp-name) common-lisp-user::mp-name common-lisp-user::*meta-processes* common-lisp-user::mps-table gethash #Y(common-lisp-user::get-mp nil nil (24 45 7 26 13 0 14 8 19 1 9 12 19 2 10 29) #4# #1# 11903) si::fset)) #1# 11903) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 47 12 19 2 48 15 0 15 49 15 50 19 3 51 1 0 73 29) #5=#A(t (52) (common-lisp-user::reset-mp ext::location (defun common-lisp-user::reset-mp) (#1# . 11978) ext::annotate :lambda-list (common-lisp-user::meta-process) common-lisp-user::meta-process #:g483 #:g484 si::structure-set #:g485 #:g486 #:g487 #:g488 #:g489 #:g490 #:g491 #:g492 #:g493 #:g494 #:g495 #:g496 #:g497 #:g498 #:g499 #:g500 #:g501 #:g502 #:g503 get-internal-real-time #:g504 #:g505 internal-time-units-per-second #:g506 #:g507 common-lisp-user::real-time-slack #:g508 #:g509 1.0 #:g510 #:g511 #:g512 #:g513 #:g514 #:g515 #:g516 #Y(common-lisp-user::reset-mp nil nil (24 45 7 26 10 0 45 8 8 0 45 9 13 1 15 7 9 1 13 0 19 4 10 43 1 43 1 10 0 45 11 75 45 12 13 1 15 7 9 2 13 0 19 4 10 43 1 43 1 10 0 45 13 75 45 14 13 1 15 7 9 3 13 0 19 4 10 43 1 43 1 10 0 45 15 75 45 16 13 1 15 7 9 8 13 0 19 4 10 43 1 43 1 10 0 45 17 75 45 18 13 1 15 7 9 9 13 0 19 4 10 43 1 43 1 10 0 45 19 75 45 20 13 1 15 7 9 10 13 0 19 4 10 43 1 43 1 10 0 45 21 75 45 22 13 1 15 7 9 12 13 0 19 4 10 43 1 43 1 10 0 45 23 75 45 24 13 1 15 7 9 26 13 0 19 4 10 43 1 43 1 10 0 45 25 75 45 26 13 1 15 7 9 27 13 0 19 4 10 43 1 43 1 10 0 45 27 75 45 28 13 1 15 7 9 11 13 0 19 4 10 43 1 43 1 10 0 45 29 1 30 45 31 13 1 15 7 9 16 13 0 19 4 10 43 1 43 1 10 0 45 32 11 33 45 34 13 1 15 7 9 17 13 0 19 4 10 43 1 43 1 10 0 45 35 1 36 45 37 13 1 15 7 9 18 13 0 19 4 10 43 1 43 1 10 0 45 38 1 39 45 40 13 1 15 7 9 19 13 0 19 4 10 43 1 43 1 10 0 45 41 75 45 42 13 1 15 7 9 20 13 0 19 4 10 43 1 43 1 10 0 45 43 75 45 44 13 1 15 7 9 21 13 0 19 4 10 43 1 43 1 10 0 45 45 8 0 45 46 13 1 15 7 9 29 13 0 19 4 10 43 1 43 1 29) #5# #1# 11978) si::fset function "Set a meta-process to time 0 and clear the events" si::set-documentation)) #1# 11978) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 17 12 14 18 9 2 19 4 19 1 0 73 29) #6=#A(t (20) (common-lisp-user::verify-current-mp ext::location (defmacro common-lisp-user::verify-current-mp) (#1# . 13055) ext::annotate :lambda-list (warning &body common-lisp-user::body) #:g518 #:g517 #:g519 si::dm-too-few-arguments warning common-lisp-user::body if (null (common-lisp-user::mps-current common-lisp-user::*meta-processes*)) common-lisp-user::print-warning progn #Y(common-lisp-user::verify-current-mp nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 45 12 15 13 15 14 15 15 10 1 6 2 12 15 16 10 0 7 2 6 4 73 29) #6# #1# 13055) t si::fset)) #1# 13055) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 20 12 19 2 21 15 0 15 22 15 23 19 3 24 1 0 73 29) #7=#A(t (25) (common-lisp-user::mp-time ext::location (defun common-lisp-user::mp-time) (#1# . 13600) ext::annotate :lambda-list common-lisp-user::*meta-processes* common-lisp-user::mps-current *error-output* #8="~&#|Warning~:[~*~;~@[ (in model ~a)~]~]: ~@? |#~%" common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "mp-time called with no current meta-process." format finish-output common-lisp-user::meta-p-time common-lisp-user::ms->seconds #Y(common-lisp-user::mp-time nil nil (26 14 6 19 1 7 76 39 42 14 8 15 9 19 0 10 73 39 12 19 0 11 16 12 12 9 1 19 2 13 12 19 0 14 12 15 15 19 5 16 12 14 8 19 1 17 22 73 38 14 14 6 19 1 7 12 19 1 18 12 19 1 19 29) #7# #1# 13600) si::fset function "returns the current time of the current meta-process in seconds" si::set-documentation)) #1# 13600) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 19 12 19 2 20 15 0 15 21 15 22 19 3 23 1 0 73 29) #9=#A(t (24) (common-lisp-user::mp-time-ms ext::location (defun common-lisp-user::mp-time-ms) (#1# . 13806) ext::annotate :lambda-list common-lisp-user::*meta-processes* common-lisp-user::mps-current *error-output* #8# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "mp-time-ms called with no current meta-process." format finish-output common-lisp-user::meta-p-time #Y(common-lisp-user::mp-time-ms nil nil (26 14 6 19 1 7 76 39 42 14 8 15 9 19 0 10 73 39 12 19 0 11 16 12 12 9 1 19 2 13 12 19 0 14 12 15 15 19 5 16 12 14 8 19 1 17 22 73 38 10 14 6 19 1 7 12 19 1 18 29) #9# #1# 13806) si::fset function "returns the current time of the current meta-process in milliseconds" si::set-documentation)) #1# 13806) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 60 12 19 2 61 1 0 73 29) #10=#A(t (62) (common-lisp-user::mp-real-time-management ext::location (defun common-lisp-user::mp-real-time-management) (#1# . 14008) ext::annotate :lambda-list (&key (common-lisp-user::time-function 'get-internal-real-time) (common-lisp-user::units-per-second internal-time-units-per-second) (common-lisp-user::scale #11=1.0) (common-lisp-user::slack-function 'common-lisp-user::real-time-slack) (common-lisp-user::max-time-delta nil) (common-lisp-user::delta-maintenance nil) (common-lisp-user::allow-dynamics nil)) (nil :allow-dynamics :delta-maintenance :max-time-delta :slack-function :scale :units-per-second :time-function) get-internal-real-time common-lisp-user::time-function internal-time-units-per-second common-lisp-user::units-per-second #11# common-lisp-user::scale common-lisp-user::real-time-slack common-lisp-user::slack-function common-lisp-user::max-time-delta common-lisp-user::delta-maintenance common-lisp-user::allow-dynamics common-lisp-user::*meta-processes* common-lisp-user::mps-current *error-output* #8# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "mp-real-time-management called with no current meta-process." format finish-output common-lisp-user::fctornil "Time-function ~s not a valid function for mp-real-time-management" common-lisp-user::posnum "Units-per-second ~s must be a positive number" "Slack-function ~s not a valid function for mp-real-time-management" common-lisp-user::posnumornil "Max-time-delta ~s is not a positive number or nil" "Scale ~s is not a positive number" common-lisp-user::meta-p-running "Mp-real-time-management cannot adjust real-time operation while the model is running." #:g534 #:g535 common-lisp-user::meta-process si::structure-set #:g536 #:g537 #:g538 #:g539 #:g540 #:g541 #:g542 #:g543 #:g544 #:g545 #:g546 numberp common-lisp-user::safe-seconds->ms #:g547 t #Y(common-lisp-user::mp-real-time-management nil nil (28 7 22 40 3 15 8 46 9 22 40 3 14 10 46 11 22 40 3 15 12 46 13 22 40 3 15 14 46 15 22 40 2 77 46 16 22 40 2 77 46 17 22 40 2 77 46 18 14 19 19 1 20 76 39 42 14 21 15 22 19 0 23 73 39 12 19 0 24 16 25 12 9 1 19 2 26 12 19 0 27 12 15 28 19 5 29 12 14 21 19 1 30 22 73 38 516 10 6 39 6 13 6 19 1 31 76 39 44 14 21 15 22 19 0 23 73 39 12 19 0 24 16 25 12 9 1 19 2 26 12 19 0 27 12 15 32 13 6 19 6 29 12 14 21 19 1 30 22 73 38 461 13 5 19 1 33 76 39 44 14 21 15 22 19 0 23 73 39 12 19 0 24 16 25 12 9 1 19 2 26 12 19 0 27 12 15 34 13 5 19 6 29 12 14 21 19 1 30 22 73 38 410 10 3 39 6 13 3 19 1 31 76 39 44 14 21 15 22 19 0 23 73 39 12 19 0 24 16 25 12 9 1 19 2 26 12 19 0 27 12 15 35 13 3 19 6 29 12 14 21 19 1 30 22 73 38 355 13 2 19 1 36 76 39 44 14 21 15 22 19 0 23 73 39 12 19 0 24 16 25 12 9 1 19 2 26 12 19 0 27 12 15 37 13 2 19 6 29 12 14 21 19 1 30 22 73 38 304 13 4 19 1 33 76 39 44 14 21 15 22 19 0 23 73 39 12 19 0 24 16 25 12 9 1 19 2 26 12 19 0 27 12 15 38 13 4 19 6 29 12 14 21 19 1 30 22 73 38 253 14 19 19 1 20 12 19 1 39 39 42 14 21 15 22 19 0 23 73 39 12 19 0 24 16 25 12 9 1 19 2 26 12 19 0 27 12 15 40 19 5 29 12 14 21 19 1 30 22 73 38 201 14 19 19 1 20 45 41 10 1 45 42 13 1 15 43 9 11 13 0 19 4 44 43 1 43 1 14 19 19 1 20 45 45 10 7 45 46 13 1 15 43 9 16 13 0 19 4 44 43 1 43 1 14 19 19 1 20 45 47 10 6 45 48 13 1 15 43 9 17 13 0 19 4 44 43 1 43 1 14 19 19 1 20 45 49 10 4 45 50 13 1 15 43 9 18 13 0 19 4 44 43 1 43 1 14 19 19 1 20 45 51 10 5 45 52 13 1 15 43 9 19 13 0 19 4 44 43 1 43 1 14 19 19 1 20 45 53 10 2 45 54 13 1 15 43 9 21 13 0 19 4 44 43 1 43 1 14 19 19 1 20 45 55 10 3 16 56 39 10 13 3 15 0 19 2 57 38 3 10 3 45 58 13 1 15 43 9 20 13 0 19 4 44 43 1 43 1 11 59 73 29) #10# #1# 14008) si::fset)) #1# 14008) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 18 12 19 2 19 15 0 15 20 15 21 19 3 22 1 0 73 29) #12=#A(t (23) (common-lisp-user::mp-models ext::location (defun common-lisp-user::mp-models) (#1# . 16012) ext::annotate :lambda-list common-lisp-user::*meta-processes* common-lisp-user::mps-current *error-output* #8# common-lisp-user::current-mp-fct length > common-lisp-user::current-model "mp-models called with no current meta-process." format finish-output common-lisp-user::meta-p-model-order #Y(common-lisp-user::mp-models nil nil (26 14 6 19 1 7 76 39 42 14 8 15 9 19 0 10 73 39 12 19 0 0 16 11 12 9 1 19 2 12 12 19 0 13 12 15 14 19 5 15 12 14 8 19 1 16 22 73 38 10 14 6 19 1 7 12 19 1 17 29) #12# #1# 16012) si::fset function "returns a list of the names of all the models in the current meta-process" si::set-documentation)) #1# 16012) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 9 12 19 2 10 1 0 73 29) #13=#A(t (11) (common-lisp-user::meta-process-names ext::location (defun common-lisp-user::meta-process-names) (#1# . 16230) ext::annotate :lambda-list common-lisp-user::*meta-processes* common-lisp-user::mps-table common-lisp-user::hash-table-keys #Y(common-lisp-user::meta-process-names nil nil (26 14 6 19 1 7 12 19 1 8 29) #13# #1# 16230) si::fset)) #1# 16230) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 29 12 19 2 30 1 0 73 29) #14=#A(t (31) (common-lisp-user::mp-show-queue ext::location (defun common-lisp-user::mp-show-queue) (#1# . 16310) ext::annotate :lambda-list (&optional common-lisp-user::indicate-traced) common-lisp-user::indicate-traced common-lisp-user::*meta-processes* common-lisp-user::mps-current *error-output* #8# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "mp-show-queue called with no current meta-process." format finish-output common-lisp-user::meta-p-events common-lisp-user::events t "Events in the queue:~%" si::%dolist-var common-lisp-user::evt "~:[~*~;~:[ ~;*~]~]~A~%" common-lisp-user::event-displayed-p common-lisp-user::format-event #Y(common-lisp-user::mp-show-queue nil nil (25 40 2 77 46 7 26 14 8 19 1 9 76 39 42 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 17 19 5 18 12 14 10 19 1 19 22 73 38 74 14 8 19 1 9 12 19 1 20 45 21 14 22 15 23 19 2 18 10 0 45 24 75 45 25 38 32 10 1 4 51 0 14 22 15 26 13 3 13 0 19 1 27 12 13 0 19 1 28 12 19 5 18 10 1 5 51 1 10 1 40 -34 75 51 0 10 2 16 14 43 2 43 1 29) #14# #1# 16310) si::fset)) #1# 16310) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 20 12 19 2 21 1 0 73 29) #15=#A(t (22) (common-lisp-user::mp-queue-count ext::location (defun common-lisp-user::mp-queue-count) (#1# . 16677) ext::annotate :lambda-list common-lisp-user::*meta-processes* common-lisp-user::mps-current *error-output* #8# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "mp-show-queue called with no current meta-process." format finish-output common-lisp-user::meta-p-events common-lisp-user::events #Y(common-lisp-user::mp-queue-count nil nil (26 14 6 19 1 7 76 39 42 14 8 15 9 19 0 10 73 39 12 19 0 11 16 12 12 9 1 19 2 13 12 19 0 14 12 15 15 19 5 16 12 14 8 19 1 17 22 73 38 18 14 6 19 1 7 12 19 1 18 45 19 10 0 16 12 43 1 29) #15# #1# 16677) si::fset)) #1# 16677) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 26 12 19 2 27 1 0 73 29) #16=#A(t (28) (common-lisp-user::mp-show-waiting ext::location (defun common-lisp-user::mp-show-waiting) (#1# . 16854) ext::annotate :lambda-list common-lisp-user::*meta-processes* common-lisp-user::mps-current *error-output* #8# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "mp-show-waiting called with no current meta-process." format finish-output common-lisp-user::meta-p-delayed common-lisp-user::events t "Events waiting to be scheduled:~%" si::%dolist-var common-lisp-user::evt "~A~%" common-lisp-user::format-event #Y(common-lisp-user::mp-show-waiting nil nil (26 14 6 19 1 7 76 39 42 14 8 15 9 19 0 10 73 39 12 19 0 11 16 12 12 9 1 19 2 13 12 19 0 14 12 15 15 19 5 16 12 14 8 19 1 17 22 73 38 66 14 6 19 1 7 12 19 1 18 45 19 14 20 15 21 19 2 16 10 0 45 22 75 45 23 38 24 10 1 4 51 0 14 20 15 24 13 0 19 1 25 12 19 3 16 10 1 5 51 1 10 1 40 -26 75 51 0 10 2 16 12 43 2 43 1 29) #16# #1# 16854) si::fset)) #1# 16854) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 30 12 19 2 31 1 0 73 29) #17=#A(t (32) (common-lisp-user::mp-modules-events ext::location (defun common-lisp-user::mp-modules-events) (#1# . 17156) ext::annotate :lambda-list (common-lisp-user::module) common-lisp-user::module common-lisp-user::*meta-processes* common-lisp-user::mps-current *error-output* #8# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "mp-modules-events called with no current meta-process." format finish-output common-lisp-user::events common-lisp-user::meta-p-events si::%dolist-var common-lisp-user::evt common-lisp-user::evt-module eq #:g559 nconc common-lisp-user::meta-p-delayed #:g563 #Y(common-lisp-user::mp-modules-events nil nil (24 45 7 26 14 8 19 1 9 76 39 42 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 17 19 5 18 12 14 10 19 1 19 22 73 38 129 75 45 20 14 8 19 1 9 12 19 1 21 45 22 75 45 23 38 39 10 1 4 51 0 13 3 13 0 19 1 24 17 25 39 18 10 0 6 1 45 26 13 3 13 0 19 2 27 51 3 43 1 10 1 5 51 1 10 1 40 -41 43 2 14 8 19 1 9 12 19 1 28 45 22 75 45 23 38 39 10 1 4 51 0 13 3 13 0 19 1 24 17 25 39 18 10 0 6 1 45 29 13 3 13 0 19 2 27 51 3 43 1 10 1 5 51 1 10 1 40 -41 43 2 10 0 73 43 1 29) #17# #1# 17156) si::fset)) #1# 17156) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 27 12 19 2 28 1 0 73 29) #18=#A(t (29) (common-lisp-user::mp-print-versions ext::location (defun common-lisp-user::mp-print-versions) (#1# . 17573) ext::annotate :lambda-list t "ACT-R ~a Version Information:~%~va: ~10a ~a~%" common-lisp-user::*actr-architecture-version* common-lisp-user::max-module-name-length max "Software" common-lisp-user::default common-lisp-user::*meta-processes* common-lisp-user::mps-table gethash common-lisp-user::meta-p-version common-lisp-user::meta-p-documentation format common-lisp-user::all-module-names si::%dolist-var common-lisp-user::name common-lisp-user::get-abstract-module common-lisp-user::module "~va: ~10a ~a~%" common-lisp-user::act-r-module-version common-lisp-user::act-r-module-documentation #Y(common-lisp-user::mp-print-versions nil nil (26 14 6 15 7 14 8 19 0 9 12 9 10 19 2 10 12 15 11 15 12 14 13 19 1 14 12 19 2 15 12 19 1 16 12 15 12 14 13 19 1 14 12 19 2 15 12 19 1 17 12 19 7 18 19 0 19 45 20 75 45 21 38 51 10 1 4 51 0 13 0 19 1 22 45 23 14 6 15 24 19 0 9 12 9 10 19 2 10 12 13 1 13 0 19 1 25 12 13 0 19 1 26 12 19 6 18 43 1 10 1 5 51 1 10 1 40 -53 75 73 43 2 29) #18# #1# 17573) si::fset)) #1# 17573) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 15 12 14 16 9 2 19 4 17 1 0 73 29) #19=#A(t (18) (common-lisp-user::define-meta-process ext::location (defmacro common-lisp-user::define-meta-process) (#1# . 18150) ext::annotate :lambda-list (common-lisp-user::mp-name) #:g565 #:g564 #:g566 si::dm-too-few-arguments common-lisp-user::mp-name si::dm-too-many-arguments common-lisp-user::define-meta-process-fct quote #Y(common-lisp-user::define-meta-process nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 39 6 13 3 19 1 12 15 13 15 14 10 0 6 2 6 2 73 29) #19# #1# 18150) t si::fset)) #1# 18150) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 44 12 19 2 45 1 0 73 29) #20=#A(t (46) (common-lisp-user::define-meta-process-fct ext::location (defun common-lisp-user::define-meta-process-fct) (#1# . 18245) ext::annotate :lambda-list (common-lisp-user::mp-name) common-lisp-user::mp-name symbolp *error-output* #8# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "~S is not a symbol and thus not valid as a meta-process name." format finish-output common-lisp-user::*meta-processes* common-lisp-user::mps-table gethash "There is already a meta-process named ~S." common-lisp-user::res common-lisp-user::key common-lisp-user::val common-lisp-user::meta-p-running t #Y(nil nil nil (24 45 24 24 45 25 26 13 0 19 1 26 73 39 6 11 27 51 2 73 29) #20# #1# 18245) maphash "Cannot create a new meta-process while there is a running meta-process." :name common-lisp-user::make-meta-process common-lisp-user::mp si::hash-set #:g580 #:g582 common-lisp-user::mps-count + #:g581 common-lisp-user::meta-processes si::structure-set #:g583 #:g584 #Y(common-lisp-user::define-meta-process-fct nil nil (24 45 7 26 10 0 16 8 76 39 44 14 9 15 10 19 0 11 73 39 12 19 0 12 16 13 12 9 1 19 2 14 12 19 0 15 12 15 16 13 0 19 6 17 12 14 9 19 1 18 22 73 38 200 13 0 14 19 19 1 20 12 19 2 21 39 44 14 9 15 10 19 0 11 73 39 12 19 0 12 16 13 12 9 1 19 2 14 12 19 0 15 12 15 22 13 0 19 6 17 12 14 9 19 1 18 22 73 38 144 75 45 23 34 28 12 14 19 19 1 20 17 29 10 0 43 1 39 42 14 9 15 10 19 0 11 73 39 12 19 0 12 16 13 12 9 1 19 2 14 12 19 0 15 12 15 30 19 5 17 12 14 9 19 1 18 22 73 38 84 14 31 13 0 19 2 32 45 33 13 1 14 19 19 1 20 12 13 0 19 3 34 11 19 45 35 8 1 45 36 13 1 19 1 37 12 13 0 19 2 38 45 39 13 2 15 40 9 1 13 0 19 4 41 43 3 11 19 45 42 75 45 43 13 1 15 40 9 2 13 0 19 4 41 43 1 43 1 10 1 73 43 1 29) #20# #1# 18245) si::fset)) #1# 18245) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 15 12 14 16 9 2 19 4 17 1 0 73 29) #21=#A(t (18) (common-lisp-user::delete-meta-process ext::location (defmacro common-lisp-user::delete-meta-process) (#1# . 19155) ext::annotate :lambda-list (common-lisp-user::mp-name) #:g586 #:g585 #:g587 si::dm-too-few-arguments common-lisp-user::mp-name si::dm-too-many-arguments common-lisp-user::delete-meta-process-fct quote #Y(common-lisp-user::delete-meta-process nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 39 6 13 3 19 1 12 15 13 15 14 10 0 6 2 6 2 73 29) #21# #1# 19155) t si::fset)) #1# 19155) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 48 12 19 2 49 1 0 73 29) #22=#A(t (50) (common-lisp-user::delete-meta-process-fct ext::location (defun common-lisp-user::delete-meta-process-fct) (#1# . 19239) ext::annotate :lambda-list (common-lisp-user::mp-name) common-lisp-user::mp-name common-lisp-user::default eql *error-output* #8# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "Cannot delete the default meta-process." format finish-output common-lisp-user::*meta-processes* common-lisp-user::mps-table gethash common-lisp-user::mps-current common-lisp-user::previous-mp #:g597 #:g598 common-lisp-user::meta-processes si::structure-set common-lisp-user::key common-lisp-user::model common-lisp-user::delete-model-fct #Y(nil nil nil (24 45 29 24 45 30 26 13 1 19 1 31 29) #22# #1# 19239) common-lisp-user::meta-p-models maphash remhash #:g599 #:g601 common-lisp-user::mps-count - #:g600 = #:g602 #:g603 #:g604 #:g605 t "~S does not name a meta-process." #Y(common-lisp-user::delete-meta-process-fct nil nil (24 45 7 26 13 0 1 8 17 9 39 42 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 17 19 5 18 12 14 10 19 1 19 22 73 38 234 13 0 14 20 19 1 21 12 19 2 22 39 180 14 20 19 1 23 45 24 11 20 45 25 13 2 14 20 19 1 21 12 19 2 22 45 26 13 1 15 27 9 2 13 0 19 4 28 43 1 43 1 34 32 12 13 1 14 20 19 1 21 12 19 2 22 12 19 1 33 17 34 13 1 14 20 19 1 21 17 35 11 20 45 36 8 1 45 37 13 1 19 1 38 12 13 0 19 2 39 45 40 13 2 15 27 9 1 13 0 19 4 28 43 3 9 1 14 20 19 1 38 12 19 2 41 39 35 11 20 45 42 15 8 14 20 19 1 21 12 19 2 22 45 43 13 1 15 27 9 2 13 0 19 4 28 43 1 43 1 38 24 11 20 45 44 10 1 45 45 13 1 15 27 9 2 13 0 19 4 28 43 1 43 1 11 46 73 43 1 38 42 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 47 13 0 19 6 18 12 14 10 19 1 19 22 73 29) #22# #1# 19239) si::fset)) #1# 19239) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 29 12 14 30 9 2 19 4 31 1 0 73 29) #23=#A(t (32) (common-lisp-user::with-meta-process ext::location (defmacro common-lisp-user::with-meta-process) (#1# . 20221) ext::annotate :lambda-list (common-lisp-user::mp-name &body common-lisp-user::body) #:g607 #:g606 #:g608 si::dm-too-few-arguments common-lisp-user::mp-name common-lisp-user::body gensym common-lisp-user::old-mp common-lisp-user::mp let gethash quote (common-lisp-user::mps-table common-lisp-user::*meta-processes*) if (common-lisp-user::current-mp) setf (common-lisp-user::mps-current common-lisp-user::*meta-processes*) unwind-protect progn (common-lisp-user::mps-current common-lisp-user::*meta-processes*) common-lisp-user::print-warning "No actions taken in with-meta-process because ~S does not name a meta-process" #Y(common-lisp-user::with-meta-process nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 45 12 19 0 13 12 19 0 13 12 46 14 46 15 15 16 13 0 15 17 15 18 10 3 6 2 12 1 19 6 3 6 2 6 1 12 15 20 13 0 15 16 13 1 1 21 6 2 6 1 12 15 22 15 23 10 0 6 3 12 15 24 15 25 10 2 7 2 12 15 22 15 26 10 1 6 3 6 3 6 4 12 15 27 15 28 15 18 10 3 6 2 6 3 6 4 6 3 73 43 2 29) #23# #1# 20221) t si::fset)) #1# 20221) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 30 12 14 31 9 2 19 4 32 1 0 73 29) #24=#A(t (33) (common-lisp-user::with-meta-process-eval ext::location (defmacro common-lisp-user::with-meta-process-eval) (#1# . 20791) ext::annotate :lambda-list (common-lisp-user::mp-name &body common-lisp-user::body) #:g610 #:g609 #:g611 si::dm-too-few-arguments common-lisp-user::mp-name common-lisp-user::body gensym common-lisp-user::m common-lisp-user::old-mp common-lisp-user::mp let* gethash (common-lisp-user::mps-table common-lisp-user::*meta-processes*) if let (common-lisp-user::current-mp) setf (common-lisp-user::mps-current common-lisp-user::*meta-processes*) unwind-protect progn (common-lisp-user::mps-current common-lisp-user::*meta-processes*) common-lisp-user::print-warning "No actions taken in with-meta-process-eval because ~S does not name a meta-process" #Y(common-lisp-user::with-meta-process-eval nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 45 12 19 0 13 12 19 0 13 12 19 0 13 12 46 14 46 15 46 16 15 17 13 2 10 4 6 2 12 13 0 15 18 13 2 1 19 6 3 6 2 6 2 12 15 20 13 0 15 21 13 1 1 22 6 2 6 1 12 15 23 15 24 10 0 6 3 12 15 25 15 26 10 3 7 2 12 15 23 15 27 10 1 6 3 6 3 6 4 12 15 28 15 29 10 2 6 3 6 4 6 3 73 43 3 29) #24# #1# 20791) t si::fset)) #1# 20791) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 35 12 19 2 36 1 0 73 29) #25=#A(t (37) (common-lisp-user::with-meta-process-fct ext::location (defun common-lisp-user::with-meta-process-fct) (#1# . 21380) ext::annotate :lambda-list (common-lisp-user::mp-name common-lisp-user::forms-list) common-lisp-user::mp-name common-lisp-user::forms-list common-lisp-user::*meta-processes* common-lisp-user::mps-table gethash common-lisp-user::with-mp common-lisp-user::mps-current common-lisp-user::val common-lisp-user::previous-mp #:g618 #:g619 common-lisp-user::meta-processes si::structure-set si::%dolist-var common-lisp-user::x eval #:g622 #:g623 *error-output* #8# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "No actions taken in with-meta-process-fct because ~S does not name a meta-process" format finish-output #Y(common-lisp-user::with-meta-process-fct nil nil (24 45 7 24 45 8 26 13 1 14 9 19 1 10 12 19 2 11 45 12 10 0 39 103 14 9 19 1 13 12 77 46 14 46 15 11 9 45 16 10 3 45 17 13 1 15 18 9 2 13 0 19 4 19 43 1 43 1 64 39 10 3 45 20 75 45 21 38 17 10 1 4 51 0 10 0 16 22 51 3 10 1 5 51 1 10 1 40 -19 75 51 0 10 3 73 43 2 65 11 9 45 23 10 1 45 24 13 1 15 18 9 2 13 0 19 4 19 43 1 43 1 66 43 2 38 42 14 25 15 26 19 0 27 73 39 12 19 0 28 16 29 12 9 1 19 2 30 12 19 0 31 12 15 32 13 2 19 6 33 12 14 25 19 1 34 22 73 43 1 29) #25# #1# 21380) si::fset)) #1# 21380) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 9 12 19 2 10 1 0 73 29) #26=#A(t (11) (common-lisp-user::current-meta-process ext::location (defun common-lisp-user::current-meta-process) (#1# . 21951) ext::annotate :lambda-list common-lisp-user::*meta-processes* common-lisp-user::mps-current common-lisp-user::meta-p-name #Y(common-lisp-user::current-meta-process nil nil (26 14 6 19 1 7 73 39 10 14 6 19 1 7 12 19 1 8 29) #26# #1# 21951) si::fset)) #1# 21951) #Y(si::bytecodes nil nil (15 0 19 1 1 29) #A(t (2) (common-lisp-user::default common-lisp-user::define-meta-process-fct)) #1# 22038) #Y(si::bytecodes nil nil (11 0 45 1 15 2 14 0 19 1 3 12 19 2 4 45 5 13 1 15 6 9 2 13 0 19 4 7 43 1 43 1 29) #A(t (8) (common-lisp-user::*meta-processes* #:g624 common-lisp-user::default common-lisp-user::mps-table gethash #:g625 common-lisp-user::meta-processes si::structure-set)) #1# 22070))
