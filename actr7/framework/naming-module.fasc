(#Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 11 14 3 33 4 12 19 2 5 52 0 15 0 15 6 15 7 15 8 19 4 9 1 0 73 29) #A(t (10) (common-lisp-user::*global-names-table* si::*make-special boundp :test equal make-hash-table ext::location (defvar common-lisp-user::*global-names-table*) (#1=#P"C:/Users/Son Pham/Desktop/actr7/framework/naming-module.lisp" . 0) ext::annotate)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 11 14 3 33 4 12 19 2 5 52 0 15 0 15 6 15 7 15 8 19 4 9 1 0 73 29) #A(t (10) (common-lisp-user::*global-symbols-table* si::*make-special boundp :test equal make-hash-table ext::location (defvar common-lisp-user::*global-symbols-table*) (#1# . 6715) ext::annotate)) #1# 6715) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 15 4 15 5 15 6 15 7 15 8 15 9 15 10 19 10 11 17 12 15 0 15 13 15 14 15 15 19 4 16 1 0 73 29) #A(t (17) (common-lisp-user::*naming-module-num-vector* #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9 vector si::*make-constant ext::location (defconstant common-lisp-user::*naming-module-num-vector*) (#1# . 6780) ext::annotate)) #1# 6780) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 29 12 19 2 30 1 0 73 29) #2=#A(t (31) (common-lisp-user::fast-num->string ext::location (defun common-lisp-user::fast-num->string) (#1# . 6871) ext::annotate :lambda-list (common-lisp-user::n) common-lisp-user::n < zerop "0" "1" = "2" "3" common-lisp-user::s rem floor > length make-string common-lisp-user::s2 si::%dotimes-var common-lisp-user::i common-lisp-user::*naming-module-num-vector* #:g7083 aref si::aset 1+ #Y(common-lisp-user::fast-num->string nil nil (24 45 7 26 13 0 9 4 19 2 8 39 45 13 0 9 2 19 2 8 39 17 10 0 16 9 39 6 1 10 73 38 4 1 11 73 38 18 13 0 9 2 19 2 12 39 6 1 13 73 38 4 1 14 73 38 116 77 77 46 15 46 16 38 20 13 2 9 10 19 2 17 51 2 55 0 1 13 0 10 1 3 51 1 13 2 9 0 19 2 18 76 39 -28 10 1 16 19 12 19 1 20 45 21 10 2 16 19 45 22 8 0 45 23 38 39 13 2 13 0 14 24 10 4 45 25 10 0 4 12 10 0 5 51 0 10 0 51 5 43 1 19 2 26 12 19 3 27 10 0 16 28 51 0 13 0 13 1 19 2 8 40 -46 43 2 10 0 73 43 1 43 2 29) #2# #1# 6871) si::fset)) #1# 6871) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 2 77 77 15 6 19 15 7 15 0 15 8 15 9 15 10 19 4 11 15 12 15 8 15 13 15 14 19 4 11 15 12 14 15 77 15 16 19 4 11 15 0 19 1 24 78 20 15 12 1 22 12 19 2 23 1 0 73 29) #3=#A(t (25) (common-lisp-user::act-r-name "ACT-R-NAME-" ((common-lisp-user::next-name 0) common-lisp-user::used-symbols) ((common-lisp-user::next-name 0 t nil 0 nil) (common-lisp-user::used-symbols nil t nil 1 nil)) common-lisp-user::copy-act-r-name (common-lisp-user::make-act-r-name) common-lisp-user::act-r-name-p si::define-structure ext::location (defstruct common-lisp-user::act-r-name) (#1# . 7332) ext::annotate common-lisp-user::make-act-r-name (defun common-lisp-user::make-act-r-name) (#1# . 7332) :lambda-list (&key (#4=#:next-name 0) #5=#:used-symbols) (nil :used-symbols :next-name) #4# #5# 0 si::make-structure #Y(common-lisp-user::make-act-r-name nil nil (28 17 22 40 3 9 0 46 18 22 40 2 77 46 19 15 20 13 1 13 0 19 3 21 29) #3# #1# 7332) si::fset find-class)) #1# 7332) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 5 77 77 15 6 19 15 7 15 0 15 8 15 9 15 10 19 4 11 15 12 15 8 15 13 15 14 19 4 11 15 12 14 15 77 15 16 19 4 11 15 0 19 1 30 78 26 15 12 1 28 12 19 2 29 1 0 73 29) #6=#A(t (31) (common-lisp-user::naming-module "NAMING-MODULE-" (common-lisp-user::model common-lisp-user::ncnar common-lisp-user::dcnn common-lisp-user::hook (common-lisp-user::table #7=(make-hash-table :test #'equal))) ((common-lisp-user::model nil t nil 0 nil) (common-lisp-user::ncnar nil t nil 1 nil) (common-lisp-user::dcnn nil t nil 2 nil) (common-lisp-user::hook nil t nil 3 nil) (common-lisp-user::table #7# t nil 4 nil)) common-lisp-user::copy-naming-module (common-lisp-user::make-naming-module) common-lisp-user::naming-module-p si::define-structure ext::location (defstruct common-lisp-user::naming-module) (#1# . 7384) ext::annotate common-lisp-user::make-naming-module (defun common-lisp-user::make-naming-module) (#1# . 7384) :lambda-list (&key #8=#:model #9=#:ncnar #10=#:dcnn #11=#:hook (#12=#:table (make-hash-table :test #'equal))) (nil :table :hook :dcnn :ncnar :model) #8# #9# #10# #11# :test equal make-hash-table #12# 0 si::make-structure #Y(common-lisp-user::make-naming-module nil nil (28 17 22 40 2 77 46 18 22 40 2 77 46 19 22 40 2 77 46 20 22 40 2 77 46 21 22 40 10 14 22 33 23 12 19 2 24 12 46 25 15 26 13 4 13 3 13 2 13 1 13 0 19 6 27 29) #6# #1# 7384) si::fset find-class)) #1# 7384) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 10 12 19 2 11 1 0 73 29) #13=#A(t (12) (common-lisp-user::create-naming-module ext::location (defun common-lisp-user::create-naming-module) (#1# . 7473) ext::annotate :lambda-list (common-lisp-user::model-name) common-lisp-user::model-name :model common-lisp-user::make-naming-module #Y(common-lisp-user::create-naming-module nil nil (24 45 7 26 14 8 13 0 19 2 9 29) #13# #1# 7473) si::fset)) #1# 7473) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 40 12 19 2 41 1 0 73 29) #14=#A(t (42) (common-lisp-user::reset-naming-module ext::location (defun common-lisp-user::reset-naming-module) (#1# . 7557) ext::annotate :lambda-list (common-lisp-user::name-module) common-lisp-user::name-module common-lisp-user::naming-module-model common-lisp-user::naming-module-table common-lisp-user::table common-lisp-user::m-name common-lisp-user::base common-lisp-user::val common-lisp-user::act-r-name-next-name si::%dotimes-var common-lisp-user::i string common-lisp-user::fast-num->string concatenate symbol-name common-lisp-user::*global-names-table* gethash t eq find remove intern symbol unintern remhash si::hash-set 1+ < common-lisp-user::act-r-name-used-symbols si::%dolist-var common-lisp-user::x "-" #Y(nil nil nil (24 45 12 24 45 13 26 13 0 19 1 14 45 15 8 0 45 16 38 100 15 17 13 3 13 0 19 1 18 12 19 3 19 45 20 13 0 14 21 19 2 22 45 13 10 0 39 17 13 0 11 23 17 24 76 39 8 13 6 13 0 19 2 25 39 46 13 6 13 0 19 2 26 51 0 10 0 76 39 23 13 1 19 1 27 45 28 13 0 19 1 29 13 2 11 21 17 30 43 1 38 10 13 1 14 21 13 0 19 3 31 43 2 10 0 16 32 51 0 13 0 13 1 19 2 33 40 -107 43 2 13 0 19 1 34 45 35 75 45 36 38 39 10 1 4 51 0 15 17 13 3 15 37 13 0 19 1 18 12 19 4 19 12 19 1 27 45 28 13 0 19 1 29 43 1 10 1 5 51 1 10 1 40 -41 43 2 13 1 10 3 17 30 29) #14# #1# 7557) maphash #Y(common-lisp-user::reset-naming-module nil nil (24 45 7 26 13 0 19 1 8 12 13 0 19 1 9 12 46 10 46 11 34 38 12 10 1 17 39 43 2 29) #14# #1# 7557) si::fset)) #1# 7557) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 70 12 19 2 71 1 0 73 29) #15=#A(t (72) (common-lisp-user::params-naming-module ext::location (defun common-lisp-user::params-naming-module) (#1# . 8750) ext::annotate :lambda-list (common-lisp-user::module common-lisp-user::param) common-lisp-user::module common-lisp-user::param consp :ncnar common-lisp-user::*meta-processes* common-lisp-user::mps-current common-lisp-user::meta-p-current-model #:g7130 #:g7131 common-lisp-user::act-r-model si::structure-set #:g7132 #:g7133 delete eq #:g7134 t #:g7135 #:g7136 #:g7137 #:g7138 #:g7139 #:g7140 #:g7141 #:g7142 #:g7143 common-lisp-user::naming-module :dcnn #:g7144 #:g7145 #:g7146 #:g7147 :dcsc-hook common-lisp-user::naming-module-hook member *error-output* #16="~&#|Warning~:[~*~;~@[ (in model ~a)~]~]: ~@? |#~%" common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "Setting parameter ~s failed because ~s already on the hook." :dcnn-hook format finish-output #:g7150 #:g7148 #:g7149 #:g7153 #:g7151 common-lisp-user::act-r-model-dynamic-update-hooks #:g7152 #:g7154 #:g7155 #:g7156 #:g7157 :short-copy-names #:g7158 #:g7159 common-lisp-user::naming-module-ncnar common-lisp-user::naming-module-dcnn common-lisp-user::act-r-model-short-copy-names #Y(common-lisp-user::params-naming-module nil nil (24 45 7 24 45 8 26 10 0 16 9 39 596 10 0 4 42 10 266 10 0 5 76 39 75 14 11 19 1 12 39 10 14 11 19 1 12 12 19 1 13 45 14 75 45 15 13 1 15 16 9 7 13 0 19 4 17 43 1 43 1 14 11 19 1 12 39 10 14 11 19 1 12 12 19 1 13 45 18 75 45 19 13 1 15 16 9 9 13 0 19 4 17 43 1 43 1 38 160 10 0 5 12 1 20 17 21 39 77 14 11 19 1 12 39 10 14 11 19 1 12 12 19 1 13 45 22 11 23 45 24 13 1 15 16 9 7 13 0 19 4 17 43 1 43 1 14 11 19 1 12 39 10 14 11 19 1 12 12 19 1 13 45 25 11 23 45 26 13 1 15 16 9 9 13 0 19 4 17 43 1 43 1 38 74 14 11 19 1 12 39 10 14 11 19 1 12 12 19 1 13 45 27 11 23 45 28 13 1 15 16 9 7 13 0 19 4 17 43 1 43 1 14 11 19 1 12 39 10 14 11 19 1 12 12 19 1 13 45 29 75 45 30 13 1 15 16 9 9 13 0 19 4 17 43 1 43 1 10 1 45 31 10 1 5 45 32 13 1 15 33 9 1 13 0 19 4 17 43 1 43 1 38 323 42 34 65 14 11 19 1 12 39 10 14 11 19 1 12 12 19 1 13 45 35 10 1 5 45 36 13 1 15 16 9 8 13 0 19 4 17 43 1 43 1 10 1 45 37 10 1 5 45 38 13 1 15 33 9 2 13 0 19 4 17 43 1 43 1 38 256 42 39 208 10 0 5 39 143 10 0 5 12 13 1 19 1 40 12 19 2 41 39 48 14 42 15 43 19 0 44 73 39 12 19 0 45 16 46 12 9 1 19 2 47 12 19 0 48 12 15 49 14 50 10 0 5 12 19 7 51 12 14 42 19 1 52 22 73 38 79 10 0 5 45 53 10 2 45 54 13 1 13 0 19 1 40 3 45 55 13 1 15 33 9 3 13 0 19 4 17 43 3 10 0 5 45 56 14 11 19 1 12 39 10 14 11 19 1 12 12 19 1 13 45 57 13 1 13 0 19 1 58 3 45 59 13 1 15 16 9 10 13 0 19 4 17 43 3 38 59 10 1 45 60 75 45 61 13 1 15 33 9 3 13 0 19 4 17 43 1 43 1 14 11 19 1 12 39 10 14 11 19 1 12 12 19 1 13 45 62 75 45 63 13 1 15 16 9 10 13 0 19 4 17 43 1 43 1 38 46 42 64 41 14 11 19 1 12 39 10 14 11 19 1 12 12 19 1 13 45 65 10 1 5 45 66 13 1 15 16 9 11 13 0 19 4 17 43 1 43 1 38 3 75 73 38 61 10 0 42 10 8 13 1 19 1 67 38 49 42 34 8 13 1 19 1 68 38 39 42 39 8 13 1 19 1 40 38 29 42 64 24 14 11 19 1 12 73 39 10 14 11 19 1 12 12 19 1 13 12 19 1 69 38 3 75 73 29) #15# #1# 8750) si::fset)) #1# 8750) #Y(si::bytecodes nil nil (15 0 77 14 1 14 2 15 3 14 4 14 5 14 6 15 7 14 8 1 13 12 19 9 14 12 14 15 14 2 15 16 14 4 14 5 14 6 15 17 14 8 33 10 12 19 9 14 12 14 18 14 8 33 19 12 14 4 77 14 6 15 20 14 2 15 21 19 9 14 12 14 22 14 8 33 10 12 14 4 77 14 6 15 23 14 2 15 24 19 9 14 6 4 12 14 25 15 26 14 2 15 27 14 28 33 29 12 14 30 33 31 12 14 32 33 33 12 14 34 33 33 12 19 15 35 29) #17=#A(t (36) (common-lisp-user::naming-module :ncnar :documentation "Normalize chunk names after run" :default-value t :warning "must be t, nil, or delete" :valid-test common-lisp-user::x common-lisp-user::tornil delete eq #Y(nil nil nil (24 45 9 26 13 0 19 1 10 73 40 7 13 0 1 11 17 12 29) #17# #1# 10635) common-lisp-user::define-parameter :dcnn "Dynamic chunk name normalizing" "must be t or nil" :dcsc-hook common-lisp-user::fctornil "a function or nil" "Hook called when a chunk is changed due to normalizing" :short-copy-names "T or nil" "Flag to signal how copied chunks are named" :version "1.3" "Provides safe and repeatable new name generation for models." :params common-lisp-user::params-naming-module :creation common-lisp-user::create-naming-module :reset common-lisp-user::reset-naming-module :delete common-lisp-user::define-module-fct)) #1# 10635) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 15 12 14 16 9 2 19 4 17 1 0 73 29) #18=#A(t (18) (common-lisp-user::new-name ext::location (defmacro common-lisp-user::new-name) (#1# . 11702) ext::annotate :lambda-list (&optional (common-lisp-user::prefix #19="CHUNK")) #:g7161 #:g7160 #:g7162 #19# common-lisp-user::prefix si::dm-too-many-arguments common-lisp-user::new-name-fct quote #Y(common-lisp-user::new-name nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 39 13 10 0 4 12 10 0 5 51 0 22 38 3 1 10 45 11 10 1 39 6 13 3 19 1 12 15 13 15 14 10 0 6 2 6 2 73 29) #18# #1# 11702) t si::fset)) #1# 11702) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 58 12 19 2 59 1 0 73 29) #20=#A(t (60) (common-lisp-user::new-name-fct ext::location (defun common-lisp-user::new-name-fct) (#1# . 11780) ext::annotate :lambda-list (&optional (common-lisp-user::prefix #21="CHUNK")) #21# common-lisp-user::prefix stringp symbolp common-lisp-user::naming-module common-lisp-user::get-module-fct common-lisp-user::name-module common-lisp-user::naming-module-table common-lisp-user::name-table common-lisp-user::naming-module-model common-lisp-user::m-name string-upcase common-lisp-user::base gethash common-lisp-user::element common-lisp-user::make-act-r-name si::hash-set common-lisp-user::act-r-name-next-name count string common-lisp-user::fast-num->string concatenate symbol-name find-symbol common-lisp-user::existed intern symbol 1+ common-lisp-user::get-chunk #:g7187 #:g7188 common-lisp-user::act-r-name si::structure-set common-lisp-user::previous common-lisp-user::*global-names-table* common-lisp-user::exists common-lisp-user::val t eq find *error-output* #16# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "No naming module available cannot create new name." format finish-output "Invalid parameter passed to new-name.  Must be a string or symbol." #Y(common-lisp-user::new-name-fct nil nil (25 40 3 15 7 46 8 26 10 0 16 9 40 5 10 0 16 10 39 316 15 11 19 1 12 45 13 10 0 39 262 13 0 19 1 14 45 15 13 1 19 1 16 45 17 13 3 19 1 18 45 19 13 0 13 2 19 2 20 45 21 10 0 76 39 14 13 1 13 3 19 0 22 12 19 3 23 51 0 13 0 19 1 24 45 25 15 26 13 2 13 0 19 1 27 12 19 3 28 45 29 13 0 19 1 30 45 31 13 1 19 1 32 45 33 38 36 10 3 16 34 51 3 15 26 13 5 13 3 19 1 27 12 19 3 28 51 2 13 2 19 1 30 51 1 13 2 19 1 32 51 0 13 0 19 1 35 76 39 -42 10 4 45 36 10 4 16 34 45 37 13 1 15 38 9 0 13 0 19 4 39 43 1 43 1 13 2 13 0 13 1 72 3 43 4 47 2 40 47 1 33 45 29 13 0 14 41 19 2 20 47 1 42 45 43 10 1 39 36 13 0 11 44 17 45 40 8 13 7 13 0 19 2 46 76 39 16 13 2 14 41 13 7 10 0 3 51 0 12 19 3 23 38 28 10 4 39 12 13 2 14 41 14 44 19 3 23 38 13 13 2 14 41 10 7 6 1 12 19 3 23 43 2 10 1 73 43 3 43 4 38 40 14 47 15 48 19 0 49 73 39 12 19 0 50 16 51 12 9 1 19 2 52 12 19 0 53 12 15 54 19 5 55 12 14 47 19 1 56 22 73 43 1 38 40 14 47 15 48 19 0 49 73 39 12 19 0 50 16 51 12 9 1 19 2 52 12 19 0 53 12 15 57 19 5 55 12 14 47 19 1 56 22 73 29) #20# #1# 11780) si::fset)) #1# 11780) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 15 12 14 16 9 2 19 4 17 1 0 73 29) #22=#A(t (18) (common-lisp-user::release-name ext::location (defmacro common-lisp-user::release-name) (#1# . 13868) ext::annotate :lambda-list (symbol) #:g7200 #:g7199 #:g7201 si::dm-too-few-arguments symbol si::dm-too-many-arguments common-lisp-user::release-name-fct quote #Y(common-lisp-user::release-name nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 39 6 13 3 19 1 12 15 13 15 14 10 0 6 2 6 2 73 29) #22# #1# 13868) t si::fset)) #1# 13868) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 35 12 19 2 36 1 0 73 29) #23=#A(t (37) (common-lisp-user::release-name-fct ext::location (defun common-lisp-user::release-name-fct) (#1# . 13952) ext::annotate :lambda-list (symbol) symbol symbol-name common-lisp-user::*global-names-table* gethash common-lisp-user::exists common-lisp-user::val t eq common-lisp-user::naming-module common-lisp-user::get-module-fct common-lisp-user::name-module common-lisp-user::naming-module-model common-lisp-user::m-name find remove remhash unintern si::hash-set *error-output* #16# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "No naming module available cannot release name ~s." format finish-output #Y(common-lisp-user::release-name-fct nil nil (24 45 7 26 10 0 16 8 12 14 9 19 2 10 47 1 11 45 12 10 1 39 8 14 13 10 0 17 14 76 73 39 123 15 15 19 1 16 45 17 10 0 39 69 13 0 19 1 18 45 19 13 0 13 2 19 2 20 73 39 48 13 0 13 2 19 2 21 51 2 10 2 76 39 20 10 4 16 8 12 11 9 17 22 13 4 19 1 23 11 13 73 38 15 10 4 16 8 12 14 9 13 2 19 3 24 75 73 43 1 38 42 14 25 15 26 19 0 27 73 39 12 19 0 28 16 29 12 9 1 19 2 30 12 19 0 31 12 15 32 13 3 19 6 33 12 14 25 19 1 34 22 73 43 1 43 2 29) #23# #1# 13952) si::fset)) #1# 13952) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 15 12 14 16 9 2 19 4 17 1 0 73 29) #24=#A(t (18) (common-lisp-user::new-symbol ext::location (defmacro common-lisp-user::new-symbol) (#1# . 14812) ext::annotate :lambda-list (&optional (common-lisp-user::prefix #25="CHUNK")) #:g7211 #:g7210 #:g7212 #25# common-lisp-user::prefix si::dm-too-many-arguments common-lisp-user::new-symbol-fct quote #Y(common-lisp-user::new-symbol nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 39 13 10 0 4 12 10 0 5 51 0 22 38 3 1 10 45 11 10 1 39 6 13 3 19 1 12 15 13 15 14 10 0 6 2 6 2 73 29) #24# #1# 14812) t si::fset)) #1# 14812) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 59 12 19 2 60 1 0 73 29) #26=#A(t (61) (common-lisp-user::new-symbol-fct ext::location (defun common-lisp-user::new-symbol-fct) (#1# . 14902) ext::annotate :lambda-list (&optional (common-lisp-user::prefix #27="CHUNK")) #27# common-lisp-user::prefix stringp symbolp common-lisp-user::naming-module common-lisp-user::get-module-fct common-lisp-user::it common-lisp-user::naming-module-table common-lisp-user::name-table string-upcase common-lisp-user::base gethash common-lisp-user::element common-lisp-user::make-act-r-name si::hash-set common-lisp-user::*global-symbols-table* count string "-" common-lisp-user::fast-num->string concatenate symbol-name find-symbol common-lisp-user::existed #:g7260 #:g7261 #:g7263 + #:g7262 "-" #:g7266 #:g7264 common-lisp-user::act-r-name-used-symbols #:g7265 common-lisp-user::act-r-name si::structure-set #:g7267 #:g7268 #:g7270 #:g7269 intern *error-output* #16# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "No naming module available cannot create new symbol." format finish-output "Invalid parameter passed to new-symbol.  Must be a string or symbol." #Y(common-lisp-user::new-symbol-fct nil nil (25 40 3 15 7 46 8 26 10 0 16 9 40 5 10 0 16 10 39 311 15 11 19 1 12 45 13 10 0 39 8 13 0 19 1 14 38 2 75 43 1 45 15 10 0 39 241 13 1 19 1 16 45 17 13 0 13 1 19 2 18 45 19 10 0 76 39 14 13 1 13 2 19 0 20 12 19 3 21 51 0 13 1 14 22 19 2 18 76 39 10 13 1 14 22 9 0 19 3 21 13 1 14 22 19 2 18 45 23 15 24 13 2 15 25 13 0 19 1 26 12 19 4 27 45 28 13 0 19 1 29 45 30 38 65 10 4 45 31 11 22 45 32 8 1 45 33 13 2 13 1 19 2 18 12 13 0 19 2 34 45 35 13 3 13 2 13 0 19 3 21 43 4 51 2 15 24 13 4 15 36 13 2 19 1 26 12 19 4 27 51 1 13 1 19 1 29 51 0 10 0 76 39 -68 10 2 45 37 10 4 45 38 13 1 13 0 19 1 39 3 45 40 13 1 15 41 9 1 13 0 19 4 42 43 3 10 4 45 43 11 22 45 44 8 1 45 45 13 2 13 1 19 2 18 12 13 0 19 2 34 45 46 13 3 13 2 13 0 19 3 21 43 4 13 1 19 1 47 12 72 1 43 3 43 2 38 40 14 48 15 49 19 0 50 73 39 12 19 0 51 16 52 12 9 1 19 2 53 12 19 0 54 12 15 55 19 5 56 12 14 48 19 1 57 22 73 43 1 38 40 14 48 15 49 19 0 50 73 39 12 19 0 51 16 52 12 9 1 19 2 53 12 19 0 54 12 15 58 19 5 56 12 14 48 19 1 57 22 73 29) #26# #1# 14902) si::fset)) #1# 14902) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 10 12 19 2 11 1 0 73 29) #28=#A(t (12) (common-lisp-user::update-chunks-at-all ext::location (defun common-lisp-user::update-chunks-at-all) (#1# . 16357) ext::annotate :lambda-list common-lisp-user::*meta-processes* common-lisp-user::mps-current common-lisp-user::meta-p-current-model common-lisp-user::act-r-model-chunk-update #Y(common-lisp-user::update-chunks-at-all nil nil (26 14 6 19 1 7 73 39 10 14 6 19 1 7 12 19 1 8 12 19 1 9 29) #28# #1# 16357) si::fset)) #1# 16357) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 11 12 19 2 12 1 0 73 29) #29=#A(t (13) (common-lisp-user::update-chunks-on-the-fly ext::location (defun common-lisp-user::update-chunks-on-the-fly) (#1# . 16443) ext::annotate :lambda-list common-lisp-user::*meta-processes* common-lisp-user::mps-current common-lisp-user::meta-p-current-model common-lisp-user::act-r-model-chunk-update common-lisp-user::act-r-model-dynamic-update #Y(common-lisp-user::update-chunks-on-the-fly nil nil (26 14 6 19 1 7 73 39 10 14 6 19 1 7 12 19 1 8 12 19 1 9 73 39 22 14 6 19 1 7 73 39 10 14 6 19 1 7 12 19 1 8 12 19 1 10 29) #29# #1# 16443) si::fset)) #1# 16443) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 10 12 19 2 11 1 0 73 29) #30=#A(t (12) (common-lisp-user::notify-on-the-fly-hooks ext::location (defun common-lisp-user::notify-on-the-fly-hooks) (#1# . 16597) ext::annotate :lambda-list common-lisp-user::*meta-processes* common-lisp-user::mps-current common-lisp-user::meta-p-current-model common-lisp-user::act-r-model-dynamic-update-hooks #Y(common-lisp-user::notify-on-the-fly-hooks nil nil (26 14 6 19 1 7 73 39 10 14 6 19 1 7 12 19 1 8 12 19 1 9 29) #30# #1# 16597) si::fset)) #1# 16597) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 10 12 19 2 11 1 0 73 29) #31=#A(t (12) (common-lisp-user::delete-chunks-after-run ext::location (defun common-lisp-user::delete-chunks-after-run) (#1# . 16693) ext::annotate :lambda-list common-lisp-user::*meta-processes* common-lisp-user::mps-current common-lisp-user::meta-p-current-model common-lisp-user::act-r-model-delete-chunks #Y(common-lisp-user::delete-chunks-after-run nil nil (26 14 6 19 1 7 73 39 10 14 6 19 1 7 12 19 1 8 12 19 1 9 29) #31# #1# 16693) si::fset)) #1# 16693) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 10 12 19 2 11 1 0 73 29) #32=#A(t (12) (common-lisp-user::use-short-copy-names ext::location (defun common-lisp-user::use-short-copy-names) (#1# . 16782) ext::annotate :lambda-list common-lisp-user::*meta-processes* common-lisp-user::mps-current common-lisp-user::meta-p-current-model common-lisp-user::act-r-model-short-copy-names #Y(common-lisp-user::use-short-copy-names nil nil (26 14 6 19 1 7 73 39 10 14 6 19 1 7 12 19 1 8 12 19 1 9 29) #32# #1# 16782) si::fset)) #1# 16782))
