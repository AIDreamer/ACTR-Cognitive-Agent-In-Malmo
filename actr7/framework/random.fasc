(#Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 8 -1 52 0 15 0 15 3 15 4 15 5 19 4 6 1 0 73 29) #A(t (7) (common-lisp-user::*random-module-counter* si::*make-special boundp ext::location (defvar common-lisp-user::*random-module-counter*) (#1=#P"C:/Users/Son Pham/Desktop/actr7/framework/random.lisp" . 0) ext::annotate)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 7 77 77 15 6 19 15 7 15 8 15 9 15 10 15 11 19 4 12 15 13 15 9 15 14 15 15 19 4 12 15 13 14 16 77 15 17 19 4 12 15 0 19 1 48 78 44 15 13 1 46 12 19 2 47 1 0 73 29) #2=#A(t (49) (common-lisp-user::mersenne-twister common-lisp-user::mt- ((common-lisp-user::n 624 :type fixnum) (common-lisp-user::m 397 :type fixnum) (common-lisp-user::mti 625 :type fixnum) (common-lisp-user::mt #3=(make-array 624 :element-type 'bignum) :type vector) (count 0 :type integer) (common-lisp-user::start #4=(incf common-lisp-user::*random-module-counter*) :type integer) (common-lisp-user::initial-seed 5489 :type integer)) ((common-lisp-user::n 624 fixnum nil 0 nil) (common-lisp-user::m 397 fixnum nil 1 nil) (common-lisp-user::mti 625 fixnum nil 2 nil) (common-lisp-user::mt #3# vector nil 3 nil) (count 0 integer nil 4 nil) (common-lisp-user::start #4# integer nil 5 nil) (common-lisp-user::initial-seed 5489 integer nil 6 nil)) common-lisp-user::copy-mersenne-twister (common-lisp-user::make-mersenne-twister) common-lisp-user::mersenne-twister-p si::define-structure #5=(common-lisp-user::mersenne-twister (:conc-name common-lisp-user::mt-)) ext::location (defstruct #5#) (#1# . 6311) ext::annotate common-lisp-user::make-mersenne-twister (defun common-lisp-user::make-mersenne-twister) (#1# . 6311) :lambda-list (&key (#6=#:n 624) (#7=#:m 397) (#8=#:mti 625) (#9=#:mt (make-array 624 :element-type 'bignum)) (#10=#:count 0) (#11=#:start (incf common-lisp-user::*random-module-counter*)) (#12=#:initial-seed 5489)) (nil :initial-seed :start :count :mt :mti :m :n) #6# #7# #8# :element-type bignum make-array #9# #10# #:g6679 common-lisp-user::*random-module-counter* + #11# #12# integer typep common-lisp-user::initial-seed si::structure-type-error common-lisp-user::start count vector common-lisp-user::mt fixnum common-lisp-user::mti common-lisp-user::m common-lisp-user::n 0 si::make-structure #Y(common-lisp-user::make-mersenne-twister nil nil (28 18 22 40 3 9 624 46 19 22 40 3 9 397 46 20 22 40 3 9 625 46 21 22 40 11 9 624 14 22 15 23 19 3 24 12 46 25 22 40 3 9 0 46 26 22 40 17 8 1 45 27 14 28 13 0 19 2 29 52 28 12 43 1 46 30 22 40 3 9 5489 46 31 13 0 15 32 19 2 33 76 39 12 13 0 15 32 15 0 15 34 19 4 35 13 1 15 32 19 2 33 76 39 12 13 1 15 32 15 0 15 36 19 4 35 13 2 15 32 19 2 33 76 39 12 13 2 15 32 15 0 15 37 19 4 35 13 3 15 38 19 2 33 76 39 12 13 3 15 38 15 0 15 39 19 4 35 13 4 15 40 19 2 33 76 39 12 13 4 15 40 15 0 15 41 19 4 35 13 5 15 40 19 2 33 76 39 12 13 5 15 40 15 0 15 42 19 4 35 13 6 15 40 19 2 33 76 39 12 13 6 15 40 15 0 15 43 19 4 35 15 44 13 6 13 5 13 4 13 3 13 2 13 1 13 0 19 8 45 29) #2# #1# 6311) si::fset find-class)) #1# 6311) #Y(si::bytecodes nil nil (15 0 1 1 17 2 15 0 15 3 15 4 15 5 19 4 6 1 0 73 29) #A(t (7) (common-lisp-user::*matrix_a* 2567483615 si::*make-constant ext::location (defconstant common-lisp-user::*matrix_a*) (#1# . 6607) ext::annotate)) #1# 6607) #Y(si::bytecodes nil nil (15 0 1 1 17 2 15 0 15 3 15 4 15 5 19 4 6 1 0 73 29) #A(t (7) (common-lisp-user::*upper_mask* 2147483648 si::*make-constant ext::location (defconstant common-lisp-user::*upper_mask*) (#1# . 6682) ext::annotate)) #1# 6682) #Y(si::bytecodes nil nil (15 0 1 1 17 2 15 0 15 3 15 4 15 5 19 4 6 1 0 73 29) #A(t (7) (common-lisp-user::*lower_mask* 2147483647 si::*make-constant ext::location (defconstant common-lisp-user::*lower_mask*) (#1# . 6720) ext::annotate)) #1# 6720) #Y(si::bytecodes nil nil (15 0 9 32 8 0 17 1 17 2 15 0 15 3 15 4 15 5 19 4 6 1 0 73 29) #A(t (7) (common-lisp-user::*byte-32-0* byte si::*make-constant ext::location (defconstant common-lisp-user::*byte-32-0*) (#1# . 6758) ext::annotate)) #1# 6758) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 6 19 0 3 52 0 15 0 15 4 15 5 15 6 19 4 7 1 0 73 29) #A(t (8) (common-lisp-user::*default-random-module* si::*make-special boundp common-lisp-user::make-mersenne-twister ext::location (defvar common-lisp-user::*default-random-module*) (#1# . 6869) ext::annotate)) #1# 6869) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 31 12 19 2 32 1 0 73 29) #13=#A(t (33) (common-lisp-user::init_genrand ext::location (defun common-lisp-user::init_genrand) (#1# . 6959) ext::annotate :lambda-list (common-lisp-user::s &optional (common-lisp-user::state common-lisp-user::*default-random-module*)) common-lisp-user::s common-lisp-user::*default-random-module* common-lisp-user::state common-lisp-user::mt-mt common-lisp-user::*byte-32-0* ldb si::svset #:g6698 #:g6699 common-lisp-user::mersenne-twister si::structure-set common-lisp-user::mt-mti 1812433253 1- svref ash logxor * + #:g6709 #:g6711 #:g6710 common-lisp-user::mt-n = #Y(common-lisp-user::init_genrand nil nil (24 45 7 25 40 3 14 8 46 9 26 13 0 19 1 10 12 9 0 14 11 10 1 17 12 12 19 3 13 10 0 45 14 8 1 45 15 13 1 15 16 9 2 13 0 19 4 17 43 1 43 1 38 111 13 0 19 1 10 12 13 0 19 1 18 12 14 11 15 19 13 0 19 1 10 12 13 0 19 1 18 16 20 17 21 12 13 0 19 1 10 12 13 0 19 1 18 16 20 17 21 12 8 -30 17 22 12 19 2 23 12 19 2 24 12 13 0 19 1 18 12 19 2 25 17 12 12 19 3 13 10 0 45 26 8 1 45 27 13 1 19 1 18 12 13 0 19 2 25 45 28 13 2 15 16 9 2 13 0 19 4 17 43 3 13 0 19 1 18 12 13 0 19 1 29 12 19 2 30 39 -126 75 73 29) #13# #1# 6959) si::fset)) #1# 6959) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 38 12 19 2 39 1 0 73 29) #14=#A(t (40) (common-lisp-user::init_by_array ext::location (defun common-lisp-user::init_by_array) (#1# . 7583) ext::annotate :lambda-list (common-lisp-user::init_key &optional (common-lisp-user::state common-lisp-user::*default-random-module*)) common-lisp-user::init_key common-lisp-user::*default-random-module* common-lisp-user::state 19650218 common-lisp-user::init_genrand length common-lisp-user::j common-lisp-user::i common-lisp-user::key_length common-lisp-user::mt-n > common-lisp-user::k common-lisp-user::mt-mt common-lisp-user::*byte-32-0* svref 1664525 1- ash logxor * + ldb si::svset #:g6767 #:g6769 = zerop 1566083941 - #:g6786 2147483648 #Y(common-lisp-user::init_by_array nil nil (24 45 7 25 40 3 14 8 46 9 26 15 10 13 0 19 2 11 10 1 16 12 12 9 1 9 0 46 13 46 14 46 15 13 3 19 1 16 12 13 0 19 2 17 39 8 13 3 19 1 16 38 3 10 0 45 18 38 179 13 4 19 1 19 12 13 2 14 20 13 4 19 1 19 12 10 2 17 21 12 15 22 13 4 19 1 19 12 10 2 16 23 17 21 12 13 4 19 1 19 12 10 2 16 23 17 21 12 8 -30 17 24 12 19 2 25 12 19 2 26 12 19 2 25 12 13 5 10 3 17 21 12 13 3 19 3 27 17 28 12 19 3 29 8 1 45 30 13 3 13 0 19 2 27 51 3 43 1 8 1 45 31 13 4 13 0 19 2 27 51 4 43 1 13 3 13 1 19 2 32 39 5 8 0 51 3 13 2 13 4 19 1 16 12 19 2 32 39 32 13 4 19 1 19 12 9 0 13 4 19 1 19 12 13 4 19 1 16 16 23 17 21 12 19 3 29 8 1 51 2 10 0 16 23 12 53 0 10 0 16 33 39 -183 43 1 13 3 19 1 16 16 23 45 18 38 144 13 4 19 1 19 12 13 2 14 20 13 4 19 1 19 12 10 2 17 21 12 15 34 13 4 19 1 19 12 10 2 16 23 17 21 12 13 4 19 1 19 12 10 2 16 23 17 21 12 8 -30 17 24 12 19 2 25 12 19 2 26 12 19 2 25 12 13 2 19 2 35 17 28 12 19 3 29 8 1 45 36 13 3 13 0 19 2 27 51 3 43 1 13 2 13 4 19 1 16 12 19 2 32 39 32 13 4 19 1 19 12 9 0 13 4 19 1 19 12 13 4 19 1 16 16 23 17 21 12 19 3 29 8 1 51 2 10 0 16 23 12 53 0 10 0 16 33 39 -148 43 1 13 3 19 1 19 12 9 0 15 37 19 3 29 43 3 29) #14# #1# 7583) si::fset)) #1# 7583) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 47 12 19 2 48 1 0 73 29) #15=#A(t (49) (common-lisp-user::genrand_int32 ext::location (defun common-lisp-user::genrand_int32) (#1# . 9050) ext::annotate :lambda-list (&optional (common-lisp-user::state common-lisp-user::*default-random-module*)) common-lisp-user::*default-random-module* common-lisp-user::state common-lisp-user::y common-lisp-user::mt-mti common-lisp-user::mt-n >= common-lisp-user::kk > common-lisp-user::init_genrand common-lisp-user::mt-mt svref common-lisp-user::*upper_mask* logand 1+ common-lisp-user::*lower_mask* logior common-lisp-user::mt-m + ash zerop common-lisp-user::*matrix_a* logxor si::svset #:g6844 - #:g6856 1- #:g6861 #:g6862 common-lisp-user::mersenne-twister si::structure-set #:g6864 #:g6866 #:g6865 #:g6867 #:g6869 common-lisp-user::mt-count #:g6868 2636928640 4022730752 #Y(common-lisp-user::genrand_int32 nil nil (25 40 3 14 7 46 8 26 8 0 45 9 13 1 19 1 10 12 13 1 19 1 11 12 19 2 12 39 450 8 0 45 13 13 2 19 1 10 12 13 2 19 1 11 12 19 2 14 39 8 9 5489 13 2 19 2 15 38 119 13 2 19 1 16 12 10 0 17 17 12 14 18 19 2 19 12 13 2 19 1 16 12 10 0 16 20 17 17 12 14 21 19 2 19 12 19 2 22 51 1 13 2 19 1 16 12 13 0 13 2 19 1 16 12 13 0 13 2 19 1 23 12 19 2 24 17 17 12 13 1 8 -1 17 25 12 13 1 9 1 19 2 19 16 26 39 6 8 0 73 38 4 11 27 73 12 19 3 28 12 19 3 29 8 1 45 30 13 1 13 0 19 2 24 51 1 43 1 13 0 13 2 19 1 11 12 13 2 19 1 23 12 19 2 31 12 19 2 12 39 -140 38 129 13 2 19 1 16 12 10 0 17 17 12 14 18 19 2 19 12 13 2 19 1 16 12 10 0 16 20 17 17 12 14 21 19 2 19 12 19 2 22 51 1 13 2 19 1 16 12 13 0 13 2 19 1 16 12 13 0 13 2 19 1 23 12 13 2 19 1 11 12 19 2 31 12 19 2 24 17 17 12 13 1 8 -1 17 25 12 13 1 9 1 19 2 19 16 26 39 6 8 0 73 38 4 11 27 73 12 19 3 28 12 19 3 29 8 1 45 32 13 1 13 0 19 2 24 51 1 43 1 13 0 13 2 19 1 11 16 33 12 19 2 12 39 -142 13 2 19 1 16 12 13 2 19 1 11 16 33 17 17 12 14 18 19 2 19 12 13 2 19 1 16 12 8 0 17 17 12 14 21 19 2 19 12 19 2 22 51 1 13 2 19 1 16 12 13 2 19 1 11 16 33 12 13 2 19 1 16 12 13 2 19 1 23 16 33 17 17 12 13 1 8 -1 17 25 12 13 1 9 1 19 2 19 16 26 39 6 8 0 73 38 4 11 27 73 12 19 3 28 12 19 3 29 10 2 45 34 8 0 45 35 13 1 15 36 9 2 13 0 19 4 37 43 1 43 1 43 1 13 1 19 1 16 12 13 1 19 1 10 17 17 51 0 10 1 45 38 8 1 45 39 13 1 19 1 10 12 13 0 19 2 24 45 40 13 2 15 36 9 2 13 0 19 4 37 43 3 10 1 45 41 8 1 45 42 13 1 19 1 43 12 13 0 19 2 24 45 44 13 2 15 36 9 4 13 0 19 4 37 43 3 13 0 13 0 8 -11 17 25 12 19 2 28 51 0 13 0 13 0 8 7 17 25 12 15 45 19 2 19 12 19 2 28 51 0 13 0 13 0 8 15 17 25 12 15 46 19 2 19 12 19 2 28 51 0 13 0 13 0 8 -18 17 25 12 19 2 28 51 0 10 0 73 43 1 29) #15# #1# 9050) si::fset)) #1# 9050) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 12 12 19 2 13 1 0 73 29) #16=#A(t (14) (common-lisp-user::genrand_real2_l ext::location (defun common-lisp-user::genrand_real2_l) (#1# . 12041) ext::annotate :lambda-list (&optional (common-lisp-user::state common-lisp-user::*default-random-module*)) common-lisp-user::*default-random-module* common-lisp-user::state common-lisp-user::genrand_int32 4.294967296d9 / #Y(common-lisp-user::genrand_real2_l nil nil (25 40 3 14 7 46 8 26 13 0 19 1 9 12 15 10 19 2 11 29) #16# #1# 12041) si::fset)) #1# 12041) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 12 12 19 2 13 1 0 73 29) #17=#A(t (14) (common-lisp-user::genrand_real2 ext::location (defun common-lisp-user::genrand_real2) (#1# . 12156) ext::annotate :lambda-list (&optional (common-lisp-user::state common-lisp-user::*default-random-module*)) common-lisp-user::*default-random-module* common-lisp-user::state common-lisp-user::genrand_int32 4.2949673e9 / #Y(common-lisp-user::genrand_real2 nil nil (25 40 3 14 7 46 8 26 13 0 19 1 9 12 15 10 19 2 11 29) #17# #1# 12156) si::fset)) #1# 12156) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 2 77 77 15 6 19 15 7 15 0 15 8 15 9 15 10 19 4 11 15 12 15 8 15 13 15 14 19 4 11 15 12 14 15 77 15 16 19 4 11 15 0 19 1 24 78 20 15 12 1 22 12 19 2 23 1 0 73 29) #18=#A(t (25) (common-lisp-user::act-r-random-module "ACT-R-RANDOM-MODULE-" (common-lisp-user::state common-lisp-user::randomize-time) ((common-lisp-user::state nil t nil 0 nil) (common-lisp-user::randomize-time nil t nil 1 nil)) common-lisp-user::copy-act-r-random-module (common-lisp-user::make-act-r-random-module) common-lisp-user::act-r-random-module-p si::define-structure ext::location (defstruct common-lisp-user::act-r-random-module) (#1# . 12267) ext::annotate common-lisp-user::make-act-r-random-module (defun common-lisp-user::make-act-r-random-module) (#1# . 12267) :lambda-list (&key #19=#:state #20=#:randomize-time) (nil :randomize-time :state) #19# #20# 0 si::make-structure #Y(common-lisp-user::make-act-r-random-module nil nil (28 17 22 40 2 77 46 18 22 40 2 77 46 19 15 20 13 1 13 0 19 3 21 29) #18# #1# 12267) si::fset find-class)) #1# 12267) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 22 12 19 2 23 1 0 73 29) #21=#A(t (24) (common-lisp-user::create-random-module ext::location (defun common-lisp-user::create-random-module) (#1# . 12859) ext::annotate :lambda-list (ignore) ignore common-lisp-user::make-mersenne-twister common-lisp-user::state #:g6876 common-lisp-user::mt-start get-internal-real-time + abs #:g6877 common-lisp-user::mersenne-twister si::structure-set common-lisp-user::mt-initial-seed common-lisp-user::init-random-state-from-seed :state common-lisp-user::make-act-r-random-module #Y(common-lisp-user::create-random-module nil nil (24 45 7 26 19 0 8 45 9 10 0 45 10 13 1 19 1 11 12 19 0 12 12 19 2 13 16 14 45 15 13 1 15 16 9 6 13 0 19 4 17 43 1 43 1 13 0 13 0 19 1 18 12 19 2 19 14 20 13 0 19 2 21 43 1 29) #21# #1# 12859) si::fset)) #1# 12859) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 18 12 19 2 19 1 0 73 29) #22=#A(t (20) (common-lisp-user::init-random-state-from-seed ext::location (defun common-lisp-user::init-random-state-from-seed) (#1# . 13740) ext::annotate :lambda-list (common-lisp-user::state common-lisp-user::seed) common-lisp-user::state common-lisp-user::seed log ceiling <= common-lisp-user::init_genrand :initial-contents byte ldb make-array common-lisp-user::init_by_array #Y(common-lisp-user::init-random-state-from-seed nil nil (24 45 7 24 45 8 26 13 0 9 2 19 2 9 12 19 1 10 12 9 32 19 2 11 39 10 13 0 13 1 19 2 12 38 40 9 2 14 13 9 32 8 0 17 14 12 10 0 17 15 12 9 32 8 32 17 14 12 10 0 17 15 6 2 12 19 3 16 12 13 1 19 2 17 29) #22# #1# 13740) si::fset)) #1# 13740) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 36 12 19 2 37 1 0 73 29) #23=#A(t (38) (common-lisp-user::random-module-params ext::location (defun common-lisp-user::random-module-params) (#1# . 14063) ext::annotate :lambda-list (common-lisp-user::module common-lisp-user::param) common-lisp-user::module common-lisp-user::param consp :seed symbolp second common-lisp-user::act-r-random-module-state common-lisp-user::state count common-lisp-user::seed common-lisp-user::init-random-state-from-seed #:g6884 #:g6885 common-lisp-user::mersenne-twister si::structure-set #:g6886 #:g6887 si::%dotimes-var common-lisp-user::i common-lisp-user::genrand_int32 1+ < :randomize-time #:g6888 #:g6889 common-lisp-user::act-r-random-module common-lisp-user::mt-initial-seed common-lisp-user::mt-count common-lisp-user::act-r-random-module-randomize-time #Y(common-lisp-user::random-module-params nil nil (24 45 7 24 45 8 26 10 0 16 9 39 168 10 0 4 42 10 129 10 0 5 16 11 76 73 39 118 10 0 5 4 12 10 0 5 16 12 12 13 1 19 1 13 12 46 14 46 15 46 16 13 2 13 0 19 2 17 10 2 45 18 8 0 45 19 13 1 15 20 9 4 13 0 19 4 21 43 1 43 1 10 2 45 22 10 1 45 23 13 1 15 20 9 6 13 0 19 4 21 43 1 43 1 10 1 45 24 8 0 45 25 38 12 13 4 19 1 26 10 0 16 27 51 0 13 0 13 1 19 2 28 40 -19 43 2 13 0 10 1 6 2 73 43 3 38 32 42 29 27 10 1 45 30 10 1 5 45 31 13 1 15 32 9 1 13 0 19 4 21 43 1 43 1 38 3 75 73 38 42 10 0 42 10 25 13 1 19 1 13 12 19 1 33 12 13 1 19 1 13 12 19 1 34 6 2 73 38 13 42 29 8 13 1 19 1 35 38 3 75 73 29) #23# #1# 14063) si::fset)) #1# 14063) #Y(si::bytecodes nil nil (15 0 77 14 1 14 2 15 3 14 4 1 15 12 14 16 15 7 14 17 15 18 19 9 19 12 14 20 14 4 1 22 12 14 16 77 14 17 15 23 14 2 15 24 19 9 19 6 2 12 14 25 15 26 14 2 15 27 14 28 15 29 14 30 15 31 19 11 32 29) #24=#A(t (33) (common-lisp-user::random-module :seed :documentation "Current seed of the random number generator" :valid-test common-lisp-user::x symbolp common-lisp-user::no-default eq listp length = integerp minusp second #Y(nil nil nil (24 45 5 26 10 0 16 6 39 7 13 0 1 7 17 8 73 40 55 10 0 16 9 73 39 48 10 0 16 10 12 9 2 19 2 11 73 39 35 10 0 4 16 12 73 39 27 10 0 4 16 13 76 73 39 18 10 0 16 14 16 12 73 39 9 10 0 16 14 16 13 76 73 29) #24# #1# 15180) :default-value :warning "a list of two non-negative integers" common-lisp-user::define-parameter :randomize-time t #Y(nil nil nil (24 45 5 26 13 0 11 21 17 8 73 40 11 10 0 76 73 40 5 10 0 16 12 29) #24# #1# 15180) "T, nil, or an integer" "Allows the timing of certain actions to vary" :version "1.0" "Provide a good and consistent source of pseudorandom numbers for all systems" :creation common-lisp-user::create-random-module :params common-lisp-user::random-module-params common-lisp-user::define-module-fct)) #1# 15180) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 45 12 19 2 46 1 0 73 29) #25=#A(t (47) (common-lisp-user::act-r-random ext::location (defun common-lisp-user::act-r-random) (#1# . 16379) ext::annotate :lambda-list (common-lisp-user::limit) common-lisp-user::limit numberp plusp common-lisp-user::random-module common-lisp-user::get-module-fct common-lisp-user::module common-lisp-user::act-r-random-module-state common-lisp-user::*default-random-module* common-lisp-user::state integerp 4294967295 < common-lisp-user::genrand_real2_l * floor log 1+ / ceiling common-lisp-user::nums common-lisp-user::accum si::%dotimes-var common-lisp-user::i ash common-lisp-user::genrand_int32 + mod common-lisp-user::genrand_real2 *error-output* #26="~&#|Warning~:[~*~;~@[ (in model ~a)~]~]: ~@? |#~%" common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "Act-r-random called with an invalid value ~s" format finish-output #Y(common-lisp-user::act-r-random nil nil (24 45 7 26 10 0 16 8 39 5 10 0 16 9 39 154 15 10 19 1 11 45 12 10 0 39 8 13 0 19 1 13 38 3 11 14 45 15 10 2 16 16 39 111 13 2 15 17 19 2 18 39 21 13 2 13 0 19 1 19 12 19 2 20 12 19 1 21 12 72 1 38 80 9 0 13 2 9 2 19 2 22 16 23 12 9 32 19 2 24 12 19 1 25 12 46 26 46 27 10 1 45 28 8 0 45 29 38 25 13 2 8 32 17 30 12 13 4 19 1 31 12 19 2 32 51 2 10 0 16 23 51 0 13 0 13 1 19 2 18 40 -32 43 2 13 0 10 4 17 33 43 2 38 12 13 2 13 0 19 1 34 12 19 2 20 43 2 38 42 14 35 15 36 19 0 37 73 39 12 19 0 38 16 39 12 9 1 19 2 40 12 19 0 41 12 15 42 13 0 19 6 43 12 14 35 19 1 44 22 73 29) #25# #1# 16379) si::fset)) #1# 16379) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 31 12 19 2 32 15 0 15 33 15 34 19 3 35 1 0 73 29) #27=#A(t (36) (common-lisp-user::act-r-noise ext::location (defun common-lisp-user::act-r-noise) (#1# . 17192) ext::annotate :lambda-list (common-lisp-user::s) common-lisp-user::s numberp plusp 1.e-4 1.0 common-lisp-user::act-r-random 0.9999 min max common-lisp-user::p - / log * *error-output* #26# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "Act-r-noise called with an invalid s ~S" format finish-output #Y(common-lisp-user::act-r-noise nil nil (24 45 7 26 10 0 16 8 39 5 10 0 16 9 39 47 15 10 15 11 19 1 12 12 15 13 19 2 14 12 19 2 15 45 16 13 1 15 11 13 0 19 2 17 12 13 0 19 2 18 12 19 1 19 12 19 2 20 43 1 38 42 14 21 15 22 19 0 23 73 39 12 19 0 24 16 25 12 9 1 19 2 26 12 19 0 27 12 15 28 13 0 19 6 29 12 14 21 19 1 30 22 73 29) #27# #1# 17192) si::fset function "Approximates a sample from a normal distribution with mean zero and
   the given s-value (/ (sqrt (* 3.0 variance)) 3.1416)." si::set-documentation)) #1# 17192) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 31 12 19 2 32 1 0 73 29) #28=#A(t (33) (common-lisp-user::randomize-time ext::location (defun common-lisp-user::randomize-time) (#1# . 17618) ext::annotate :lambda-list (time) time numberp common-lisp-user::random-module common-lisp-user::get-module-fct common-lisp-user::rand-module common-lisp-user::act-r-random-module-randomize-time common-lisp-user::rand zerop common-lisp-user::tscale / 2.0 common-lisp-user::act-r-random + * *error-output* #26# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "Invalid value passed to randomize-time: ~S" format finish-output #Y(common-lisp-user::randomize-time nil nil (24 45 7 26 10 0 16 8 39 87 15 9 19 1 10 45 11 10 0 39 69 13 0 19 1 12 45 13 10 0 76 40 5 10 2 16 14 39 6 10 2 73 38 42 10 0 16 8 39 5 10 0 38 3 8 3 45 15 13 3 13 0 19 2 16 12 13 0 9 -1 15 17 19 1 18 12 19 3 19 12 19 2 20 43 1 43 1 38 4 10 1 73 43 1 38 42 14 21 15 22 19 0 23 73 39 12 19 0 24 16 25 12 9 1 19 2 26 12 19 0 27 12 15 28 13 0 19 6 29 14 21 19 1 30 10 0 73 29) #28# #1# 17618) si::fset)) #1# 17618) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 32 12 19 2 33 1 0 73 29) #29=#A(t (34) (common-lisp-user::randomize-time-ms ext::location (defun common-lisp-user::randomize-time-ms) (#1# . 18620) ext::annotate :lambda-list (time) time integerp common-lisp-user::random-module common-lisp-user::get-module-fct common-lisp-user::rand-module common-lisp-user::act-r-random-module-randomize-time common-lisp-user::rand zerop numberp common-lisp-user::tscale round step - + common-lisp-user::act-r-random *error-output* #26# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "Invalid value passed to randomize-time-ms: ~S. Value must be an integer." format finish-output #Y(common-lisp-user::randomize-time-ms nil nil (24 45 7 26 10 0 16 8 39 96 15 9 19 1 10 45 11 10 0 39 78 13 0 19 1 12 45 13 10 0 76 40 5 10 2 16 14 39 6 10 2 73 38 51 10 0 16 15 39 5 10 0 38 3 8 3 45 16 13 3 13 0 19 2 17 45 18 13 4 13 0 19 1 19 12 9 1 13 0 13 0 19 3 20 12 19 1 21 12 19 3 20 43 2 43 1 38 4 10 1 73 43 1 38 42 14 22 15 23 19 0 24 73 39 12 19 0 25 16 26 12 9 1 19 2 27 12 19 0 28 12 15 29 13 0 19 6 30 14 22 19 1 31 10 0 73 29) #29# #1# 18620) si::fset)) #1# 18620) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 18 12 19 2 19 15 0 15 20 15 21 19 3 22 1 0 73 29) #30=#A(t (23) (common-lisp-user::rand-time ext::location (defun common-lisp-user::rand-time) (#1# . 19236) ext::annotate :lambda-list (time) time *error-output* #26# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "Rand-time is no longer available. Randomize-time should be used instead" format finish-output #Y(common-lisp-user::rand-time nil nil (24 45 7 26 14 8 15 9 19 0 10 73 39 12 19 0 11 16 12 12 9 1 19 2 13 12 19 0 14 12 15 15 19 5 16 14 8 19 1 17 10 0 73 29) #30# #1# 19236) si::fset function "If time randomizing is on, do the EPIC time randomizing thing." si::set-documentation)) #1# 19236) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 17 12 19 2 18 15 0 15 19 15 20 19 3 21 1 0 73 29) #31=#A(t (22) (common-lisp-user::permute-list ext::location (defun common-lisp-user::permute-list) (#1# . 20093) ext::annotate :lambda-list (common-lisp-user::lis) common-lisp-user::lis listp length common-lisp-user::act-r-random nth common-lisp-user::item :count remove common-lisp-user::temp common-lisp-user::result #Y(common-lisp-user::permute-list nil nil (24 45 7 26 10 0 16 8 39 3 10 0 39 84 10 0 16 9 12 19 1 10 12 10 0 17 11 45 12 13 0 13 1 14 13 9 1 19 4 14 45 15 10 1 6 1 45 16 38 36 10 1 16 9 12 19 1 10 12 10 1 17 11 51 2 13 2 13 1 14 13 9 1 19 4 14 51 1 13 2 10 0 3 51 0 10 1 76 39 -39 10 0 73 43 3 38 3 75 73 29) #31# #1# 20093) si::fset function "Return a random permutation of the list" si::set-documentation)) #1# 20093))
