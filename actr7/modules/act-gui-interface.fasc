(#Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 77 14 5 1 7 12 1 8 7 3 12 15 9 1 10 6 3 12 77 19 4 11 29) #1=#A(t (12) (common-lisp-user::agi-module ext::location (defclass common-lisp-user::agi-module) (#2=#P"C:/Users/Son Pham/Desktop/actr7/modules/act-gui-interface.lisp" . 0) ext::annotate :initfunction make-hash-table #Y(nil nil nil (26 19 0 6 29) #1# #2# 0) (:allocation :class :initform (make-hash-table) :writers ((setf common-lisp-user::global-agi-table)) :readers (common-lisp-user::global-agi-table) :name common-lisp-user::global-agi-table) (:allocation :class :initform nil :writers ((setf common-lisp-user::close-exp-on-reset)) :readers (common-lisp-user::close-exp-on-reset) :name common-lisp-user::close-exp-on-reset) (:initform nil :writers ((setf common-lisp-user::agi-window-list)) :readers (common-lisp-user::agi-window-list) :name common-lisp-user::agi-window-list) clos::load-defclass)) #2# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 10 12 19 2 11 1 0 73 29) #3=#A(t (12) (common-lisp-user::create-agi-module ext::location (defun common-lisp-user::create-agi-module) (#2# . 9441) ext::annotate :lambda-list (common-lisp-user::name) common-lisp-user::name common-lisp-user::agi-module make-instance #Y(common-lisp-user::create-agi-module nil nil (24 45 7 26 15 8 19 1 9 29) #3# #2# 9441) si::fset)) #2# 9441) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 14 12 19 2 15 1 0 73 29) #4=#A(t (16) (common-lisp-user::delete-agi-module ext::location (defun common-lisp-user::delete-agi-module) (#2# . 9719) ext::annotate :lambda-list (common-lisp-user::instance) common-lisp-user::instance common-lisp-user::agi-window-list si::%dolist-var common-lisp-user::x common-lisp-user::close-rpm-window common-lisp-user::global-agi-table remhash #Y(common-lisp-user::delete-agi-module nil nil (24 45 7 26 13 0 19 1 8 45 9 75 45 10 38 29 10 1 4 51 0 10 0 5 12 19 1 11 10 0 5 12 13 2 19 1 12 17 13 10 1 5 51 1 10 1 40 -31 75 73 43 2 29) #4# #2# 9719) si::fset)) #2# 9719) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 13 12 19 2 14 1 0 73 29) #5=#A(t (15) (common-lisp-user::reset-agi-module ext::location (defun common-lisp-user::reset-agi-module) (#2# . 10071) ext::annotate :lambda-list (common-lisp-user::instance) common-lisp-user::instance common-lisp-user::close-exp-on-reset common-lisp-user::delete-agi-module #:g19338 #:g19339 (setf common-lisp-user::agi-window-list) #Y(common-lisp-user::reset-agi-module nil nil (24 45 7 26 13 0 19 1 8 73 39 25 13 0 19 1 9 10 0 45 10 75 45 11 13 0 13 1 33 12 18 2 43 1 43 1 29) #5# #2# 10071) si::fset)) #2# 10071) #Y(si::bytecodes nil nil (15 0 77 77 14 1 15 2 14 3 15 4 14 5 15 6 14 7 15 8 14 9 77 14 10 77 14 11 77 14 12 77 14 13 15 14 14 15 77 14 16 77 14 17 77 14 18 77 14 19 77 14 20 77 14 21 77 19 35 22 29) #A(t (23) (common-lisp-user::agi :version "2.0" :documentation "Module based manager for AGI windows" :creation common-lisp-user::create-agi-module :reset common-lisp-user::reset-agi-module :query :request :buffer-mod :params :delete common-lisp-user::delete-agi-module :notify-on-clear :update :warning :search :offset :run-start :run-end common-lisp-user::define-module-fct)) #2# 10439) #Y(si::bytecodes nil nil (14 0 14 1 15 2 14 3 15 4 14 5 77 14 6 15 7 14 8 1 17 12 19 11 18 29) #6=#A(t (19) (:close-exp-windows-on-reset :valid-test common-lisp-user::tornil :warning "t or nil" :default-value :documentation "Whether the AGI closes windows associated with a model when that model is reset" :handler common-lisp-user::set-or-get common-lisp-user::value common-lisp-user::agi-module make-instance #:g19340 #:g19341 (setf common-lisp-user::close-exp-on-reset) common-lisp-user::close-exp-on-reset #Y(nil nil nil (24 45 9 24 45 10 26 10 1 39 26 15 11 19 1 12 45 13 10 1 45 14 13 0 13 1 33 15 18 2 43 1 43 1 38 10 15 11 19 1 12 12 19 1 16 29) #6# #2# 10626) common-lisp-user::create-system-parameter)) #2# 10626) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 15 12 19 2 16 1 0 73 29) #7=#A(t (17) (common-lisp-user::get-time ext::location (defun common-lisp-user::get-time) (#2# . 11305) ext::annotate :lambda-list (&optional (common-lisp-user::model-time t)) t common-lisp-user::model-time common-lisp-user::mp-time-ms get-internal-real-time internal-time-units-per-second / * round #Y(common-lisp-user::get-time nil nil (25 40 3 14 7 46 8 26 10 0 39 6 19 0 9 38 20 9 1000 19 0 10 12 14 11 19 2 12 12 19 2 13 12 19 1 14 29) #7# #2# 11305) si::fset)) #2# 11305) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 65 12 19 2 66 15 0 15 67 15 68 19 3 69 1 0 73 29) #8=#A(t (70) (common-lisp-user::open-exp-window ext::location (defun common-lisp-user::open-exp-window) (#2# . 11817) ext::annotate :lambda-list (common-lisp-user::title &key (common-lisp-user::width 300) (common-lisp-user::height 300) (common-lisp-user::visible t) (common-lisp-user::x 300) (common-lisp-user::y 300)) common-lisp-user::title (nil :y :x :visible :height :width) common-lisp-user::width common-lisp-user::height t common-lisp-user::visible common-lisp-user::x common-lisp-user::y stringp symbolp common-lisp-user::current-model common-lisp-user::agi common-lisp-user::get-module-fct common-lisp-user::instance common-lisp-user::agi-window-list :test string-equal assoc common-lisp-user::exists common-lisp-user::win common-lisp-user::open-rpm-window? common-lisp-user::rpm-window-visible-status common-lisp-user::remove-all-items-from-rpm-window common-lisp-user::device-update-attended-loc common-lisp-user::close-rpm-window #:g19352 remove #:g19353 (setf common-lisp-user::agi-window-list) common-lisp-user::global-agi-table remhash :visible :title "~a (~a)" format :width :height :x :y common-lisp-user::make-rpm-window #:g19358 #:g19356 #:g19357 (setf common-lisp-user::agi-window-list) common-lisp-user::current-meta-process si::hash-set common-lisp-user::select-rpm-window round common-lisp-user::set-visual-center-point *error-output* #9="~&#|Warning~:[~*~;~@[ (in model ~a)~]~]: ~@? |#~%" common-lisp-user::current-mp-fct common-lisp-user::mp-models length > "Cannot create an experiment window without a current model" finish-output "Experiment window title must be a string or symbol, but ~s was specified." #Y(common-lisp-user::open-exp-window nil nil (24 45 7 28 8 22 40 3 9 300 46 9 22 40 3 9 300 46 10 22 40 3 14 11 46 12 22 40 3 9 300 46 13 22 40 3 9 300 46 14 10 5 16 15 40 5 10 5 16 16 39 313 19 0 17 39 267 15 18 19 1 19 45 20 13 6 13 0 19 1 21 12 14 22 15 23 19 4 24 45 25 10 0 39 4 10 0 5 45 26 10 0 39 29 13 0 19 1 27 39 22 10 5 39 6 13 0 19 1 28 40 11 10 5 40 6 13 0 19 1 28 76 39 14 13 0 19 1 29 13 0 77 19 2 30 38 60 10 0 39 56 13 0 19 1 27 39 6 13 0 19 1 31 10 2 45 32 13 2 13 3 19 1 21 12 19 2 33 45 34 13 0 13 1 33 35 18 2 43 1 43 1 10 1 5 12 13 2 19 1 36 17 37 75 51 0 10 0 76 39 92 14 38 13 5 14 39 77 15 40 13 8 19 0 17 12 19 4 41 12 14 42 13 7 14 43 13 6 14 44 13 4 14 45 13 3 19 12 46 51 0 13 8 10 0 3 45 47 10 3 45 48 13 1 13 0 19 1 21 3 45 49 13 0 13 1 33 50 18 2 43 3 13 0 13 2 19 1 36 12 19 0 51 12 19 0 17 3 12 19 3 52 13 0 19 1 53 13 7 9 2 19 2 54 12 13 6 9 2 19 2 54 12 19 2 55 10 0 73 43 3 38 40 14 56 15 57 19 0 58 73 39 12 19 0 59 16 60 12 9 1 19 2 61 12 19 0 17 12 15 62 19 5 41 12 14 56 19 1 63 22 73 38 42 14 56 15 57 19 0 58 73 39 12 19 0 59 16 60 12 9 1 19 2 61 12 19 0 17 12 15 64 13 5 19 6 41 12 14 56 19 1 63 22 73 29) #8# #2# 11817) si::fset function "Open an experiment window" si::set-documentation)) #2# 11817) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 14 12 19 2 15 1 0 73 29) #10=#A(t (16) (common-lisp-user::exp-window-owner ext::location (defun common-lisp-user::exp-window-owner) (#2# . 15591) ext::annotate :lambda-list (common-lisp-user::win) common-lisp-user::win common-lisp-user::agi-module make-instance common-lisp-user::instance common-lisp-user::global-agi-table gethash common-lisp-user::owner #Y(common-lisp-user::exp-window-owner nil nil (24 45 7 26 15 8 19 1 9 45 10 13 1 13 0 19 1 11 12 19 2 12 45 13 10 0 39 13 10 0 4 12 10 0 5 12 72 2 38 5 77 77 72 2 43 2 29) #10# #2# 15591) si::fset)) #2# 15591) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 56 12 19 2 57 1 0 73 29) #11=#A(t (58) (common-lisp-user::determine-exp-window ext::location (defun common-lisp-user::determine-exp-window) (#2# . 15812) ext::annotate :lambda-list (common-lisp-user::window) common-lisp-user::window common-lisp-user::current-model common-lisp-user::printing-module common-lisp-user::get-module-fct #:g19370 #:g19369 make-broadcast-stream common-lisp-user::printing-module-model-warnings #:g19371 *error-output* #:g19372 #:g19373 (setf common-lisp-user::printing-module-model-warnings) common-lisp-user::agi #:g19374 #:g19375 (setf common-lisp-user::printing-module-model-warnings) common-lisp-user::instance type-of common-lisp-user::rpm-window subtypep common-lisp-user::open-rpm-window? #9# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > "Window ~s is not currently open." format finish-output stringp symbolp common-lisp-user::agi-window-list :test string-equal assoc "~s is not the title of an open window in the current model." "There is no current model therefore a window title (~s) cannot be used as a reference." "~s is not a reference to an open window." = cdar "There is ~:[no~;more than one~] window to use in the current model." common-lisp-user::agi-module make-instance common-lisp-user::global-agi-table common-lisp-user::table hash-table-count common-lisp-user::hash-table-keys "There is no current model and more than one open experiment window.~%Therefore all window operations must specify a window." #Y(common-lisp-user::determine-exp-window nil nil (24 45 7 26 19 0 8 39 85 15 9 19 1 10 47 1 11 45 12 10 1 39 67 19 0 13 12 13 0 19 1 14 12 46 15 49 16 10 1 45 17 75 45 18 13 0 13 1 33 19 18 2 43 1 43 1 64 7 15 20 19 1 10 65 10 1 45 21 10 1 45 22 13 0 13 1 33 23 18 2 43 1 43 1 66 43 1 44 1 43 2 38 13 19 0 13 48 16 15 20 19 1 10 44 1 45 24 10 1 16 25 12 15 26 19 2 27 39 56 13 1 19 1 28 39 6 10 1 73 38 42 14 16 15 29 19 0 30 73 39 12 19 0 31 16 32 12 9 1 19 2 33 12 19 0 8 12 15 34 13 1 19 6 35 12 14 16 19 1 36 22 73 38 374 10 1 39 32 10 1 16 37 40 5 10 1 16 38 39 20 10 0 39 16 13 1 13 0 19 1 39 12 14 40 15 41 19 4 42 39 20 13 1 13 0 19 1 39 12 14 40 15 41 19 4 42 5 73 38 318 10 1 39 15 10 1 16 37 40 5 10 1 16 38 39 3 10 0 39 44 14 16 15 29 19 0 30 73 39 12 19 0 31 16 32 12 9 1 19 2 33 12 19 0 8 12 15 43 13 1 19 6 35 12 14 16 19 1 36 22 73 38 255 10 1 39 11 10 1 16 37 40 5 10 1 16 38 39 44 14 16 15 29 19 0 30 73 39 12 19 0 31 16 32 12 9 1 19 2 33 12 19 0 8 12 15 44 13 1 19 6 35 12 14 16 19 1 36 22 73 38 196 10 1 39 44 14 16 15 29 19 0 30 73 39 12 19 0 31 16 32 12 9 1 19 2 33 12 19 0 8 12 15 45 13 1 19 6 35 12 14 16 19 1 36 22 73 38 149 10 0 39 72 13 0 19 1 39 16 32 12 9 1 19 2 46 39 10 13 0 19 1 39 16 47 38 46 14 16 15 29 19 0 30 73 39 12 19 0 31 16 32 12 9 1 19 2 33 12 19 0 8 12 15 48 13 0 19 1 39 12 19 6 35 12 14 16 19 1 36 22 73 38 74 15 49 19 1 50 12 19 1 51 45 52 9 1 10 0 16 53 12 19 2 46 39 10 13 0 19 1 54 4 73 38 40 14 16 15 29 19 0 30 73 39 12 19 0 31 16 32 12 9 1 19 2 33 12 19 0 8 12 15 55 19 5 35 12 14 16 19 1 36 22 73 43 1 43 1 29) #11# #2# 15812) si::fset)) #2# 15812) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 74 12 19 2 75 15 0 15 76 15 77 19 3 78 1 0 73 29) #12=#A(t (79) (common-lisp-user::close-exp-window ext::location (defun common-lisp-user::close-exp-window) (#2# . 17755) ext::annotate :lambda-list (&optional (common-lisp-user::window nil)) common-lisp-user::window common-lisp-user::determine-exp-window common-lisp-user::it common-lisp-user::agi-module make-instance common-lisp-user::instance common-lisp-user::global-agi-table gethash common-lisp-user::owner common-lisp-user::close-rpm-window remhash #:g19400 common-lisp-user::*meta-processes* common-lisp-user::mps-table #:g19398 common-lisp-user::mps-current #:g19399 #:g19401 #:g19402 common-lisp-user::meta-processes si::structure-set #:g19403 #:g19405 common-lisp-user::valid-model-name common-lisp-user::meta-p-current-model #:g19404 #:g19406 common-lisp-user::meta-p-models #:g19407 common-lisp-user::meta-process #:g19408 #:g19410 common-lisp-user::meta-p-cannot-define-model + #:g19409 common-lisp-user::agi common-lisp-user::get-module-fct #:g19411 #:g19412 #:g19413 #:g19415 - #:g19414 *error-output* #9# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "~S does not name a model in the current meta-process" format finish-output "No actions taken in with-model because there is no current meta-process" #:g19416 #:g19417 "No actions taken in with-meta-process-eval because ~S does not name a meta-process" common-lisp-user::owner-instance common-lisp-user::agi-window-list common-lisp-user::owner-windows #:g19418 rassoc remove #:g19419 (setf common-lisp-user::agi-window-list) t "Could not close window ~s" #Y(common-lisp-user::close-exp-window nil nil (25 40 2 77 46 7 26 13 0 19 1 8 45 9 10 0 39 488 15 10 19 1 11 45 12 13 1 13 0 19 1 13 12 19 2 14 45 15 13 2 19 1 16 13 2 13 1 19 1 13 17 17 10 0 4 45 18 13 0 14 19 19 1 20 12 19 2 14 45 21 10 0 39 341 14 19 19 1 22 45 23 11 19 45 24 10 2 45 25 13 1 15 26 9 2 13 0 19 4 27 43 1 43 1 64 281 14 19 19 1 22 45 28 10 0 39 228 10 4 5 45 29 13 0 19 1 30 39 171 14 19 19 1 22 39 10 14 19 19 1 22 12 19 1 31 45 32 14 19 19 1 22 45 33 13 2 13 3 19 1 34 12 19 2 14 45 35 13 1 15 36 9 5 13 0 19 4 27 43 1 43 1 14 19 19 1 22 45 37 8 1 45 38 13 1 19 1 39 12 13 0 19 2 40 45 41 13 2 15 36 9 29 13 0 19 4 27 43 3 64 37 64 7 15 42 19 1 43 65 14 19 19 1 22 45 44 10 1 45 45 13 1 15 36 9 5 13 0 19 4 27 43 1 43 1 66 65 14 19 19 1 22 45 46 8 1 45 47 13 1 19 1 39 12 13 0 19 2 48 45 49 13 2 15 36 9 29 13 0 19 4 27 43 3 66 43 1 38 42 14 50 15 51 19 0 52 73 39 12 19 0 53 16 54 12 9 1 19 2 55 12 19 0 56 12 15 57 13 0 19 6 58 12 14 50 19 1 59 22 73 43 1 38 40 14 50 15 51 19 0 52 73 39 12 19 0 53 16 54 12 9 1 19 2 55 12 19 0 56 12 15 60 19 5 58 12 14 50 19 1 59 22 73 43 1 65 11 19 45 61 10 1 45 62 13 1 15 26 9 2 13 0 19 4 27 43 1 43 1 66 43 1 38 41 14 50 15 51 19 0 52 73 39 12 19 0 53 16 54 12 9 1 19 2 55 12 19 0 56 12 15 63 13 1 19 6 58 12 14 50 19 1 59 22 43 2 45 64 13 0 19 1 65 45 66 10 1 45 67 13 5 13 1 19 2 68 12 13 1 19 2 69 45 70 13 0 13 1 33 71 18 2 43 1 43 1 43 2 11 72 73 43 2 38 42 14 50 15 51 19 0 52 73 39 12 19 0 53 16 54 12 9 1 19 2 55 12 19 0 56 12 15 73 13 1 19 6 58 12 14 50 19 1 59 22 73 43 1 29) #12# #2# 17755) si::fset function "Close the experiment window" si::set-documentation)) #2# 17755) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 14 12 19 2 15 1 0 73 29) #13=#A(t (16) (common-lisp-user::close-all-exp-windows ext::location (defun common-lisp-user::close-all-exp-windows) (#2# . 19131) ext::annotate :lambda-list common-lisp-user::key common-lisp-user::value common-lisp-user::close-exp-window #Y(nil nil nil (24 45 6 24 45 7 26 13 1 19 1 8 29) #13# #2# 19131) common-lisp-user::agi-module make-instance common-lisp-user::global-agi-table maphash #Y(common-lisp-user::close-all-exp-windows nil nil (26 34 9 12 15 10 19 1 11 12 19 1 12 17 13 29) #13# #2# 19131) si::fset)) #2# 19131) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 22 12 19 2 23 15 0 15 24 15 25 19 3 26 1 0 73 29) #14=#A(t (27) (common-lisp-user::select-exp-window ext::location (defun common-lisp-user::select-exp-window) (#2# . 19331) ext::annotate :lambda-list (&optional (common-lisp-user::window nil)) common-lisp-user::window common-lisp-user::determine-exp-window common-lisp-user::it common-lisp-user::select-rpm-window t *error-output* #9# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "Select-exp-window failed." format finish-output #Y(common-lisp-user::select-exp-window nil nil (25 40 2 77 46 7 26 13 0 19 1 8 45 9 10 0 39 11 13 0 19 1 10 11 11 73 38 40 14 12 15 13 19 0 14 73 39 12 19 0 15 16 16 12 9 1 19 2 17 12 19 0 18 12 15 19 19 5 20 12 14 12 19 1 21 22 73 43 1 29) #14# #2# 19331) si::fset function "select the experiment window" si::set-documentation)) #2# 19331) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 22 12 19 2 23 15 0 15 24 15 25 19 3 26 1 0 73 29) #15=#A(t (27) (common-lisp-user::clear-exp-window ext::location (defun common-lisp-user::clear-exp-window) (#2# . 20157) ext::annotate :lambda-list (&optional (common-lisp-user::window nil)) common-lisp-user::window common-lisp-user::determine-exp-window common-lisp-user::it common-lisp-user::remove-all-items-from-rpm-window t *error-output* #9# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "clear-exp-window failed." format finish-output #Y(common-lisp-user::clear-exp-window nil nil (25 40 2 77 46 7 26 13 0 19 1 8 45 9 10 0 39 11 13 0 19 1 10 11 11 73 38 40 14 12 15 13 19 0 14 73 39 12 19 0 15 16 16 12 9 1 19 2 17 12 19 0 18 12 15 19 19 5 20 12 14 12 19 1 21 22 73 43 1 29) #15# #2# 20157) si::fset function "Erases everything in the experiment window" si::set-documentation)) #2# 20157) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 28 12 19 2 29 1 0 73 29) #16=#A(t (30) (common-lisp-user::determine-window-and-items ext::location (defun common-lisp-user::determine-window-and-items) (#2# . 20982) ext::annotate :lambda-list (common-lisp-user::items) common-lisp-user::items :window count = common-lisp-user::determine-exp-window length position > 1+ nth remove *error-output* #9# common-lisp-user::current-mp-fct common-lisp-user::mp-models common-lisp-user::current-model "The :window keyword parameter was specified by no value given." format finish-output find "The :window parameter was specified more than once." #Y(common-lisp-user::determine-window-and-items nil nil (24 45 7 26 9 0 14 8 13 0 19 2 9 12 19 2 10 39 12 77 19 1 11 12 13 0 72 2 38 203 9 1 14 8 13 0 19 2 9 12 19 2 10 39 17 10 0 16 12 12 14 8 13 0 19 2 13 12 19 2 14 39 51 14 8 13 0 19 2 13 16 15 12 10 0 17 16 12 19 1 11 12 14 8 14 8 13 0 19 2 13 16 15 12 10 0 17 16 12 13 0 19 2 17 12 19 2 17 12 72 2 38 120 9 1 14 8 13 0 19 2 9 12 19 2 10 39 44 14 18 15 19 19 0 20 73 39 12 19 0 21 16 12 12 9 1 19 2 14 12 19 0 22 12 15 23 19 5 24 14 18 19 1 25 77 13 0 72 2 38 62 14 8 13 0 19 2 26 39 44 14 18 15 19 19 0 20 73 39 12 19 0 21 16 12 12 9 1 19 2 14 12 19 0 22 12 15 27 19 5 24 14 18 19 1 25 77 13 0 72 2 38 10 77 19 1 11 12 13 0 72 2 29) #16# #2# 20982) si::fset)) #2# 20982) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 23 12 19 2 24 15 0 15 25 15 26 19 3 27 1 0 73 29) #17=#A(t (28) (common-lisp-user::add-items-to-exp-window ext::location (defun common-lisp-user::add-items-to-exp-window) (#2# . 21894) ext::annotate :lambda-list (&rest common-lisp-user::items) common-lisp-user::items common-lisp-user::determine-window-and-items common-lisp-user::window common-lisp-user::add-visual-items-to-rpm-window apply t *error-output* #9# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "No window available for add-items-to-exp-window." format finish-output #Y(common-lisp-user::add-items-to-exp-window nil nil (27 45 7 13 0 19 1 8 47 1 7 45 9 10 0 39 15 15 10 13 0 13 1 19 3 11 11 12 73 38 40 14 13 15 14 19 0 15 73 39 12 19 0 16 16 17 12 9 1 19 2 18 12 19 0 19 12 15 20 19 5 21 12 14 13 19 1 22 22 73 43 2 29) #17# #2# 21894) si::fset function "Add the specified items to the experiment window" si::set-documentation)) #2# 21894) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 23 12 19 2 24 15 0 15 25 15 26 19 3 27 1 0 73 29) #18=#A(t (28) (common-lisp-user::remove-items-from-exp-window ext::location (defun common-lisp-user::remove-items-from-exp-window) (#2# . 22822) ext::annotate :lambda-list (&rest common-lisp-user::items) common-lisp-user::items common-lisp-user::determine-window-and-items common-lisp-user::window common-lisp-user::remove-visual-items-from-rpm-window apply t *error-output* #9# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "No window available for remove-items-from-exp-window." format finish-output #Y(common-lisp-user::remove-items-from-exp-window nil nil (27 45 7 13 0 19 1 8 47 1 7 45 9 10 0 39 15 15 10 13 0 13 1 19 3 11 11 12 73 38 40 14 13 15 14 19 0 15 73 39 12 19 0 16 16 17 12 9 1 19 2 18 12 19 0 19 12 15 20 19 5 21 12 14 13 19 1 22 22 73 43 2 29) #18# #2# 22822) si::fset function "Remove the specified items from the experiment window" si::set-documentation)) #2# 22822) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 42 12 19 2 43 15 0 15 44 15 45 19 3 46 1 0 73 29) #19=#A(t (47) (common-lisp-user::add-text-to-exp-window ext::location (defun common-lisp-user::add-text-to-exp-window) (#2# . 23784) ext::annotate :lambda-list (&key (common-lisp-user::x 0) (common-lisp-user::y 0) (common-lisp-user::text #20="") (common-lisp-user::height 20) (common-lisp-user::width 75) (common-lisp-user::color 'common-lisp-user::black) (common-lisp-user::window nil) (common-lisp-user::font-size 12)) (nil :font-size :window :color :width :height :text :y :x) common-lisp-user::x common-lisp-user::y #20# common-lisp-user::text common-lisp-user::height common-lisp-user::width common-lisp-user::black common-lisp-user::color common-lisp-user::window common-lisp-user::font-size stringp common-lisp-user::determine-exp-window common-lisp-user::it :text :x :y :width :height :color :font-size common-lisp-user::make-static-text-for-rpm-window common-lisp-user::item common-lisp-user::add-visual-items-to-rpm-window *error-output* #9# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "No window available for adding a text item." format finish-output "Text must be a string in add-text-to-exp-window cannot add ~s." #Y(common-lisp-user::add-text-to-exp-window nil nil (28 7 22 40 3 9 0 46 8 22 40 3 9 0 46 9 22 40 3 15 10 46 11 22 40 3 9 20 46 12 22 40 3 9 75 46 13 22 40 3 15 14 46 15 22 40 2 77 46 16 22 40 3 9 12 46 17 10 5 16 18 39 104 13 1 19 1 19 45 20 10 0 39 50 13 0 14 21 13 6 14 22 13 8 14 23 13 7 14 24 13 4 14 25 13 5 14 26 13 3 14 27 13 1 19 15 28 45 29 13 1 13 0 19 2 30 10 0 73 43 1 38 40 14 31 15 32 19 0 33 73 39 12 19 0 34 16 35 12 9 1 19 2 36 12 19 0 37 12 15 38 19 5 39 12 14 31 19 1 40 22 73 43 1 38 42 14 31 15 32 19 0 33 73 39 12 19 0 34 16 35 12 9 1 19 2 36 12 19 0 37 12 15 41 13 5 19 6 39 12 14 31 19 1 40 22 73 29) #19# #2# 23784) si::fset function "Create and display a text item in the experiment window" si::set-documentation)) #2# 23784) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 40 12 19 2 41 15 0 15 42 15 43 19 3 44 1 0 73 29) #21=#A(t (45) (common-lisp-user::add-button-to-exp-window ext::location (defun common-lisp-user::add-button-to-exp-window) (#2# . 25027) ext::annotate :lambda-list (&key (common-lisp-user::x 0) (common-lisp-user::y 0) (common-lisp-user::text #22="Ok") (common-lisp-user::action nil) (common-lisp-user::height 18) (common-lisp-user::width 60) (common-lisp-user::color 'common-lisp-user::gray) (common-lisp-user::window nil)) (nil :window :color :width :height :action :text :y :x) common-lisp-user::x common-lisp-user::y #22# common-lisp-user::text common-lisp-user::action common-lisp-user::height common-lisp-user::width common-lisp-user::gray common-lisp-user::color common-lisp-user::window common-lisp-user::determine-exp-window common-lisp-user::it :x :y :text :action :height :width :color common-lisp-user::make-button-for-rpm-window common-lisp-user::item common-lisp-user::add-visual-items-to-rpm-window *error-output* #9# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "No window available for adding a button." format finish-output #Y(common-lisp-user::add-button-to-exp-window nil nil (28 7 22 40 3 9 0 46 8 22 40 3 9 0 46 9 22 40 3 15 10 46 11 22 40 2 77 46 12 22 40 3 9 18 46 13 22 40 3 9 60 46 14 22 40 3 15 15 46 16 22 40 2 77 46 17 13 0 19 1 18 45 19 10 0 39 50 13 0 14 20 13 8 14 21 13 7 14 22 13 6 14 23 13 5 14 24 13 4 14 25 13 3 14 26 13 2 19 15 27 45 28 13 1 13 0 19 2 29 10 0 73 43 1 38 40 14 30 15 31 19 0 32 73 39 12 19 0 33 16 34 12 9 1 19 2 35 12 19 0 36 12 15 37 19 5 38 12 14 30 19 1 39 22 73 43 1 29) #21# #2# 25027) si::fset function "Create and display a button item in the experiment window" si::set-documentation)) #2# 25027) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 30 12 19 2 31 15 0 15 32 15 33 19 3 34 1 0 73 29) #23=#A(t (35) (common-lisp-user::add-line-to-exp-window ext::location (defun common-lisp-user::add-line-to-exp-window) (#2# . 26020) ext::annotate :lambda-list (common-lisp-user::start-pt common-lisp-user::end-pt &key (common-lisp-user::color 'common-lisp-user::black) (common-lisp-user::window nil)) common-lisp-user::start-pt common-lisp-user::end-pt (nil :window :color) common-lisp-user::black common-lisp-user::color common-lisp-user::window common-lisp-user::determine-exp-window common-lisp-user::it round mapcar common-lisp-user::make-line-for-rpm-window common-lisp-user::item common-lisp-user::add-visual-items-to-rpm-window *error-output* #9# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "No window available for adding a line." format finish-output #Y(common-lisp-user::add-line-to-exp-window nil nil (24 45 7 24 45 8 28 9 22 40 3 15 10 46 11 22 40 2 77 46 12 13 0 19 1 13 45 14 10 0 39 40 13 0 15 15 13 4 19 2 16 12 15 15 13 3 19 2 16 12 13 2 19 4 17 45 18 13 1 13 0 19 2 19 10 0 73 43 1 38 40 14 20 15 21 19 0 22 73 39 12 19 0 23 16 24 12 9 1 19 2 25 12 19 0 26 12 15 27 19 5 28 12 14 20 19 1 29 22 73 43 1 29) #23# #2# 26020) si::fset function "Create and display a line item in the experiment window" si::set-documentation)) #2# 26020) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 2 77 77 15 6 19 15 7 15 0 15 8 15 9 15 10 19 4 11 15 12 15 8 15 13 15 14 19 4 11 15 12 14 15 77 15 16 19 4 11 15 0 19 1 24 78 20 15 12 1 22 12 19 2 23 1 0 73 29) #24=#A(t (25) (common-lisp-user::data "DATA-" (labels array) ((labels nil t nil 0 nil) (array nil t nil 1 nil)) common-lisp-user::copy-data (common-lisp-user::make-data) common-lisp-user::data-p si::define-structure ext::location (defstruct common-lisp-user::data) (#2# . 26653) ext::annotate common-lisp-user::make-data (defun common-lisp-user::make-data) (#2# . 26653) :lambda-list (&key #25=#:labels #26=#:array) (nil :array :labels) #25# #26# 0 si::make-structure #Y(common-lisp-user::make-data nil nil (28 17 22 40 2 77 46 18 22 40 2 77 46 19 15 20 13 1 13 0 19 3 21 29) #24# #2# 26653) si::fset find-class)) #2# 26653) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 21 12 14 22 9 2 19 4 23 1 0 73 29) #27=#A(t (24) (common-lisp-user::/-safe ext::location (defmacro common-lisp-user::/-safe) (#2# . 27299) ext::annotate :lambda-list (number &rest common-lisp-user::dividers) #:g19421 #:g19420 #:g19422 si::dm-too-few-arguments number common-lisp-user::dividers / max si::%dolist-var common-lisp-user::divider if zerop #:g19438 nconc #Y(common-lisp-user::/-safe nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 45 12 15 13 13 1 75 45 14 10 1 45 15 75 45 16 38 41 10 1 4 51 0 15 17 15 18 10 0 6 2 12 9 1 10 0 6 4 6 1 45 19 13 3 13 0 19 2 20 51 3 43 1 10 1 5 51 1 10 1 40 -43 75 51 0 10 2 43 2 43 1 7 3 73 29) #27# #2# 27299) t si::fset)) #2# 27299) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 27 12 19 2 28 1 0 73 29) #28=#A(t (29) (common-lisp-user::numbers-list ext::location (defun common-lisp-user::numbers-list) (#2# . 27497) ext::annotate :lambda-list (structure) structure list common-lisp-user::data-p common-lisp-user::data-array arrayp array-total-size si::%dotimes-var common-lisp-user::i row-major-aref common-lisp-user::data numberp 1+ < listp si::%dolist-var nreverse append t "~&UNKNOWN DATA FORMAT ~S NOT COMPATIBLE WITH NUMBERS LIST.~%" format #Y(common-lisp-user::numbers-list nil nil (24 45 7 26 75 45 8 13 1 19 1 9 39 8 13 1 19 1 10 51 1 10 1 16 11 39 55 10 1 16 12 45 13 8 0 45 14 38 30 13 3 10 0 17 15 45 16 10 0 16 17 39 8 13 0 10 3 3 51 3 43 1 10 0 16 18 51 0 13 0 13 1 19 2 19 40 -37 43 2 38 94 10 1 16 20 39 64 10 1 45 21 75 45 16 38 47 10 1 4 51 0 10 0 16 20 39 18 13 0 19 1 0 16 22 12 13 2 19 2 23 51 2 38 14 10 0 16 17 39 8 13 0 10 2 3 51 2 10 1 5 51 1 10 1 40 -49 43 2 38 25 10 1 16 17 39 10 13 1 10 0 3 51 0 38 10 14 24 15 25 13 1 19 3 26 10 0 16 22 43 1 29) #28# #2# 27497) si::fset)) #2# 27497) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 9 12 19 2 10 1 0 73 29) #29=#A(t (11) (common-lisp-user::square-data ext::location (defun common-lisp-user::square-data) (#2# . 28275) ext::annotate :lambda-list (common-lisp-user::x) common-lisp-user::x * #Y(common-lisp-user::square-data nil nil (24 45 7 26 13 0 13 0 19 2 8 29) #29# #2# 28275) si::fset)) #2# 28275) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 14 12 19 2 15 1 0 73 29) #30=#A(t (16) (common-lisp-user::sum-list ext::location (defun common-lisp-user::sum-list) (#2# . 28310) ext::annotate :lambda-list (list) list #31=0.0 common-lisp-user::sum si::%dolist-var common-lisp-user::data #:g19462 + #Y(common-lisp-user::sum-list nil nil (24 45 7 26 1 8 45 9 10 1 45 10 75 45 11 38 26 10 1 4 51 0 10 0 45 12 13 3 13 0 19 2 13 51 3 43 1 10 1 5 51 1 10 1 40 -28 75 51 0 10 2 73 43 2 43 1 29) #30# #2# 28310) si::fset)) #2# 28310) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 15 12 19 2 16 1 0 73 29) #32=#A(t (17) (common-lisp-user::square-list ext::location (defun common-lisp-user::square-list) (#2# . 28406) ext::annotate :lambda-list (list) list #31# common-lisp-user::sum si::%dolist-var common-lisp-user::data common-lisp-user::square-data #:g19470 + #Y(common-lisp-user::square-list nil nil (24 45 7 26 1 8 45 9 10 1 45 10 75 45 11 38 29 10 1 4 51 0 13 0 19 1 12 45 13 13 3 13 0 19 2 14 51 3 43 1 10 1 5 51 1 10 1 40 -31 75 51 0 10 2 73 43 2 43 1 29) #32# #2# 28406) si::fset)) #2# 28406) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 17 12 19 2 18 1 0 73 29) #33=#A(t (19) (common-lisp-user::product-list ext::location (defun common-lisp-user::product-list) (#2# . 28519) ext::annotate :lambda-list (common-lisp-user::list1 common-lisp-user::list2) common-lisp-user::list1 common-lisp-user::list2 #31# common-lisp-user::sum 0 #:g19479 #:g19480 * #:g19478 + #Y(common-lisp-user::product-list nil nil (24 45 7 24 45 8 26 1 9 45 10 58 60 81 57 11 61 1 1 10 4 76 40 4 10 3 76 39 6 10 2 73 36 1 10 4 45 12 10 0 4 12 10 0 5 51 0 10 0 51 5 43 1 10 3 45 13 10 0 4 12 10 0 5 51 0 10 0 51 4 43 1 19 2 14 45 15 13 3 13 0 19 2 16 51 3 43 1 35 0 0 62 73 63 43 1 29) #33# #2# 28519) si::fset)) #2# 28519) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 45 12 19 2 46 1 0 73 29) #34=#A(t (47) (common-lisp-user::mean-deviation ext::location (defun common-lisp-user::mean-deviation) (#2# . 28688) ext::annotate :lambda-list (common-lisp-user::results common-lisp-user::data &key (common-lisp-user::output t)) common-lisp-user::results common-lisp-user::data (nil :output) t common-lisp-user::output common-lisp-user::numbers-list common-lisp-user::results-list common-lisp-user::data-list length min common-lisp-user::n common-lisp-user::opened stringp pathnamep :direction :output :if-exists :append :if-does-not-exist :create open streamp eq "~&OUTPUT ARGUMENT ~S TO MEAN-DEVIATION IS NOT VALID.~%" format "IT MUST BE A STRING, PATHNAME, STREAM, T OR NIL.~%" = "~&ERROR: ~S AND ~S DO NOT HAVE THE SAME NUMBER OF NUMBERS.~%" common-lisp-user::square-list -2.0 common-lisp-user::product-list * + / sqrt common-lisp-user::result "~&MEAN DEVIATION: ~6,3F~%" close #Y(common-lisp-user::mean-deviation nil nil (24 45 7 24 45 8 28 9 22 40 3 14 10 46 11 13 2 19 1 12 45 13 13 2 19 1 12 45 14 10 1 16 15 12 10 0 16 15 12 19 2 16 45 17 75 45 18 10 4 16 19 40 5 10 4 16 20 39 26 13 4 14 21 14 22 14 23 14 24 14 25 14 26 19 7 27 51 4 11 10 51 0 38 41 10 4 16 28 40 12 10 4 76 40 7 13 4 11 10 17 29 76 39 21 14 10 15 30 13 4 19 3 31 14 10 15 32 19 2 31 11 10 51 4 10 3 16 15 12 10 2 16 15 12 19 2 33 76 39 12 14 10 15 34 13 6 13 5 19 4 31 13 3 19 1 35 12 13 2 19 1 35 12 15 36 13 3 13 2 19 2 37 12 19 2 38 12 19 3 39 12 13 1 19 2 40 16 41 45 42 13 5 15 43 13 0 19 3 31 10 1 39 6 13 5 19 1 44 10 0 73 43 1 43 4 29) #34# #2# 28688) si::fset)) #2# 28688) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 49 12 19 2 50 1 0 73 29) #35=#A(t (51) (common-lisp-user::correlation ext::location (defun common-lisp-user::correlation) (#2# . 29874) ext::annotate :lambda-list (common-lisp-user::results common-lisp-user::data &key (common-lisp-user::output t)) common-lisp-user::results common-lisp-user::data (nil :output) t common-lisp-user::output common-lisp-user::numbers-list common-lisp-user::results-list common-lisp-user::data-list length min common-lisp-user::n common-lisp-user::sum-list zerop / common-lisp-user::average-results common-lisp-user::average-data common-lisp-user::opened stringp pathnamep :direction :output :if-exists :append :if-does-not-exist :create open streamp eq "~&OUTPUT ARGUMENT ~S TO CORRELATION IS NOT VALID.~%" format "IT MUST BE A STRING, PATHNAME, STREAM, T OR NIL.~%" = "~&ERROR: ~S AND ~S DO NOT HAVE THE SAME NUMBER OF NUMBERS.~%" common-lisp-user::product-list * - common-lisp-user::square-list common-lisp-user::square-data sqrt common-lisp-user::result "~&CORRELATION: ~6,3F~%" close #Y(common-lisp-user::correlation nil nil (24 45 7 24 45 8 28 9 22 40 3 14 10 46 11 13 2 19 1 12 45 13 13 2 19 1 12 45 14 10 1 16 15 12 10 0 16 15 12 19 2 16 45 17 13 2 19 1 18 12 10 0 16 19 39 6 8 1 73 38 4 10 0 73 12 19 2 20 45 21 13 2 19 1 18 12 10 1 16 19 39 6 8 1 73 38 4 10 1 73 12 19 2 20 45 22 75 45 23 10 6 16 24 40 5 10 6 16 25 39 26 13 6 14 26 14 27 14 28 14 29 14 30 14 31 19 7 32 51 6 11 10 51 0 38 41 10 6 16 33 40 12 10 6 76 40 7 13 6 11 10 17 34 76 39 21 14 10 15 35 13 6 19 3 36 14 10 15 37 19 2 36 11 10 51 6 10 5 16 15 12 10 4 16 15 12 19 2 38 76 39 12 14 10 15 39 13 8 13 7 19 4 36 13 5 13 4 19 2 40 12 10 3 16 19 39 6 8 1 73 38 4 10 3 73 12 19 2 20 12 13 2 13 1 19 2 41 12 19 2 42 12 13 5 19 1 43 12 10 3 16 19 39 6 8 1 73 38 4 10 3 73 12 19 2 20 12 13 2 19 1 44 12 19 2 42 16 45 12 13 4 19 1 43 12 10 3 16 19 39 6 8 1 73 38 4 10 3 73 12 19 2 20 12 13 1 19 1 44 12 19 2 42 16 45 12 19 2 41 16 19 39 6 8 1 73 38 78 13 5 19 1 43 12 10 3 16 19 39 6 8 1 73 38 4 10 3 73 12 19 2 20 12 13 2 19 1 44 12 19 2 42 16 45 12 13 4 19 1 43 12 10 3 16 19 39 6 8 1 73 38 4 10 3 73 12 19 2 20 12 13 1 19 1 44 12 19 2 42 16 45 12 19 2 41 12 19 2 20 45 46 13 7 15 47 13 0 19 3 36 10 1 39 6 13 7 19 1 48 10 0 73 43 1 43 6 29) #35# #2# 29874) si::fset)) #2# 29874))
