(#Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ((ftype (function (t t t) t) common-lisp-user::update-utility-for-compiled-production) proclaim)) #1=#P"C:/Users/Son Pham/Desktop/actr7/modules/production-compilation.lisp" 0) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ((ftype (function (t) t) common-lisp-user::spp-fct) proclaim)) #1# 36802) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ((ftype (function (t t t) t) common-lisp-user::initialize-utility-for-compiled-production) proclaim)) #1# 36845) #Y(si::bytecodes nil nil (19 0 0 29) #A(t (1) (common-lisp-user::suppress-extension-warnings)) #1# 36927) #Y(si::bytecodes nil nil (11 0 76 39 89 1 1 16 2 39 39 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 10 15 1 19 6 11 14 3 19 1 12 1 13 16 2 39 39 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 14 15 13 19 6 11 14 3 19 1 12 15 15 14 16 14 17 15 18 19 4 19 39 14 15 15 14 16 14 17 15 18 19 4 20 52 16 14 21 15 15 14 22 15 23 14 24 77 14 25 15 1 19 8 26 12 11 16 3 52 16 15 1 15 27 15 28 15 29 19 4 30 15 1 14 31 77 15 32 19 4 30 15 1 1 44 12 19 2 45 15 13 15 27 15 46 15 47 19 4 30 15 13 14 31 77 15 48 19 4 30 15 13 1 51 12 19 2 45 15 1 15 27 15 52 15 53 19 4 30 15 1 15 13 9 1 19 3 54 1 1 73 29) #2=#A(t (55) (common-lisp-user::*suppress-extend-item-warning* common-lisp-user::production-user-created fboundp *error-output* #3="~&#|Warning~:[~*~;~@[ (in model ~a)~]~]: ~@? |#~%" common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model #4="Function ~s already exists and is being redefined." format finish-output common-lisp-user::production-user-created-setf #5="Function ~s already exists and is being redefined." common-lisp-user::user-created common-lisp-user::*production-parameters-list* :key common-lisp-user::act-r-production-parameter-name find remove :name :default-value t :default-function :accessor common-lisp-user::make-act-r-production-parameter ext::location (defun common-lisp-user::production-user-created) (#1# . 37022) ext::annotate :lambda-list #6=(common-lisp-user::production-name) common-lisp-user::production-name common-lisp-user::get-production common-lisp-user::production common-lisp-user::production? common-lisp-user::production-parameter-values gethash common-lisp-user::exists common-lisp-user::value common-lisp-user::production-parameter-default si::hash-set #7="~S called with invalid production name." #Y(common-lisp-user::production-user-created nil nil (24 45 33 26 13 0 19 1 34 45 35 13 0 19 1 36 39 59 15 15 13 0 19 1 37 12 19 2 38 47 1 39 45 40 10 1 39 6 10 0 73 38 30 15 15 13 2 19 1 37 12 15 15 14 16 14 17 15 18 19 4 19 12 13 2 19 2 41 12 19 3 42 43 2 38 42 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 43 15 1 19 6 11 12 14 3 19 1 12 22 73 43 1 29) #2# #1# 37022) si::fset (defun common-lisp-user::production-user-created-setf) (#1# . 37022) #8=(common-lisp-user::production-name common-lisp-user::new-value) common-lisp-user::new-value #9="Setf of ~S called with invalid production." #Y(common-lisp-user::production-user-created-setf nil nil (24 45 33 24 45 49 26 13 1 19 1 34 45 35 13 0 19 1 36 39 16 15 15 13 0 19 1 37 12 13 1 19 3 42 38 42 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 50 15 1 19 6 11 12 14 3 19 1 12 22 73 43 1 29) #2# #1# 37022) (defsetf common-lisp-user::production-user-created) (#1# . 37022) si::do-defsetf)) #1# 37022) #Y(si::bytecodes nil nil (11 0 76 39 89 1 1 16 2 39 39 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 10 15 1 19 6 11 14 3 19 1 12 1 13 16 2 39 39 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 14 15 13 19 6 11 14 3 19 1 12 15 15 14 16 14 17 15 18 19 4 19 39 14 15 15 14 16 14 17 15 18 19 4 20 52 16 14 21 15 15 14 22 77 14 23 77 14 24 15 1 19 8 25 12 11 16 3 52 16 15 1 15 26 15 27 15 28 19 4 29 15 1 14 30 77 15 31 19 4 29 15 1 1 43 12 19 2 44 15 13 15 26 15 45 15 46 19 4 29 15 13 14 30 77 15 47 19 4 29 15 13 1 50 12 19 2 44 15 1 15 26 15 51 15 52 19 4 29 15 1 15 13 9 1 19 3 53 1 1 73 29) #10=#A(t (54) (common-lisp-user::*suppress-extend-item-warning* common-lisp-user::production-compilation-instan fboundp *error-output* #3# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model #4# format finish-output common-lisp-user::production-compilation-instan-setf #5# common-lisp-user::compilation-instan common-lisp-user::*production-parameters-list* :key common-lisp-user::act-r-production-parameter-name find remove :name :default-value :default-function :accessor common-lisp-user::make-act-r-production-parameter ext::location (defun common-lisp-user::production-compilation-instan) (#1# . 37074) ext::annotate :lambda-list #6# common-lisp-user::production-name common-lisp-user::get-production common-lisp-user::production common-lisp-user::production? common-lisp-user::production-parameter-values gethash common-lisp-user::exists common-lisp-user::value common-lisp-user::production-parameter-default si::hash-set #7# #Y(common-lisp-user::production-compilation-instan nil nil (24 45 32 26 13 0 19 1 33 45 34 13 0 19 1 35 39 59 15 15 13 0 19 1 36 12 19 2 37 47 1 38 45 39 10 1 39 6 10 0 73 38 30 15 15 13 2 19 1 36 12 15 15 14 16 14 17 15 18 19 4 19 12 13 2 19 2 40 12 19 3 41 43 2 38 42 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 42 15 1 19 6 11 12 14 3 19 1 12 22 73 43 1 29) #10# #1# 37074) si::fset (defun common-lisp-user::production-compilation-instan-setf) (#1# . 37074) #8# common-lisp-user::new-value #9# #Y(common-lisp-user::production-compilation-instan-setf nil nil (24 45 32 24 45 48 26 13 1 19 1 33 45 34 13 0 19 1 35 39 16 15 15 13 0 19 1 36 12 13 1 19 3 41 38 42 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 49 15 1 19 6 11 12 14 3 19 1 12 22 73 43 1 29) #10# #1# 37074) (defsetf common-lisp-user::production-compilation-instan) (#1# . 37074) si::do-defsetf)) #1# 37074) #Y(si::bytecodes nil nil (11 0 76 39 89 1 1 16 2 39 39 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 10 15 1 19 6 11 14 3 19 1 12 1 13 16 2 39 39 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 14 15 13 19 6 11 14 3 19 1 12 15 15 14 16 14 17 15 18 19 4 19 39 14 15 15 14 16 14 17 15 18 19 4 20 52 16 14 21 15 15 14 22 77 14 23 77 14 24 15 1 19 8 25 12 11 16 3 52 16 15 1 15 26 15 27 15 28 19 4 29 15 1 14 30 77 15 31 19 4 29 15 1 1 43 12 19 2 44 15 13 15 26 15 45 15 46 19 4 29 15 13 14 30 77 15 47 19 4 29 15 13 1 50 12 19 2 44 15 1 15 26 15 51 15 52 19 4 29 15 1 15 13 9 1 19 3 53 1 1 73 29) #11=#A(t (54) (common-lisp-user::*suppress-extend-item-warning* common-lisp-user::production-drop-out-buffers-map fboundp *error-output* #3# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model #4# format finish-output common-lisp-user::production-drop-out-buffers-map-setf #5# common-lisp-user::drop-out-buffers-map common-lisp-user::*production-parameters-list* :key common-lisp-user::act-r-production-parameter-name find remove :name :default-value :default-function :accessor common-lisp-user::make-act-r-production-parameter ext::location (defun common-lisp-user::production-drop-out-buffers-map) (#1# . 37313) ext::annotate :lambda-list #6# common-lisp-user::production-name common-lisp-user::get-production common-lisp-user::production common-lisp-user::production? common-lisp-user::production-parameter-values gethash common-lisp-user::exists common-lisp-user::value common-lisp-user::production-parameter-default si::hash-set #7# #Y(common-lisp-user::production-drop-out-buffers-map nil nil (24 45 32 26 13 0 19 1 33 45 34 13 0 19 1 35 39 59 15 15 13 0 19 1 36 12 19 2 37 47 1 38 45 39 10 1 39 6 10 0 73 38 30 15 15 13 2 19 1 36 12 15 15 14 16 14 17 15 18 19 4 19 12 13 2 19 2 40 12 19 3 41 43 2 38 42 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 42 15 1 19 6 11 12 14 3 19 1 12 22 73 43 1 29) #11# #1# 37313) si::fset (defun common-lisp-user::production-drop-out-buffers-map-setf) (#1# . 37313) #8# common-lisp-user::new-value #9# #Y(common-lisp-user::production-drop-out-buffers-map-setf nil nil (24 45 32 24 45 48 26 13 1 19 1 33 45 34 13 0 19 1 35 39 16 15 15 13 0 19 1 36 12 13 1 19 3 41 38 42 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 49 15 1 19 6 11 12 14 3 19 1 12 22 73 43 1 29) #11# #1# 37313) (defsetf common-lisp-user::production-drop-out-buffers-map) (#1# . 37313) si::do-defsetf)) #1# 37313) #Y(si::bytecodes nil nil (11 0 76 39 89 1 1 16 2 39 39 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 10 15 1 19 6 11 14 3 19 1 12 1 13 16 2 39 39 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 14 15 13 19 6 11 14 3 19 1 12 15 15 14 16 14 17 15 18 19 4 19 39 14 15 15 14 16 14 17 15 18 19 4 20 52 16 14 21 15 15 14 22 15 23 14 24 77 14 25 15 1 19 8 26 12 11 16 3 52 16 15 1 15 27 15 28 15 29 19 4 30 15 1 14 31 77 15 32 19 4 30 15 1 1 44 12 19 2 45 15 13 15 27 15 46 15 47 19 4 30 15 13 14 31 77 15 48 19 4 30 15 13 1 51 12 19 2 45 15 1 15 27 15 52 15 53 19 4 30 15 1 15 13 9 1 19 3 54 1 1 73 29) #12=#A(t (55) (common-lisp-user::*suppress-extend-item-warning* common-lisp-user::production-valid-1st-p fboundp *error-output* #3# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model #4# format finish-output common-lisp-user::production-valid-1st-p-setf #5# common-lisp-user::valid-1st-p common-lisp-user::*production-parameters-list* :key common-lisp-user::act-r-production-parameter-name find remove :name :default-value :unset :default-function :accessor common-lisp-user::make-act-r-production-parameter ext::location (defun common-lisp-user::production-valid-1st-p) (#1# . 37575) ext::annotate :lambda-list #6# common-lisp-user::production-name common-lisp-user::get-production common-lisp-user::production common-lisp-user::production? common-lisp-user::production-parameter-values gethash common-lisp-user::exists common-lisp-user::value common-lisp-user::production-parameter-default si::hash-set #7# #Y(common-lisp-user::production-valid-1st-p nil nil (24 45 33 26 13 0 19 1 34 45 35 13 0 19 1 36 39 59 15 15 13 0 19 1 37 12 19 2 38 47 1 39 45 40 10 1 39 6 10 0 73 38 30 15 15 13 2 19 1 37 12 15 15 14 16 14 17 15 18 19 4 19 12 13 2 19 2 41 12 19 3 42 43 2 38 42 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 43 15 1 19 6 11 12 14 3 19 1 12 22 73 43 1 29) #12# #1# 37575) si::fset (defun common-lisp-user::production-valid-1st-p-setf) (#1# . 37575) #8# common-lisp-user::new-value #9# #Y(common-lisp-user::production-valid-1st-p-setf nil nil (24 45 33 24 45 49 26 13 1 19 1 34 45 35 13 0 19 1 36 39 16 15 15 13 0 19 1 37 12 13 1 19 3 42 38 42 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 50 15 1 19 6 11 12 14 3 19 1 12 22 73 43 1 29) #12# #1# 37575) (defsetf common-lisp-user::production-valid-1st-p) (#1# . 37575) si::do-defsetf)) #1# 37575) #Y(si::bytecodes nil nil (11 0 76 39 89 1 1 16 2 39 39 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 10 15 1 19 6 11 14 3 19 1 12 1 13 16 2 39 39 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 14 15 13 19 6 11 14 3 19 1 12 15 15 14 16 14 17 15 18 19 4 19 39 14 15 15 14 16 14 17 15 18 19 4 20 52 16 14 21 15 15 14 22 15 23 14 24 77 14 25 15 1 19 8 26 12 11 16 3 52 16 15 1 15 27 15 28 15 29 19 4 30 15 1 14 31 77 15 32 19 4 30 15 1 1 44 12 19 2 45 15 13 15 27 15 46 15 47 19 4 30 15 13 14 31 77 15 48 19 4 30 15 13 1 51 12 19 2 45 15 1 15 27 15 52 15 53 19 4 30 15 1 15 13 9 1 19 3 54 1 1 73 29) #13=#A(t (55) (common-lisp-user::*suppress-extend-item-warning* common-lisp-user::production-valid-for-compilation fboundp *error-output* #3# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model #4# format finish-output common-lisp-user::production-valid-for-compilation-setf #5# common-lisp-user::valid-for-compilation common-lisp-user::*production-parameters-list* :key common-lisp-user::act-r-production-parameter-name find remove :name :default-value :unset :default-function :accessor common-lisp-user::make-act-r-production-parameter ext::location (defun common-lisp-user::production-valid-for-compilation) (#1# . 37694) ext::annotate :lambda-list #6# common-lisp-user::production-name common-lisp-user::get-production common-lisp-user::production common-lisp-user::production? common-lisp-user::production-parameter-values gethash common-lisp-user::exists common-lisp-user::value common-lisp-user::production-parameter-default si::hash-set #7# #Y(common-lisp-user::production-valid-for-compilation nil nil (24 45 33 26 13 0 19 1 34 45 35 13 0 19 1 36 39 59 15 15 13 0 19 1 37 12 19 2 38 47 1 39 45 40 10 1 39 6 10 0 73 38 30 15 15 13 2 19 1 37 12 15 15 14 16 14 17 15 18 19 4 19 12 13 2 19 2 41 12 19 3 42 43 2 38 42 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 43 15 1 19 6 11 12 14 3 19 1 12 22 73 43 1 29) #13# #1# 37694) si::fset (defun common-lisp-user::production-valid-for-compilation-setf) (#1# . 37694) #8# common-lisp-user::new-value #9# #Y(common-lisp-user::production-valid-for-compilation-setf nil nil (24 45 33 24 45 49 26 13 1 19 1 34 45 35 13 0 19 1 36 39 16 15 15 13 0 19 1 37 12 13 1 19 3 42 38 42 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 50 15 1 19 6 11 12 14 3 19 1 12 22 73 43 1 29) #13# #1# 37694) (defsetf common-lisp-user::production-valid-for-compilation) (#1# . 37694) si::do-defsetf)) #1# 37694) #Y(si::bytecodes nil nil (11 0 76 39 89 1 1 16 2 39 39 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 10 15 1 19 6 11 14 3 19 1 12 1 13 16 2 39 39 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 14 15 13 19 6 11 14 3 19 1 12 15 15 14 16 14 17 15 18 19 4 19 39 14 15 15 14 16 14 17 15 18 19 4 20 52 16 14 21 15 15 14 22 15 23 14 24 77 14 25 15 1 19 8 26 12 11 16 3 52 16 15 1 15 27 15 28 15 29 19 4 30 15 1 14 31 77 15 32 19 4 30 15 1 1 44 12 19 2 45 15 13 15 27 15 46 15 47 19 4 30 15 13 14 31 77 15 48 19 4 30 15 13 1 51 12 19 2 45 15 1 15 27 15 52 15 53 19 4 30 15 1 15 13 9 1 19 3 54 1 1 73 29) #14=#A(t (55) (common-lisp-user::*suppress-extend-item-warning* common-lisp-user::production-invalid-compilation-reason fboundp *error-output* #3# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model #4# format finish-output common-lisp-user::production-invalid-compilation-reason-setf #5# common-lisp-user::invalid-compilation-reason common-lisp-user::*production-parameters-list* :key common-lisp-user::act-r-production-parameter-name find remove :name :default-value :unset :default-function :accessor common-lisp-user::make-act-r-production-parameter ext::location (defun common-lisp-user::production-invalid-compilation-reason) (#1# . 37759) ext::annotate :lambda-list #6# common-lisp-user::production-name common-lisp-user::get-production common-lisp-user::production common-lisp-user::production? common-lisp-user::production-parameter-values gethash common-lisp-user::exists common-lisp-user::value common-lisp-user::production-parameter-default si::hash-set #7# #Y(common-lisp-user::production-invalid-compilation-reason nil nil (24 45 33 26 13 0 19 1 34 45 35 13 0 19 1 36 39 59 15 15 13 0 19 1 37 12 19 2 38 47 1 39 45 40 10 1 39 6 10 0 73 38 30 15 15 13 2 19 1 37 12 15 15 14 16 14 17 15 18 19 4 19 12 13 2 19 2 41 12 19 3 42 43 2 38 42 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 43 15 1 19 6 11 12 14 3 19 1 12 22 73 43 1 29) #14# #1# 37759) si::fset (defun common-lisp-user::production-invalid-compilation-reason-setf) (#1# . 37759) #8# common-lisp-user::new-value #9# #Y(common-lisp-user::production-invalid-compilation-reason-setf nil nil (24 45 33 24 45 49 26 13 1 19 1 34 45 35 13 0 19 1 36 39 16 15 15 13 0 19 1 37 12 13 1 19 3 42 38 42 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 50 15 1 19 6 11 12 14 3 19 1 12 22 73 43 1 29) #14# #1# 37759) (defsetf common-lisp-user::production-invalid-compilation-reason) (#1# . 37759) si::do-defsetf)) #1# 37759) #Y(si::bytecodes nil nil (11 0 76 39 89 1 1 16 2 39 39 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 10 15 1 19 6 11 14 3 19 1 12 1 13 16 2 39 39 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 14 15 13 19 6 11 14 3 19 1 12 15 15 14 16 14 17 15 18 19 4 19 39 14 15 15 14 16 14 17 15 18 19 4 20 52 16 14 21 15 15 14 22 15 23 14 24 77 14 25 15 1 19 8 26 12 11 16 3 52 16 15 1 15 27 15 28 15 29 19 4 30 15 1 14 31 77 15 32 19 4 30 15 1 1 44 12 19 2 45 15 13 15 27 15 46 15 47 19 4 30 15 13 14 31 77 15 48 19 4 30 15 13 1 51 12 19 2 45 15 1 15 27 15 52 15 53 19 4 30 15 1 15 13 9 1 19 3 54 1 1 73 29) #15=#A(t (55) (common-lisp-user::*suppress-extend-item-warning* common-lisp-user::production-redundant-variables fboundp *error-output* #3# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model #4# format finish-output common-lisp-user::production-redundant-variables-setf #5# common-lisp-user::redundant-variables common-lisp-user::*production-parameters-list* :key common-lisp-user::act-r-production-parameter-name find remove :name :default-value :unset :default-function :accessor common-lisp-user::make-act-r-production-parameter ext::location (defun common-lisp-user::production-redundant-variables) (#1# . 37829) ext::annotate :lambda-list #6# common-lisp-user::production-name common-lisp-user::get-production common-lisp-user::production common-lisp-user::production? common-lisp-user::production-parameter-values gethash common-lisp-user::exists common-lisp-user::value common-lisp-user::production-parameter-default si::hash-set #7# #Y(common-lisp-user::production-redundant-variables nil nil (24 45 33 26 13 0 19 1 34 45 35 13 0 19 1 36 39 59 15 15 13 0 19 1 37 12 19 2 38 47 1 39 45 40 10 1 39 6 10 0 73 38 30 15 15 13 2 19 1 37 12 15 15 14 16 14 17 15 18 19 4 19 12 13 2 19 2 41 12 19 3 42 43 2 38 42 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 43 15 1 19 6 11 12 14 3 19 1 12 22 73 43 1 29) #15# #1# 37829) si::fset (defun common-lisp-user::production-redundant-variables-setf) (#1# . 37829) #8# common-lisp-user::new-value #9# #Y(common-lisp-user::production-redundant-variables-setf nil nil (24 45 33 24 45 49 26 13 1 19 1 34 45 35 13 0 19 1 36 39 16 15 15 13 0 19 1 37 12 13 1 19 3 42 38 42 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 50 15 1 19 6 11 12 14 3 19 1 12 22 73 43 1 29) #15# #1# 37829) (defsetf common-lisp-user::production-redundant-variables) (#1# . 37829) si::do-defsetf)) #1# 37829) #Y(si::bytecodes nil nil (19 0 0 29) #A(t (1) (common-lisp-user::unsuppress-extension-warnings)) #1# 37892) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 9 77 77 15 6 19 15 7 15 0 15 8 15 9 15 10 19 4 11 15 12 15 8 15 13 15 14 19 4 11 15 12 14 15 77 15 16 19 4 11 15 0 19 1 34 78 30 15 12 1 32 12 19 2 33 1 0 73 29) #16=#A(t (35) (common-lisp-user::comp-buffer-type "COMP-BUFFER-TYPE-" (common-lisp-user::name (common-lisp-user::table #17=(make-hash-table :test 'equalp)) common-lisp-user::compose map common-lisp-user::consistency common-lisp-user::buffers common-lisp-user::pre-instantiate common-lisp-user::drop-out common-lisp-user::whynot-reason) ((common-lisp-user::name nil t nil 0 nil) (common-lisp-user::table #17# t nil 1 nil) (common-lisp-user::compose nil t nil 2 nil) (map nil t nil 3 nil) (common-lisp-user::consistency nil t nil 4 nil) (common-lisp-user::buffers nil t nil 5 nil) (common-lisp-user::pre-instantiate nil t nil 6 nil) (common-lisp-user::drop-out nil t nil 7 nil) (common-lisp-user::whynot-reason nil t nil 8 nil)) common-lisp-user::copy-comp-buffer-type (common-lisp-user::make-comp-buffer-type) common-lisp-user::comp-buffer-type-p si::define-structure ext::location (defstruct common-lisp-user::comp-buffer-type) (#1# . 37925) ext::annotate common-lisp-user::make-comp-buffer-type (defun common-lisp-user::make-comp-buffer-type) (#1# . 37925) :lambda-list (&key #18=#:name (#19=#:table (make-hash-table :test 'equalp)) #20=#:compose #21=#:map #22=#:consistency #23=#:buffers #24=#:pre-instantiate #25=#:drop-out #26=#:whynot-reason) (nil :whynot-reason :drop-out :pre-instantiate :buffers :consistency :map :compose :table :name) #18# :test equalp make-hash-table #19# #20# #21# #22# #23# #24# #25# #26# 0 si::make-structure #Y(common-lisp-user::make-comp-buffer-type nil nil (28 17 22 40 2 77 46 18 22 40 9 14 19 15 20 19 2 21 12 46 22 22 40 2 77 46 23 22 40 2 77 46 24 22 40 2 77 46 25 22 40 2 77 46 26 22 40 2 77 46 27 22 40 2 77 46 28 22 40 2 77 46 29 15 30 13 8 13 7 13 6 13 5 13 4 13 3 13 2 13 1 13 0 19 10 31 29) #16# #1# 37925) si::fset find-class)) #1# 37925) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 10 14 3 15 4 19 2 5 52 0 15 0 15 6 15 7 15 8 19 4 9 1 0 73 29) #A(t (10) (common-lisp-user::*valid-compilation-buffer-types* si::*make-special boundp :test eq make-hash-table ext::location (defvar common-lisp-user::*valid-compilation-buffer-types*) (#1# . 38153) ext::annotate)) #1# 38153) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 10 14 3 15 4 19 2 5 52 0 15 0 15 6 15 7 15 8 19 4 9 1 0 73 29) #A(t (10) (common-lisp-user::*buffer-to-compilation-type-table* si::*make-special boundp :test eq make-hash-table ext::location (defvar common-lisp-user::*buffer-to-compilation-type-table*) (#1# . 38418) ext::annotate)) #1# 38418) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 9 77 77 15 6 19 15 7 15 0 15 8 15 9 15 10 19 4 11 15 12 15 8 15 13 15 14 19 4 11 15 12 14 15 77 15 16 19 4 11 15 0 19 1 34 78 30 15 12 1 32 12 19 2 33 1 0 73 29) #27=#A(t (35) (common-lisp-user::compilation-module "COMPILATION-MODULE-" (trace common-lisp-user::epl common-lisp-user::previous common-lisp-user::previous-time common-lisp-user::buffer-var-names (common-lisp-user::buffer-type-table #28=(make-hash-table)) common-lisp-user::ppm common-lisp-user::tt (common-lisp-user::composeable-table #29=(make-hash-table :test #'equalp))) ((trace nil t nil 0 nil) (common-lisp-user::epl nil t nil 1 nil) (common-lisp-user::previous nil t nil 2 nil) (common-lisp-user::previous-time nil t nil 3 nil) (common-lisp-user::buffer-var-names nil t nil 4 nil) (common-lisp-user::buffer-type-table #28# t nil 5 nil) (common-lisp-user::ppm nil t nil 6 nil) (common-lisp-user::tt nil t nil 7 nil) (common-lisp-user::composeable-table #29# t nil 8 nil)) common-lisp-user::copy-compilation-module (common-lisp-user::make-compilation-module) common-lisp-user::compilation-module-p si::define-structure ext::location (defstruct common-lisp-user::compilation-module) (#1# . 38553) ext::annotate common-lisp-user::make-compilation-module (defun common-lisp-user::make-compilation-module) (#1# . 38553) :lambda-list (&key #30=#:trace #31=#:epl #32=#:previous #33=#:previous-time #34=#:buffer-var-names (#35=#:buffer-type-table (make-hash-table)) #36=#:ppm #37=#:tt (#38=#:composeable-table (make-hash-table :test #'equalp))) (nil :composeable-table :tt :ppm :buffer-type-table :buffer-var-names :previous-time :previous :epl :trace) #30# #31# #32# #33# #34# make-hash-table #35# #36# #37# :test equalp #38# 0 si::make-structure #Y(common-lisp-user::make-compilation-module nil nil (28 17 22 40 2 77 46 18 22 40 2 77 46 19 22 40 2 77 46 20 22 40 2 77 46 21 22 40 2 77 46 22 22 40 5 19 0 23 12 46 24 22 40 2 77 46 25 22 40 2 77 46 26 22 40 10 14 27 33 28 12 19 2 23 12 46 29 15 30 13 8 13 7 13 6 13 5 13 4 13 3 13 2 13 1 13 0 19 10 31 29) #27# #1# 38553) si::fset find-class)) #1# 38553) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 3 77 77 15 6 19 15 7 15 0 15 8 15 9 15 10 19 4 11 15 12 15 8 15 13 15 14 19 4 11 15 12 14 15 77 15 16 19 4 11 15 0 19 1 25 78 21 15 12 1 23 12 19 2 24 1 0 73 29) #39=#A(t (26) (common-lisp-user::previous-production "PREVIOUS-PRODUCTION-" (common-lisp-user::name common-lisp-user::bindings common-lisp-user::struct) ((common-lisp-user::name nil t nil 0 nil) (common-lisp-user::bindings nil t nil 1 nil) (common-lisp-user::struct nil t nil 2 nil)) common-lisp-user::copy-previous-production (common-lisp-user::make-previous-production) common-lisp-user::previous-production-p si::define-structure ext::location (defstruct common-lisp-user::previous-production) (#1# . 38768) ext::annotate common-lisp-user::make-previous-production (defun common-lisp-user::make-previous-production) (#1# . 38768) :lambda-list (&key #40=#:name #41=#:bindings #42=#:struct) (nil :struct :bindings :name) #40# #41# #42# 0 si::make-structure #Y(common-lisp-user::make-previous-production nil nil (28 17 22 40 2 77 46 18 22 40 2 77 46 19 22 40 2 77 46 20 15 21 13 2 13 1 13 0 19 4 22 29) #39# #1# 38768) si::fset find-class)) #1# 38768) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 23 12 14 24 9 10 19 4 25 1 0 73 29) #43=#A(t (26) (common-lisp-user::define-compilation-type ext::location (defmacro common-lisp-user::define-compilation-type) (#1# . 38825) ext::annotate :lambda-list (common-lisp-user::name common-lisp-user::table common-lisp-user::buffers common-lisp-user::mapping common-lisp-user::compose common-lisp-user::consistency common-lisp-user::pre-instantiate common-lisp-user::drop-out common-lisp-user::whynot) #:g18585 #:g18584 #:g18586 si::dm-too-few-arguments common-lisp-user::name common-lisp-user::table common-lisp-user::buffers common-lisp-user::mapping common-lisp-user::compose common-lisp-user::consistency common-lisp-user::pre-instantiate common-lisp-user::drop-out common-lisp-user::whynot si::dm-too-many-arguments common-lisp-user::define-compilation-type-fct quote #Y(common-lisp-user::define-compilation-type nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 76 39 6 13 3 19 1 10 10 1 4 12 10 1 5 51 1 22 45 12 10 2 76 39 6 13 4 19 1 10 10 2 4 12 10 2 5 51 2 22 45 13 10 3 76 39 6 13 5 19 1 10 10 3 4 12 10 3 5 51 3 22 45 14 10 4 76 39 6 13 6 19 1 10 10 4 4 12 10 4 5 51 4 22 45 15 10 5 76 39 6 13 7 19 1 10 10 5 4 12 10 5 5 51 5 22 45 16 10 6 76 39 6 13 8 19 1 10 10 6 4 12 10 6 5 51 6 22 45 17 10 7 76 39 6 13 9 19 1 10 10 7 4 12 10 7 5 51 7 22 45 18 10 8 76 39 6 13 10 19 1 10 10 8 4 12 10 8 5 51 8 22 45 19 10 9 39 6 13 11 19 1 20 15 21 15 22 10 8 6 2 12 15 22 10 7 6 2 12 15 22 10 6 6 2 12 15 22 10 5 6 2 12 15 22 10 4 6 2 12 15 22 10 3 6 2 12 15 22 10 2 6 2 12 15 22 10 1 6 2 12 15 22 10 0 6 2 6 10 73 29) #43# #1# 38825) t si::fset)) #1# 38825) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 73 12 19 2 74 1 0 73 29) #44=#A(t (75) (common-lisp-user::define-compilation-type-fct ext::location (defun common-lisp-user::define-compilation-type-fct) (#1# . 39072) ext::annotate :lambda-list (common-lisp-user::name common-lisp-user::table common-lisp-user::buffers common-lisp-user::mapping common-lisp-user::compose common-lisp-user::consistency common-lisp-user::pre-instantiate common-lisp-user::drop-out common-lisp-user::whynot) common-lisp-user::name common-lisp-user::table common-lisp-user::buffers common-lisp-user::mapping common-lisp-user::compose common-lisp-user::consistency common-lisp-user::pre-instantiate common-lisp-user::drop-out common-lisp-user::whynot common-lisp-user::meta-process-names length > common-lisp-user::default eq *error-output* #3# common-lisp-user::current-mp-fct common-lisp-user::mp-models common-lisp-user::current-model "Cannot create a new compilation type when there is a meta-process other than the default defined." format finish-output "Cannot create a new compilation type when there are models defined." common-lisp-user::*valid-compilation-buffer-types* gethash "~s is already the name of a compilation type.  To redefine it it must first be removed with undefine-compilation-type." "Compilation type must have a non-nil name." symbolp "~s is not a symbol and thus not a valid compilation type name." keywordp "A keyword is not valid as a compilation type name." common-lisp-user::fctornil "A compilation type must specify a compose function." "A compilation type must specify a valid function or nil for mapping." "A compilation type must specify a valid function or nil for consistency." t "A compilation type must specify a valid function, t, or nil for pre-instantiate." "A compilation type must specify a valid function or nil for whynot." listp common-lisp-user::buffer-exists every :default "Buffers must be a list of valid buffer names or the keyword :default" common-lisp-user::x = numberp second <= third #Y(nil nil nil (24 45 50 26 9 3 10 0 16 17 12 19 2 51 73 39 67 10 0 4 16 52 73 39 59 10 0 16 53 16 52 73 39 50 9 0 10 0 4 12 9 63 19 3 54 73 39 36 9 0 10 0 16 53 12 9 63 19 3 54 73 39 21 10 0 16 55 12 11 42 17 20 73 40 9 10 0 16 55 12 19 1 38 29) #44# #1# 39072) "Invalid table for buffer type ~s.  All items must be 3 element lists of a p1 index, p2 index, and then either t, nil, or a function." :name :buffers :map :compose :consistency :pre-instantiate :drop-out :whynot-reason common-lisp-user::make-comp-buffer-type type si::hash-set si::%dolist-var common-lisp-user::*buffer-to-compilation-type-table* vector common-lisp-user::comp-buffer-type-table #Y(common-lisp-user::define-compilation-type-fct nil nil (24 45 7 24 45 8 24 45 9 24 45 10 24 45 11 24 45 12 24 45 13 24 45 14 24 45 15 26 9 1 19 0 16 16 17 12 19 2 18 40 11 19 0 16 4 12 1 19 17 20 76 39 42 14 21 15 22 19 0 23 73 39 12 19 0 24 16 17 12 9 1 19 2 18 12 19 0 25 12 15 26 19 5 27 12 14 21 19 1 28 22 73 38 836 19 0 24 39 42 14 21 15 22 19 0 23 73 39 12 19 0 24 16 17 12 9 1 19 2 18 12 19 0 25 12 15 29 19 5 27 12 14 21 19 1 28 22 73 38 790 13 8 14 30 19 2 31 39 44 14 21 15 22 19 0 23 73 39 12 19 0 24 16 17 12 9 1 19 2 18 12 19 0 25 12 15 32 13 8 19 6 27 12 14 21 19 1 28 22 73 38 738 10 8 76 39 42 14 21 15 22 19 0 23 73 39 12 19 0 24 16 17 12 9 1 19 2 18 12 19 0 25 12 15 33 19 5 27 12 14 21 19 1 28 22 73 38 692 10 8 16 34 76 39 44 14 21 15 22 19 0 23 73 39 12 19 0 24 16 17 12 9 1 19 2 18 12 19 0 25 12 15 35 13 8 19 6 27 12 14 21 19 1 28 22 73 38 642 10 8 16 36 39 42 14 21 15 22 19 0 23 73 39 12 19 0 24 16 17 12 9 1 19 2 18 12 19 0 25 12 15 37 19 5 27 12 14 21 19 1 28 22 73 38 595 10 4 39 6 13 4 19 1 38 76 39 42 14 21 15 22 19 0 23 73 39 12 19 0 24 16 17 12 9 1 19 2 18 12 19 0 25 12 15 39 19 5 27 12 14 21 19 1 28 22 73 38 542 13 5 19 1 38 76 39 42 14 21 15 22 19 0 23 73 39 12 19 0 24 16 17 12 9 1 19 2 18 12 19 0 25 12 15 40 19 5 27 12 14 21 19 1 28 22 73 38 493 13 3 19 1 38 76 39 42 14 21 15 22 19 0 23 73 39 12 19 0 24 16 17 12 9 1 19 2 18 12 19 0 25 12 15 41 19 5 27 12 14 21 19 1 28 22 73 38 444 13 2 11 42 17 20 40 6 13 2 19 1 38 76 39 42 14 21 15 22 19 0 23 73 39 12 19 0 24 16 17 12 9 1 19 2 18 12 19 0 25 12 15 43 19 5 27 12 14 21 19 1 28 22 73 38 387 13 0 19 1 38 76 39 42 14 21 15 22 19 0 23 73 39 12 19 0 24 16 17 12 9 1 19 2 18 12 19 0 25 12 15 44 19 5 27 12 14 21 19 1 28 22 73 38 338 10 6 76 40 22 10 6 16 45 39 8 15 46 13 6 19 2 47 40 7 13 6 11 48 17 20 76 39 42 14 21 15 22 19 0 23 73 39 12 19 0 24 16 17 12 9 1 19 2 18 12 19 0 25 12 15 49 19 5 27 12 14 21 19 1 28 22 73 38 268 10 7 16 45 39 9 34 56 12 13 7 19 2 47 76 39 44 14 21 15 22 19 0 23 73 39 12 19 0 24 16 17 12 9 1 19 2 18 12 19 0 25 12 15 57 13 8 19 6 27 12 14 21 19 1 28 22 73 38 208 14 58 13 8 14 59 13 6 14 60 13 5 14 61 13 4 14 62 13 3 14 63 13 2 14 64 13 1 14 65 13 0 19 16 66 45 67 13 9 14 30 13 0 19 3 68 13 7 11 48 17 20 39 10 14 48 14 30 13 0 19 3 68 10 7 16 45 39 37 10 7 45 69 75 45 50 38 20 10 1 4 51 0 13 0 14 70 13 11 19 3 68 10 1 5 51 1 10 1 40 -22 43 2 38 46 19 0 9 45 69 75 45 50 38 30 10 1 4 51 0 13 0 14 70 19 2 31 76 39 10 13 0 14 70 14 48 19 3 68 10 1 5 51 1 10 1 40 -32 43 2 10 8 45 69 75 45 50 38 38 10 1 4 51 0 10 0 4 12 10 0 16 53 12 19 2 71 12 13 2 19 1 72 12 10 0 16 55 12 19 3 68 10 1 5 51 1 10 1 40 -40 43 2 43 1 10 8 73 29) #44# #1# 39072) si::fset)) #1# 39072) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 15 12 14 16 9 2 19 4 17 1 0 73 29) #45=#A(t (18) (common-lisp-user::undefine-compilation-type ext::location (defmacro common-lisp-user::undefine-compilation-type) (#1# . 42568) ext::annotate :lambda-list (common-lisp-user::name) #:g18634 #:g18633 #:g18635 si::dm-too-few-arguments common-lisp-user::name si::dm-too-many-arguments common-lisp-user::undefine-compilation-type-fct quote #Y(common-lisp-user::undefine-compilation-type nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 39 6 13 3 19 1 12 15 13 15 14 10 0 6 2 6 2 73 29) #45# #1# 42568) t si::fset)) #1# 42568) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 29 12 19 2 30 1 0 73 29) #46=#A(t (31) (common-lisp-user::undefine-compilation-type-fct ext::location (defun common-lisp-user::undefine-compilation-type-fct) (#1# . 42656) ext::annotate :lambda-list (common-lisp-user::name) common-lisp-user::name common-lisp-user::meta-process-names length > common-lisp-user::default eq *error-output* #3# common-lisp-user::current-mp-fct common-lisp-user::mp-models common-lisp-user::current-model "Cannot undefine a compilation type when there is a meta-process other than the default defined." format finish-output "Cannot undefine a compilation type when there are models defined." "Must specify the name of a compilation type to undefine." common-lisp-user::*valid-compilation-buffer-types* gethash "~s is not the name of a compilation type thus it cannot be undefined." remhash :default common-lisp-user::comp-buffer-type-name #Y(common-lisp-user::undefine-compilation-type-fct nil nil (24 45 7 26 9 1 19 0 8 16 9 12 19 2 10 40 11 19 0 8 4 12 1 11 17 12 76 39 42 14 13 15 14 19 0 15 73 39 12 19 0 16 16 9 12 9 1 19 2 10 12 19 0 17 12 15 18 19 5 19 12 14 13 19 1 20 22 73 38 188 19 0 16 39 42 14 13 15 14 19 0 15 73 39 12 19 0 16 16 9 12 9 1 19 2 10 12 19 0 17 12 15 21 19 5 19 12 14 13 19 1 20 22 73 38 142 10 0 76 39 42 14 13 15 14 19 0 15 73 39 12 19 0 16 16 9 12 9 1 19 2 10 12 19 0 17 12 15 22 19 5 19 12 14 13 19 1 20 22 73 38 96 13 0 14 23 19 2 24 76 39 44 14 13 15 14 19 0 15 73 39 12 19 0 16 16 9 12 9 1 19 2 10 12 19 0 17 12 15 25 13 0 19 6 19 12 14 13 19 1 20 22 73 38 43 13 0 11 23 17 26 14 27 14 23 19 2 24 39 17 14 27 14 23 19 2 24 12 19 1 28 12 10 0 17 12 39 7 14 27 11 23 17 26 10 0 73 29) #46# #1# 42656) si::fset)) #1# 42656) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 9 12 19 2 10 1 0 73 29) #47=#A(t (11) (common-lisp-user::create-composition-module ext::location (defun common-lisp-user::create-composition-module) (#1# . 43951) ext::annotate :lambda-list (common-lisp-user::model-name) common-lisp-user::model-name common-lisp-user::make-compilation-module #Y(common-lisp-user::create-composition-module nil nil (24 45 7 26 19 0 8 29) #47# #1# 43951) si::fset)) #1# 43951) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 48 12 19 2 49 1 0 73 29) #48=#A(t (50) (common-lisp-user::reset-production-compilation ext::location (defun common-lisp-user::reset-production-compilation) (#1# . 44156) ext::annotate :lambda-list (common-lisp-user::instance) common-lisp-user::instance #:g18660 #:g18661 common-lisp-user::compilation-module si::structure-set #:g18662 #:g18663 common-lisp-user::compilation-module-composeable-table clrhash common-lisp-user::compilation-module-buffer-type-table #:g18664 #:g18665 common-lisp-user::buffers si::%dolist-var common-lisp-user::buffer #:g18675 string "=" concatenate intern #:g18677 common-lisp-user::compilation-module-buffer-var-names nconc #:g18676 common-lisp-user::*buffer-to-compilation-type-table* gethash standard common-lisp-user::*valid-compilation-buffer-types* si::hash-set :default common-lisp-user::default *error-output* #3# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "No default compilation type available and buffer ~s does not have a type specified." format finish-output #Y(common-lisp-user::reset-production-compilation nil nil (24 45 7 26 10 0 45 8 75 45 9 13 1 15 10 9 2 13 0 19 4 11 43 1 43 1 10 0 45 12 8 0 45 13 13 1 15 10 9 3 13 0 19 4 11 43 1 43 1 13 0 19 1 14 16 15 13 0 19 1 16 16 15 10 0 45 17 75 45 18 13 1 15 10 9 4 13 0 19 4 11 43 1 43 1 19 0 19 45 20 75 45 21 38 174 10 1 4 51 0 10 2 45 22 15 23 15 24 10 1 16 23 12 19 3 25 12 19 1 26 6 1 45 27 13 1 19 1 28 12 13 0 19 2 29 45 30 13 2 15 10 9 4 13 0 19 4 11 43 3 13 0 14 31 19 2 32 45 33 10 0 39 8 13 0 14 34 19 2 32 39 22 13 1 13 3 19 1 16 12 13 0 14 34 19 2 32 12 19 3 35 38 69 14 36 14 34 19 2 32 45 37 10 0 39 16 13 2 13 4 19 1 16 12 13 0 19 3 35 38 39 14 38 15 39 19 0 40 73 39 12 19 0 41 16 42 12 9 1 19 2 43 12 19 0 44 12 15 45 13 2 19 6 46 14 38 19 1 47 43 1 43 1 10 1 5 51 1 10 1 40 -176 75 73 43 2 29) #48# #1# 44156) si::fset)) #1# 44156) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 30 12 19 2 31 1 0 73 29) #49=#A(t (32) (common-lisp-user::production-compilation-params ext::location (defun common-lisp-user::production-compilation-params) (#1# . 45264) ext::annotate :lambda-list (common-lisp-user::prod common-lisp-user::param) common-lisp-user::prod common-lisp-user::param consp :pct #:g18692 #:g18693 common-lisp-user::compilation-module si::structure-set :tt #:g18694 common-lisp-user::sgp common-lisp-user::safe-seconds->ms #:g18695 :epl #:g18696 #:g18697 :ppm #:g18698 #:g18699 common-lisp-user::compilation-module-trace common-lisp-user::compilation-module-tt common-lisp-user::ms->seconds common-lisp-user::compilation-module-epl #Y(common-lisp-user::production-compilation-params nil nil (24 45 7 24 45 8 26 10 0 16 9 39 134 10 0 4 42 10 27 10 1 45 11 10 1 5 45 12 13 1 15 13 9 0 13 0 19 4 14 43 1 43 1 38 100 42 15 37 10 1 45 16 10 1 5 12 15 17 19 2 18 45 19 13 1 15 13 9 7 13 0 19 4 14 43 1 43 1 10 0 5 73 38 61 42 20 27 10 1 45 21 10 1 5 45 22 13 1 15 13 9 1 13 0 19 4 14 43 1 43 1 38 32 42 23 27 10 1 45 24 10 1 5 45 25 13 1 15 13 9 6 13 0 19 4 14 43 1 43 1 38 3 75 73 38 39 10 0 42 10 8 13 1 19 1 26 38 27 42 15 12 13 1 19 1 27 12 19 1 28 38 13 42 20 8 13 1 19 1 29 38 3 75 73 29) #49# #1# 45264) si::fset)) #1# 45264) #Y(si::bytecodes nil nil (15 0 77 14 1 14 2 77 19 3 3 12 14 4 14 5 77 14 6 15 7 14 8 15 9 14 10 15 11 19 9 3 12 14 12 14 5 77 14 6 15 7 14 8 15 13 14 10 15 14 19 9 3 12 14 15 14 5 15 16 14 6 15 17 14 8 15 18 14 10 15 19 19 9 3 6 4 12 14 20 15 21 14 10 15 22 14 23 15 24 14 25 15 26 14 27 15 28 19 13 29 29) #A(t (30) (common-lisp-user::production-compilation :ppm :owner common-lisp-user::define-parameter :epl :default-value :valid-test common-lisp-user::tornil :warning "T or nil" :documentation "Enable Production Learning" :pct "T or nil" "Production Compilation Trace" :tt 2.0 common-lisp-user::posnum "a positive number" "Threshold time" :version "2.0" "A module that assists the primary procedural module with compiling productions" :creation common-lisp-user::create-composition-module :reset common-lisp-user::reset-production-compilation :params common-lisp-user::production-compilation-params common-lisp-user::define-module-fct)) #1# 45904) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 65 12 19 2 66 1 0 73 29) #50=#A(t (67) (common-lisp-user::compile-productions ext::location (defun common-lisp-user::compile-productions) (#1# . 46710) ext::annotate :lambda-list (common-lisp-user::production) common-lisp-user::production common-lisp-user::production-compilation common-lisp-user::get-module-fct common-lisp-user::production-name common-lisp-user::p-name common-lisp-user::module common-lisp-user::compilation-module-epl common-lisp-user::compilation-module-trace common-lisp-user::printing-module #:g18721 #:g18720 common-lisp-user::printing-module-v common-lisp-user::act-r-output-stream #51="~&~@?~%" "Production Compilation process started for ~s" format common-lisp-user::valid-compilation-production #:g18723 #:g18722 "  Production ~s is not valid for compilation" #:g18725 #:g18724 "   because ~a" common-lisp-user::invalid-compilation-reason #:g18726 #:g18727 common-lisp-user::compilation-module si::structure-set common-lisp-user::compilation-module-previous #:g18729 #:g18728 "  No previous production to compose with." common-lisp-user::handle-check-valid-1st-p common-lisp-user::mp-time-ms common-lisp-user::compilation-module-previous-time - common-lisp-user::compilation-module-tt > #:g18731 #:g18730 "  Cannot compile ~s and ~s because the time between them exceeds the threshold time." common-lisp-user::previous-production-name common-lisp-user::previous-production-struct common-lisp-user::composeable-productions-p #:g18733 #:g18732 "  Production ~s and ~s cannot be composed." #:g18735 #:g18734 "  Production ~s and ~s are being composed." common-lisp-user::redundant-variable-check #:g18737 #:g18736 "    Production ~s has redundant variables in the conditions which may lead to unusual production compilation results." #:g18739 #:g18738 "    Production ~s has redundant variables in the conditions which may lead to unusual production compilation results." common-lisp-user::compose-productions #Y(common-lisp-user::compile-productions nil nil (24 45 7 26 15 8 19 1 9 12 13 0 19 1 10 12 46 11 46 12 13 0 19 1 13 73 39 669 13 0 19 1 14 39 47 15 15 19 1 9 47 1 16 45 17 10 1 39 10 13 0 19 1 18 12 19 1 19 39 20 13 0 19 1 18 12 19 1 19 12 15 20 15 21 13 3 19 4 22 43 2 13 1 13 2 19 2 23 76 39 130 13 0 19 1 14 39 99 15 15 19 1 9 47 1 24 45 25 10 1 39 10 13 0 19 1 18 12 19 1 19 39 20 13 0 19 1 18 12 19 1 19 12 15 20 15 26 13 3 19 4 22 43 2 15 15 19 1 9 47 1 27 45 28 10 1 39 10 13 0 19 1 18 12 19 1 19 39 26 13 0 19 1 18 12 19 1 19 12 15 20 15 29 13 3 13 4 19 2 30 12 19 4 22 43 2 10 0 45 31 75 45 32 13 1 15 33 9 2 13 0 19 4 34 43 1 43 1 38 477 13 0 19 1 35 76 39 63 13 0 19 1 14 39 45 15 15 19 1 9 47 1 36 45 37 10 1 39 10 13 0 19 1 18 12 19 1 19 39 18 13 0 19 1 18 12 19 1 19 12 15 20 15 38 19 3 22 43 2 13 0 13 1 13 2 19 3 39 38 407 19 0 40 12 13 0 19 1 41 12 19 2 42 12 13 0 19 1 43 12 19 2 44 39 75 13 0 19 1 14 39 57 15 15 19 1 9 47 1 45 45 46 10 1 39 10 13 0 19 1 18 12 19 1 19 39 30 13 0 19 1 18 12 19 1 19 12 15 20 15 47 13 2 19 1 35 12 19 1 48 12 13 3 19 5 22 43 2 13 0 13 1 13 2 19 3 39 38 308 13 0 13 0 19 1 35 12 19 1 49 12 13 2 19 3 50 76 39 75 13 0 19 1 14 39 57 15 15 19 1 9 47 1 51 45 52 10 1 39 10 13 0 19 1 18 12 19 1 19 39 30 13 0 19 1 18 12 19 1 19 12 15 20 15 53 13 2 19 1 35 12 19 1 48 12 13 3 19 5 22 43 2 13 0 13 1 13 2 19 3 39 38 214 13 0 19 1 14 39 191 15 15 19 1 9 47 1 54 45 55 10 1 39 10 13 0 19 1 18 12 19 1 19 39 30 13 0 19 1 18 12 19 1 19 12 15 20 15 56 13 2 19 1 35 12 19 1 48 12 13 3 19 5 22 43 2 13 0 19 1 35 12 19 1 48 12 13 0 19 1 35 12 19 1 49 12 19 2 57 39 55 15 15 19 1 9 47 1 58 45 59 10 1 39 10 13 0 19 1 18 12 19 1 19 39 28 13 0 19 1 18 12 19 1 19 12 15 20 15 60 13 2 19 1 35 12 19 1 48 12 19 4 22 43 2 13 1 13 2 19 2 57 39 47 15 15 19 1 9 47 1 61 45 62 10 1 39 10 13 0 19 1 18 12 19 1 19 39 20 13 0 19 1 18 12 19 1 19 12 15 20 15 63 13 3 19 4 22 43 2 13 0 13 2 19 2 64 13 0 13 1 13 2 19 3 39 43 2 29) #50# #1# 46710) si::fset)) #1# 46710) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 27 12 19 2 28 1 0 73 29) #52=#A(t (29) (common-lisp-user::valid-compilation-production ext::location (defun common-lisp-user::valid-compilation-production) (#1# . 49581) ext::annotate :lambda-list (common-lisp-user::p-name common-lisp-user::prod) common-lisp-user::p-name common-lisp-user::prod common-lisp-user::production-valid-for-compilation common-lisp-user::v :unset eq eval common-lisp-user::production-lhs :key common-lisp-user::production-statement-target find common-lisp-user::production-rhs common-lisp-user::bind common-lisp-user::mv-bind common-lisp-user::safe-bind #\@ common-lisp-user::production-statement-op common-lisp-user::indirect-action-buffer-name common-lisp-user::slot-modifers-other-than-= common-lisp-user::production-valid-for-compilation-setf #Y(common-lisp-user::valid-compilation-production nil nil (24 45 7 24 45 8 26 13 1 19 1 9 45 10 14 11 10 0 17 12 39 166 13 2 15 13 13 1 19 1 14 12 14 15 15 16 19 4 17 40 140 15 13 13 1 19 1 18 12 14 15 15 16 19 4 17 40 123 15 19 13 1 19 1 14 12 14 15 15 16 19 4 17 40 106 15 19 13 1 19 1 18 12 14 15 15 16 19 4 17 40 89 15 20 13 1 19 1 14 12 14 15 15 16 19 4 17 40 72 15 20 13 1 19 1 18 12 14 15 15 16 19 4 17 40 55 15 21 13 1 19 1 14 12 14 15 15 16 19 4 17 40 38 15 22 13 1 19 1 18 12 14 15 15 23 19 4 17 40 21 13 1 19 1 18 12 19 1 24 40 10 13 1 19 1 14 12 19 1 25 76 12 19 2 26 38 4 10 0 73 43 1 29) #52# #1# 49581) si::fset)) #1# 49581) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 35 12 19 2 36 1 0 73 29) #53=#A(t (37) (common-lisp-user::invalid-compilation-reason ext::location (defun common-lisp-user::invalid-compilation-reason) (#1# . 50631) ext::annotate :lambda-list (common-lisp-user::p-name common-lisp-user::prod) common-lisp-user::p-name common-lisp-user::prod common-lisp-user::production-invalid-compilation-reason common-lisp-user::r :unset eq eval common-lisp-user::production-lhs :key common-lisp-user::production-statement-target find common-lisp-user::production-rhs "it contains one or more !eval! operators" common-lisp-user::bind common-lisp-user::mv-bind "it contains one or more !bind! operators" common-lisp-user::safe-bind "it contains one or more LHS !safe-bind! operators" #\@ common-lisp-user::production-statement-op "it contains one or more buffer overwrite actions." common-lisp-user::indirect-action-buffer-name "it has an indirect action with the ~a buffer" format common-lisp-user::slot-modifers-other-than-= "it has conditions with modifiers on slot tests" "of an unknown reason. (This should not happen. Please report this issue to Dan.)" common-lisp-user::production-invalid-compilation-reason-setf #Y(common-lisp-user::invalid-compilation-reason nil nil (24 45 7 24 45 8 26 13 1 19 1 9 45 10 14 11 10 0 17 12 39 213 13 2 15 13 13 1 19 1 14 12 14 15 15 16 19 4 17 40 16 15 13 13 1 19 1 18 12 14 15 15 16 19 4 17 39 6 1 19 73 38 166 15 20 13 1 19 1 14 12 14 15 15 16 19 4 17 40 50 15 20 13 1 19 1 18 12 14 15 15 16 19 4 17 40 33 15 21 13 1 19 1 14 12 14 15 15 16 19 4 17 40 16 15 21 13 1 19 1 18 12 14 15 15 16 19 4 17 39 6 1 22 73 38 93 15 23 13 1 19 1 14 12 14 15 15 16 19 4 17 39 6 1 24 73 38 71 15 25 13 1 19 1 18 12 14 15 15 26 19 4 17 39 6 1 27 73 38 49 13 1 19 1 18 12 19 1 28 39 19 77 15 29 13 1 19 1 18 12 19 1 28 12 19 3 30 38 20 13 1 19 1 14 12 19 1 31 39 6 1 32 73 38 4 1 33 73 12 19 2 34 38 4 10 0 73 43 1 29) #53# #1# 50631) si::fset)) #1# 50631) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 21 12 19 2 22 1 0 73 29) #54=#A(t (23) (common-lisp-user::duplicate-buffer-name ext::location (defun common-lisp-user::duplicate-buffer-name) (#1# . 52273) ext::annotate :lambda-list (common-lisp-user::op common-lisp-user::statements) common-lisp-user::op common-lisp-user::statements common-lisp-user::production-statement-target common-lisp-user::x eql #Y(nil nil nil (24 45 10 26 13 2 10 0 17 11 29) #54# #1# 52273) :key common-lisp-user::production-statement-op remove-if-not mapcar common-lisp-user::filtered count > #Y(nil nil nil (24 45 10 26 13 0 13 1 19 2 18 12 9 1 19 2 19 29) #54# #1# 52273) #Y(common-lisp-user::duplicate-buffer-name nil nil (24 45 7 24 45 8 26 15 9 34 12 12 13 0 14 13 15 14 19 4 15 12 19 2 16 45 17 34 20 12 13 0 19 2 15 4 73 43 1 29) #54# #1# 52273) si::fset)) #1# 52273) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 19 12 19 2 20 1 0 73 29) #55=#A(t (21) (common-lisp-user::indirect-action-buffer-name ext::location (defun common-lisp-user::indirect-action-buffer-name) (#1# . 52627) ext::annotate :lambda-list (common-lisp-user::statements) common-lisp-user::statements common-lisp-user::x common-lisp-user::production-statement-op (#\= #\* #\+) find common-lisp-user::production-statement-definition length = #Y(nil nil nil (24 45 8 26 13 0 19 1 9 12 15 10 19 2 11 73 39 14 13 0 19 1 12 16 13 12 9 1 19 2 14 29) #55# #1# 52627) find-if common-lisp-user::it common-lisp-user::production-statement-target #Y(common-lisp-user::indirect-action-buffer-name nil nil (24 45 7 26 34 15 12 13 0 19 2 16 45 17 10 0 39 8 13 0 19 1 18 38 3 75 73 43 1 29) #55# #1# 52627) si::fset)) #1# 52627) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 20 12 19 2 21 1 0 73 29) #56=#A(t (22) (common-lisp-user::slot-modifers-other-than-= ext::location (defun common-lisp-user::slot-modifers-other-than-=) (#1# . 52935) ext::annotate :lambda-list (common-lisp-user::statements) common-lisp-user::statements common-lisp-user::y common-lisp-user::production-statement-spec common-lisp-user::x = eql #Y(nil nil nil (24 45 10 26 13 0 1 11 17 12 29) #56# #1# 52935) common-lisp-user::chunk-spec-slot-spec :key first find-if-not #Y(nil nil nil (24 45 8 26 13 0 19 1 9 73 39 21 34 13 12 13 0 19 1 9 12 19 1 14 12 14 15 15 16 19 4 17 29) #56# #1# 52935) some #Y(common-lisp-user::slot-modifers-other-than-= nil nil (24 45 7 26 34 18 12 13 0 19 2 19 29) #56# #1# 52935) si::fset)) #1# 52935) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 30 12 19 2 31 1 0 73 29) #57=#A(t (32) (common-lisp-user::redundant-variable-check ext::location (defun common-lisp-user::redundant-variable-check) (#1# . 53247) ext::annotate :lambda-list (common-lisp-user::p-name common-lisp-user::prod) common-lisp-user::p-name common-lisp-user::prod common-lisp-user::production-redundant-variables common-lisp-user::v :unset eq common-lisp-user::x #\= common-lisp-user::production-statement-op common-lisp-user::y common-lisp-user::chunk-spec-variable-p common-lisp-user::production-statement-spec common-lisp-user::chunk-spec-slot-spec :key third count-if > #Y(nil nil nil (24 45 16 26 15 17 13 1 19 1 18 12 13 0 19 2 19 12 14 20 15 21 19 4 22 12 9 1 19 2 23 29) #57# #1# 53247) common-lisp-user::chunk-spec-slots some #Y(nil nil nil (24 45 13 26 15 14 13 0 19 1 15 17 12 73 39 17 34 24 12 13 0 19 1 18 12 19 1 25 12 19 2 26 29) #57# #1# 53247) common-lisp-user::production-lhs common-lisp-user::production-redundant-variables-setf #Y(common-lisp-user::redundant-variable-check nil nil (24 45 7 24 45 8 26 13 1 19 1 9 45 10 14 11 10 0 17 12 39 21 13 2 34 27 12 13 1 19 1 28 12 19 2 26 12 19 2 29 38 4 10 0 73 43 1 29) #57# #1# 53247) si::fset)) #1# 53247) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 23 12 19 2 24 1 0 73 29) #58=#A(t (25) (common-lisp-user::valid-1st-p ext::location (defun common-lisp-user::valid-1st-p) (#1# . 53825) ext::annotate :lambda-list (common-lisp-user::p-name common-lisp-user::prod) common-lisp-user::p-name common-lisp-user::prod common-lisp-user::production-valid-1st-p common-lisp-user::v :unset eq common-lisp-user::stop common-lisp-user::production-rhs :key common-lisp-user::production-statement-target find #\= common-lisp-user::duplicate-buffer-name #\+ #\* common-lisp-user::production-valid-1st-p-setf #Y(common-lisp-user::valid-1st-p nil nil (24 45 7 24 45 8 26 13 1 19 1 9 45 10 14 11 10 0 17 12 39 64 13 2 15 13 13 1 19 1 14 12 14 15 15 16 19 4 17 40 38 15 18 13 1 19 1 14 12 19 2 19 40 25 15 20 13 1 19 1 14 12 19 2 19 40 12 15 21 13 1 19 1 14 12 19 2 19 76 12 19 2 22 38 4 10 0 73 43 1 29) #58# #1# 53825) si::fset)) #1# 53825) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 23 12 19 2 24 1 0 73 29) #59=#A(t (25) (common-lisp-user::invalid-1st-p-reason ext::location (defun common-lisp-user::invalid-1st-p-reason) (#1# . 54572) ext::annotate :lambda-list (common-lisp-user::prod) common-lisp-user::prod common-lisp-user::stop common-lisp-user::production-rhs :key common-lisp-user::production-statement-target find "it has a !stop! action" #\= common-lisp-user::duplicate-buffer-name "it has multiple modification actions for the ~a buffer" format #\+ "it has multiple requests to the ~a buffer" #\* "it has multiple modification requests to the ~a buffer" "of unknown reason. (This should not happen. Please report this issue to Dan.)" #Y(common-lisp-user::invalid-1st-p-reason nil nil (24 45 7 26 15 8 13 0 19 1 9 12 14 10 15 11 19 4 12 39 6 1 13 73 38 103 15 14 13 0 19 1 9 12 19 2 15 39 21 77 15 16 15 14 13 0 19 1 9 12 19 2 15 12 19 3 17 38 70 15 18 13 0 19 1 9 12 19 2 15 39 21 77 15 19 15 18 13 0 19 1 9 12 19 2 15 12 19 3 17 38 37 15 20 13 0 19 1 9 12 19 2 15 39 21 77 15 21 15 20 13 0 19 1 9 12 19 2 15 12 19 3 17 38 4 1 22 73 29) #59# #1# 54572) si::fset)) #1# 54572) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 44 12 19 2 45 1 0 73 29) #60=#A(t (46) (common-lisp-user::handle-check-valid-1st-p ext::location (defun common-lisp-user::handle-check-valid-1st-p) (#1# . 55379) ext::annotate :lambda-list (common-lisp-user::module common-lisp-user::p-name common-lisp-user::prod) common-lisp-user::module common-lisp-user::p-name common-lisp-user::prod common-lisp-user::valid-1st-p #:g18768 :name :struct :bindings common-lisp-user::production-bindings copy-tree common-lisp-user::make-previous-production #:g18769 common-lisp-user::compilation-module si::structure-set #:g18770 common-lisp-user::mp-time-ms #:g18771 common-lisp-user::compilation-module-trace common-lisp-user::printing-module common-lisp-user::get-module-fct #:g18773 #:g18772 common-lisp-user::printing-module-v common-lisp-user::act-r-output-stream #51# "  Setting previous production to ~S." common-lisp-user::production-name format #:g18775 #:g18774 "  Production ~s is not valid as a first production for compilation" #:g18777 #:g18776 "   because ~a" common-lisp-user::invalid-1st-p-reason #:g18778 #:g18779 #Y(common-lisp-user::handle-check-valid-1st-p nil nil (24 45 7 24 45 8 24 45 9 26 13 1 13 0 19 2 10 39 128 10 2 45 11 14 12 13 2 14 13 13 1 14 14 13 1 19 1 15 16 16 12 19 6 17 45 18 13 1 15 19 9 2 13 0 19 4 20 43 1 43 1 10 2 45 21 19 0 22 45 23 13 1 15 19 9 3 13 0 19 4 20 43 1 43 1 13 2 19 1 24 73 39 52 15 25 19 1 26 47 1 27 45 28 10 1 39 10 13 0 19 1 29 12 19 1 30 73 39 24 13 0 19 1 29 12 19 1 30 12 15 31 15 32 13 2 19 1 33 12 19 4 34 43 2 38 126 13 2 19 1 24 39 97 15 25 19 1 26 47 1 35 45 36 10 1 39 10 13 0 19 1 29 12 19 1 30 39 20 13 0 19 1 29 12 19 1 30 12 15 31 15 37 13 3 19 4 34 43 2 15 25 19 1 26 47 1 38 45 39 10 1 39 10 13 0 19 1 29 12 19 1 30 39 24 13 0 19 1 29 12 19 1 30 12 15 31 15 40 13 2 19 1 41 12 19 4 34 43 2 10 2 45 42 75 45 43 13 1 15 19 9 2 13 0 19 4 20 43 1 43 1 29) #60# #1# 55379) si::fset)) #1# 55379) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 41 12 19 2 42 1 0 73 29) #61=#A(t (43) (common-lisp-user::composeable-productions-p ext::location (defun common-lisp-user::composeable-productions-p) (#1# . 56203) ext::annotate :lambda-list (common-lisp-user::module common-lisp-user::p1 common-lisp-user::p2) common-lisp-user::module common-lisp-user::p1 common-lisp-user::p2 common-lisp-user::production-name vector common-lisp-user::compilation-module-composeable-table gethash common-lisp-user::exists common-lisp-user::val t eq listp common-lisp-user::compilation-module-trace common-lisp-user::printing-module common-lisp-user::get-module-fct #:g18786 #:g18785 common-lisp-user::printing-module-v common-lisp-user::act-r-output-stream #51# "  Buffer ~S prevents composition of these productions~@[~%   because ~a~]" second format *error-output* #3# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "Invalid value in composeable table -- contact Dan." finish-output common-lisp-user::determine-composable si::hash-set #Y(common-lisp-user::composeable-productions-p nil nil (24 45 7 24 45 8 24 45 9 26 13 1 19 1 10 12 13 0 19 1 10 12 19 2 11 12 13 2 19 1 12 12 19 2 13 47 1 14 45 15 10 1 39 125 13 0 11 16 17 17 39 6 11 16 73 38 110 10 0 16 18 39 65 13 4 19 1 19 73 39 55 15 20 19 1 21 47 1 22 45 23 10 1 39 10 13 0 19 1 24 12 19 1 25 73 39 27 13 0 19 1 24 12 19 1 25 12 15 26 15 27 10 2 4 12 10 2 16 28 12 19 5 29 43 2 38 40 14 30 15 31 19 0 32 73 39 12 19 0 33 16 34 12 9 1 19 2 35 12 19 0 36 12 15 37 19 5 29 12 14 30 19 1 38 22 73 38 56 13 4 13 3 13 2 19 3 39 45 15 13 4 19 1 10 12 13 3 19 1 10 12 19 2 11 12 13 5 19 1 12 12 13 0 19 3 40 13 0 11 16 17 17 39 6 11 16 73 38 3 75 73 43 1 43 2 29) #61# #1# 56203) si::fset)) #1# 56203) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 48 12 19 2 49 1 0 73 29) #62=#A(t (50) (common-lisp-user::determine-composable ext::location (defun common-lisp-user::determine-composable) (#1# . 56982) ext::annotate :lambda-list (common-lisp-user::module common-lisp-user::p1 common-lisp-user::p2) common-lisp-user::module common-lisp-user::p1 common-lisp-user::p2 common-lisp-user::production-lhs-buffers common-lisp-user::production-rhs-buffers append remove-duplicates si::%dolist-var common-lisp-user::buffer common-lisp-user::compilation-module-buffer-type-table gethash type common-lisp-user::comp-buffer-type-table common-lisp-user::table common-lisp-user::get-buffer-index common-lisp-user::p1-usage common-lisp-user::p2-usage vector common-lisp-user::index common-lisp-user::value t eq common-lisp-user::comp-buffer-type-whynot-reason common-lisp-user::it common-lisp-user::reason common-lisp-user::compilation-module-trace common-lisp-user::printing-module common-lisp-user::get-module-fct #:g18793 #:g18792 common-lisp-user::printing-module-v common-lisp-user::act-r-output-stream #51# "  Buffer ~S prevents composition of these productions~@[~%   because ~a~]" format intersection common-lisp-user::comp-buffer-type-consistency #:g18797 #:g18796 "  Buffer ~S prevents composition of these productions~%   because the consistency test failed" "the consistency test failed" #Y(common-lisp-user::determine-composable nil nil (24 45 7 24 45 8 24 45 9 26 57 0 60 383 13 2 19 1 10 12 13 1 19 1 10 12 13 2 19 1 11 12 13 1 19 1 11 12 19 4 12 12 19 1 13 45 14 75 45 15 38 190 10 1 4 51 0 13 0 13 5 19 1 16 12 19 2 17 45 18 13 0 19 1 19 45 20 13 6 13 2 19 2 21 45 22 13 6 13 3 19 2 21 45 23 13 1 13 0 19 2 24 45 25 13 0 13 3 19 2 17 45 26 10 0 39 20 13 0 11 27 17 28 40 12 13 0 13 6 13 10 13 9 20 3 23 76 39 96 13 5 19 1 29 45 30 10 0 39 14 13 0 13 4 13 3 13 1 20 3 23 38 2 75 43 1 45 31 13 12 19 1 32 39 49 15 33 19 1 34 47 1 35 45 36 10 1 39 10 13 0 19 1 37 12 19 1 38 39 22 13 0 19 1 37 12 19 1 38 12 15 39 15 40 13 9 13 2 19 5 41 43 2 13 7 10 0 6 2 73 36 9 43 1 43 6 10 1 5 51 1 10 1 40 -192 43 2 13 2 19 1 11 12 13 1 19 1 10 12 19 2 42 45 14 75 45 15 38 115 10 1 4 51 0 13 0 13 5 19 1 16 12 19 2 17 45 18 13 0 19 1 43 39 83 13 0 19 1 43 12 13 1 13 6 13 5 13 4 20 4 23 76 39 63 13 6 19 1 32 39 47 15 33 19 1 34 47 1 44 45 45 10 1 39 10 13 0 19 1 37 12 19 1 38 39 20 13 0 19 1 37 12 19 1 38 12 15 39 15 46 13 3 19 4 41 43 2 13 1 1 47 6 2 73 36 3 43 1 10 1 5 51 1 10 1 40 -117 75 51 0 11 27 73 43 2 63 29) #62# #1# 56982) si::fset)) #1# 56982) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 29 12 19 2 30 1 0 73 29) #63=#A(t (31) (common-lisp-user::check-consistency ext::location (defun common-lisp-user::check-consistency) (#1# . 58717) ext::annotate :lambda-list (common-lisp-user::module common-lisp-user::action common-lisp-user::action-bindings condition common-lisp-user::cond-bindings) common-lisp-user::module common-lisp-user::action common-lisp-user::action-bindings condition common-lisp-user::cond-bindings common-lisp-user::compilation-module-ppm t common-lisp-user::production-statement-spec common-lisp-user::instantiate-chunk-spec common-lisp-user::cond-spec common-lisp-user::action-spec common-lisp-user::chunk-spec-slot-spec si::%dolist-var cond common-lisp-user::spec-slot-name common-lisp-user::slot-in-chunk-spec-p common-lisp-user::actions common-lisp-user::x common-lisp-user::spec-slot-value common-lisp-user::chunk-slot-equal #Y(nil nil nil (24 45 24 26 13 0 19 1 25 12 13 2 19 1 25 12 19 2 26 29) #63# #1# 58717) notevery #Y(common-lisp-user::check-consistency nil nil (24 45 7 24 45 8 24 45 9 24 45 10 24 45 11 26 57 0 60 124 13 5 19 1 12 39 6 11 13 73 38 111 13 4 19 1 14 12 13 3 19 2 15 12 13 2 19 1 14 12 13 1 19 2 15 12 46 16 46 17 13 1 19 1 18 45 19 75 45 20 38 57 10 1 4 51 0 13 2 13 0 19 1 21 12 19 2 22 39 12 13 2 13 0 19 1 21 12 19 2 18 45 23 10 0 39 9 34 27 12 13 0 19 2 28 39 5 75 73 36 5 43 1 10 1 5 51 1 10 1 40 -59 75 51 0 11 13 73 43 2 43 2 63 29) #63# #1# 58717) si::fset)) #1# 58717) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 60 12 19 2 61 1 0 73 29) #64=#A(t (62) (common-lisp-user::get-buffer-index ext::location (defun common-lisp-user::get-buffer-index) (#1# . 59692) ext::annotate :lambda-list (common-lisp-user::production common-lisp-user::buffer) common-lisp-user::production common-lisp-user::buffer common-lisp-user::production-buffer-indices #:g18836 #Y(nil nil nil (24 45 8 26 13 0 8 0 3 73 29) #64# #1# 59692) common-lisp-user::production-lhs common-lisp-user::get-buffers common-lisp-user::production-rhs append remove-duplicates mapcar #:g18837 si::structure-set si::%dolist-var common-lisp-user::x common-lisp-user::y common-lisp-user::production-statement-op #\= eq common-lisp-user::production-statement-target #Y(nil nil nil (24 45 22 26 13 0 19 1 23 12 1 24 17 25 73 39 12 13 0 19 1 26 12 10 1 4 17 25 29) #64# #1# 59692) find-if #:g18856 #:g18858 + #:g18857 rplacd #\? #Y(nil nil nil (24 45 22 26 13 0 19 1 23 12 1 34 17 25 73 39 12 13 0 19 1 26 12 10 1 4 17 25 29) #64# #1# 59692) #:g18859 #:g18861 #:g18860 #Y(nil nil nil (24 45 22 26 13 0 19 1 23 12 1 24 17 25 73 39 12 13 0 19 1 26 12 10 1 4 17 25 29) #64# #1# 59692) #:g18862 #:g18864 #:g18863 #\- #Y(nil nil nil (24 45 22 26 13 0 19 1 23 12 1 43 17 25 73 39 12 13 0 19 1 26 12 10 1 4 17 25 29) #64# #1# 59692) #:g18865 #:g18867 #:g18866 #\+ #Y(nil nil nil (24 45 22 26 13 0 19 1 23 12 1 48 17 25 73 39 12 13 0 19 1 26 12 10 1 4 17 25 29) #64# #1# 59692) #:g18868 #:g18870 #:g18869 #\* #Y(nil nil nil (24 45 22 26 13 0 19 1 23 12 1 53 17 25 73 39 12 13 0 19 1 26 12 10 1 4 17 25 29) #64# #1# 59692) #:g18871 #:g18873 #:g18872 assoc common-lisp-user::it #Y(common-lisp-user::get-buffer-index nil nil (24 45 7 24 45 8 26 13 1 19 1 9 76 39 342 10 1 45 10 34 11 12 13 2 19 1 12 12 19 1 13 12 13 2 19 1 14 12 19 1 13 12 19 2 15 12 19 1 16 12 19 2 17 45 18 13 1 15 7 9 14 13 0 19 4 19 43 1 43 1 13 1 19 1 9 45 20 75 45 21 38 269 10 1 4 51 0 34 27 12 13 3 19 1 12 12 19 2 28 39 30 10 0 45 29 8 8 45 30 10 1 5 12 13 0 19 2 31 45 32 13 2 10 0 17 33 10 0 43 3 34 35 12 13 3 19 1 12 12 19 2 28 39 30 10 0 45 36 8 16 45 37 10 1 5 12 13 0 19 2 31 45 38 13 2 10 0 17 33 10 0 43 3 34 39 12 13 3 19 1 14 12 19 2 28 39 30 10 0 45 40 8 1 45 41 10 1 5 12 13 0 19 2 31 45 42 13 2 10 0 17 33 10 0 43 3 34 44 12 13 3 19 1 14 12 19 2 28 39 30 10 0 45 45 8 2 45 46 10 1 5 12 13 0 19 2 31 45 47 13 2 10 0 17 33 10 0 43 3 34 49 12 13 3 19 1 14 12 19 2 28 39 30 10 0 45 50 8 4 45 51 10 1 5 12 13 0 19 2 31 45 52 13 2 10 0 17 33 10 0 43 3 34 54 12 13 3 19 1 14 12 19 2 28 39 30 10 0 45 55 8 32 45 56 10 1 5 12 13 0 19 2 31 45 57 13 2 10 0 17 33 10 0 43 3 10 1 5 51 1 10 1 40 -271 43 2 13 0 13 1 19 1 9 12 19 2 58 5 45 59 10 0 39 6 10 0 73 38 4 8 0 73 43 1 29) #64# #1# 59692) si::fset)) #1# 59692) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 15 12 19 2 16 1 0 73 29) #65=#A(t (17) (common-lisp-user::get-buffers ext::location (defun common-lisp-user::get-buffers) (#1# . 61730) ext::annotate :lambda-list (common-lisp-user::items) common-lisp-user::items common-lisp-user::res si::%dolist-var common-lisp-user::x #\! common-lisp-user::production-statement-op eq common-lisp-user::production-statement-target #Y(common-lisp-user::get-buffers nil nil (24 45 7 26 75 45 8 10 1 45 9 75 45 10 38 34 10 1 4 51 0 15 11 13 0 19 1 12 17 13 76 39 12 13 0 19 1 14 12 10 2 3 51 2 10 1 5 51 1 10 1 40 -36 75 51 0 10 2 73 43 2 43 1 29) #65# #1# 61730) si::fset)) #1# 61730) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 11 12 19 2 12 1 0 73 29) #66=#A(t (13) (common-lisp-user::get-compilation-type-struct ext::location (defun common-lisp-user::get-compilation-type-struct) (#1# . 61910) ext::annotate :lambda-list (common-lisp-user::buffer common-lisp-user::module) common-lisp-user::buffer common-lisp-user::module common-lisp-user::compilation-module-buffer-type-table gethash #Y(common-lisp-user::get-compilation-type-struct nil nil (24 45 7 24 45 8 26 13 1 13 0 19 1 9 12 19 2 10 29) #66# #1# 61910) si::fset)) #1# 61910) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 196 12 19 2 197 1 0 73 29) #67=#A(t (198) (common-lisp-user::compose-productions ext::location (defun common-lisp-user::compose-productions) (#1# . 62028) ext::annotate :lambda-list (common-lisp-user::module common-lisp-user::p2) common-lisp-user::module common-lisp-user::p2 common-lisp-user::compilation-module-previous common-lisp-user::previous-production-struct common-lisp-user::p1 common-lisp-user::produce-standard-representation common-lisp-user::p1-s common-lisp-user::p2-s common-lisp-user::production-variables common-lisp-user::p1-variables common-lisp-user::p2-variables common-lisp-user::remove-buffers common-lisp-user::p1-basic-vars common-lisp-user::p2-basic-vars common-lisp-user::production-name common-lisp-user::p2-name common-lisp-user::new-bindings common-lisp-user::production-bindings common-lisp-user::production-compilation-instan-setf intersection common-lisp-user::it union common-lisp-user::rename-variables common-lisp-user::production-compilation-instan common-lisp-user::replace-variables common-lisp-user::x common-lisp-user::compilation-module-buffer-var-names find #Y(nil nil nil (24 45 32 26 13 0 13 12 19 1 33 12 19 2 34 29) #67# #1# 62028) :key car remove-if-not common-lisp-user::production-drop-out-buffers-map-setf common-lisp-user::production-buffer-indices si::%dolist-var common-lisp-user::b common-lisp-user::get-compilation-type-struct common-lisp-user::comp-type common-lisp-user::comp-buffer-type-pre-instantiate common-lisp-user::instantiate t eq string "=" ">" concatenate intern common-lisp-user::b= "+" ">" common-lisp-user::b+ "*" ">" common-lisp-user::b* copy-tree common-lisp-user::c2 second common-lisp-user::a1= common-lisp-user::a1+ common-lisp-user::a1* common-lisp-user::spec-slot-name common-lisp-user::chunk-spec-variable-p #Y(nil nil nil (24 45 32 26 13 0 19 1 67 12 19 1 68 73 39 9 13 0 19 1 67 6 1 73 29) #67# #1# 62028) mapcan #Y(nil nil nil (24 45 32 26 13 0 19 1 67 12 19 1 68 73 39 9 13 0 19 1 67 6 1 73 29) #67# #1# 62028) #Y(nil nil nil (24 45 32 26 13 0 19 1 67 12 19 1 68 73 39 9 13 0 19 1 67 6 1 73 29) #67# #1# 62028) append common-lisp-user::mod-vars #Y(nil nil nil (24 45 32 26 13 0 19 1 67 12 19 1 68 73 39 9 13 0 19 1 67 6 1 73 29) #67# #1# 62028) common-lisp-user::cond-vars common-lisp-user::previous-production-bindings common-lisp-user::p1-instantiations #Y(nil nil nil (24 45 32 26 13 0 13 3 19 2 34 29) #67# #1# 62028) common-lisp-user::s1 #Y(nil nil nil (24 45 32 26 13 0 13 3 19 2 34 29) #67# #1# 62028) common-lisp-user::s2 common-lisp-user::replace-variables-special cdr mapcar #Y(nil nil nil (24 45 32 26 13 0 15 84 13 2 19 2 85 12 19 2 34 29) #67# #1# 62028) common-lisp-user::cv #Y(nil nil nil (24 45 32 26 13 0 13 3 19 2 34 29) #67# #1# 62028) #Y(nil nil nil (24 45 32 26 13 0 13 1 19 2 34 29) #67# #1# 62028) common-lisp-user::mappings common-lisp-user::compilation-module-ppm common-lisp-user::ppm common-lisp-user::bindings common-lisp-user::buffer common-lisp-user::comp-buffer-type-map common-lisp-user::map-fn common-lisp-user::!safe-bind! assoc #:g19018 nconc common-lisp-user::find-variables common-lisp-user::y #:g19022 remove-duplicates < common-lisp-user::constant-value-p #Y(nil nil nil (24 45 32 26 10 0 5 12 13 14 19 2 106 39 22 10 0 4 12 13 14 19 2 106 39 6 8 1 73 38 4 8 2 73 38 4 8 0 73 29) #67# #1# 62028) sort 0 #:g19026 common-lisp-user::mapping common-lisp-user::const :start1 :test equal position replace common-lisp-user::p3-s common-lisp-user::comp-buffer-type-compose common-lisp-user::compose-fn common-lisp-user::vals #:g19034 #:g19035 rplaca #:g19036 #:g19037 (common-lisp-user::!safe-eval!) #:g19043 #:g19041 #:g19042 (common-lisp-user::!safe-eval! common-lisp-user::!output!) #:g19049 #:g19047 #:g19048 (common-lisp-user::!safe-bind!) #:g19055 #:g19053 #:g19054 (common-lisp-user::!safe-eval!) #:g19061 #:g19059 #:g19060 (common-lisp-user::!safe-eval! common-lisp-user::!output! common-lisp-user::!stop!) #:g19067 #:g19065 #:g19066 caadr :test-not eql remove common-lisp-user::rhs-bindings common-lisp-user::rhs-vars common-lisp-user::lhs-vars common-lisp-user::v #:g19070 #:g19071 common-lisp-user::new-p common-lisp-user::post-conditions common-lisp-user::new-production-name "~A & ~A~{~@[ - ~a~]~}" common-lisp-user::comp-buffer-type-drop-out numberp logand zerop "=~a" format read-from-string common-lisp-user::chunk-copied-from-fct "=~a" #Y(nil nil nil (24 45 32 26 13 0 13 17 19 2 43 45 44 13 0 19 1 161 39 38 13 1 13 16 19 1 40 12 19 2 98 5 16 162 39 22 13 1 13 16 19 1 40 12 19 2 98 5 12 9 4 19 2 163 16 164 76 73 39 66 77 15 165 13 1 19 3 166 12 19 1 167 12 13 17 19 1 24 12 19 2 98 5 12 19 1 168 45 27 10 0 39 5 10 0 38 24 77 15 169 13 2 19 3 166 12 19 1 167 12 13 18 19 1 24 12 19 2 98 5 43 1 6 1 73 43 1 29) #67# #1# 62028) common-lisp-user::production-lhs-buffers common-lisp-user::sort-conditions condition (common-lisp-user::!safe-eval!) common-lisp-user::test length = common-lisp-user::==> common-lisp-user::sort-actions common-lisp-user::action (common-lisp-user::!safe-eval! common-lisp-user::!output!) listp common-lisp-user::procedural common-lisp-user::get-module-fct #:g19108 #:g19109 si::structure-set reverse common-lisp-user::p-fct common-lisp-user::new-prod common-lisp-user::get-production common-lisp-user::p3 #:g19110 #:g19111 common-lisp-user::update-params-for-compiled-production #Y(common-lisp-user::compose-productions nil nil (24 45 7 24 45 8 26 13 1 19 1 9 12 19 1 10 45 11 13 0 19 1 12 45 13 13 2 19 1 12 45 14 13 2 19 1 15 45 16 13 4 19 1 15 45 17 13 1 19 1 18 45 19 13 1 19 1 18 45 20 13 7 19 1 21 45 22 75 45 23 13 1 13 9 19 1 24 12 19 2 25 13 3 13 2 19 2 26 45 27 10 0 39 58 13 7 13 0 13 4 13 3 19 2 28 12 19 3 29 51 7 55 1 1 13 2 13 2 19 1 30 12 13 1 19 2 31 12 19 2 25 13 2 34 35 12 13 1 14 36 15 37 19 4 38 12 19 2 39 38 1 43 1 13 8 19 1 40 45 41 75 45 42 38 419 10 1 4 51 0 10 0 4 12 13 12 19 2 43 45 44 13 0 19 1 45 45 46 10 0 39 18 13 0 11 47 17 48 40 10 13 0 13 2 13 13 20 2 23 39 366 15 49 15 50 10 2 4 16 49 12 15 51 19 4 52 12 19 1 53 45 54 15 49 15 55 10 3 4 16 49 12 15 56 19 4 52 12 19 1 53 45 57 15 49 15 58 10 4 4 16 49 12 15 59 19 4 52 12 19 1 53 45 60 13 2 10 13 4 12 14 36 15 37 19 4 34 16 61 45 62 13 3 10 15 16 63 12 14 36 15 37 19 4 34 16 61 45 64 13 3 10 16 16 63 12 14 36 15 37 19 4 34 16 61 45 65 13 3 10 17 16 63 12 14 36 15 37 19 4 34 16 61 45 66 10 1 39 14 34 69 12 10 1 16 63 12 19 2 70 38 28 34 71 12 10 2 16 63 12 19 2 70 12 34 72 12 10 0 16 63 12 19 2 70 12 19 2 73 45 74 34 75 12 10 4 16 63 12 19 2 70 45 76 10 1 39 3 10 0 39 82 13 23 19 1 9 12 19 1 77 45 78 34 79 12 13 0 14 36 15 37 19 4 38 45 80 34 81 12 13 16 19 1 30 12 14 36 15 37 19 4 38 45 82 13 23 13 1 19 2 83 51 23 34 86 12 13 0 14 36 15 84 19 4 38 45 87 13 23 13 0 19 2 83 51 23 43 1 43 3 38 82 10 1 39 5 10 5 16 63 39 39 13 23 19 1 9 12 19 1 77 45 78 34 88 12 13 0 14 36 15 37 19 4 38 45 80 13 22 13 0 19 2 83 51 22 43 2 38 34 10 0 39 30 34 89 12 13 14 19 1 30 12 14 36 15 37 19 4 38 45 82 13 20 13 0 19 2 83 51 20 43 1 43 9 43 2 10 1 5 51 1 10 1 40 -421 43 2 75 45 90 13 11 19 1 91 45 92 10 0 39 24 13 12 19 1 9 12 19 1 77 12 13 11 19 1 21 12 19 1 30 12 19 2 73 45 93 15 37 13 11 19 1 40 12 19 2 85 12 15 37 13 12 19 1 40 12 19 2 85 12 19 2 28 45 41 75 45 94 38 58 10 1 4 51 0 13 0 13 15 19 2 43 45 44 13 0 19 1 95 45 96 10 0 39 26 13 0 13 17 13 15 13 14 13 16 13 13 13 2 20 6 23 12 13 6 19 2 73 51 6 43 2 10 1 5 51 1 10 1 40 -60 43 2 10 10 16 63 45 41 75 45 32 38 117 10 1 4 51 0 10 0 4 12 1 97 17 48 39 97 10 0 16 63 4 12 13 15 19 1 9 12 19 1 77 12 19 2 98 6 1 45 99 13 5 13 0 19 2 100 51 5 43 1 10 0 16 63 5 12 19 1 101 45 41 75 45 102 38 41 10 1 4 51 0 13 0 13 17 19 1 9 12 19 1 77 12 19 2 98 6 1 45 103 13 7 13 0 19 2 100 51 7 43 1 10 1 5 51 1 10 1 40 -43 43 2 10 1 5 51 1 10 1 40 -119 43 2 13 2 19 1 104 51 2 13 2 33 105 12 14 36 34 107 12 19 4 108 51 2 58 60 180 57 109 61 1 1 10 4 45 110 10 0 4 12 10 0 5 51 0 10 0 51 5 22 43 1 45 111 10 4 39 10 10 0 5 12 13 16 19 2 106 45 112 10 1 76 39 5 75 73 36 3 10 0 39 28 10 1 4 12 13 4 14 36 15 37 19 4 34 45 27 10 0 39 7 10 0 51 2 38 1 43 1 13 14 10 1 6 1 12 19 2 83 51 14 13 13 10 1 6 1 12 19 2 83 51 13 10 6 45 41 75 45 32 38 52 10 1 4 51 0 10 0 4 12 10 3 4 17 48 39 31 13 8 10 3 5 12 10 0 5 3 6 1 12 14 113 13 0 13 8 14 114 15 115 19 4 116 12 19 4 117 10 1 5 51 1 10 1 40 -54 43 2 43 2 35 0 0 62 63 77 75 6 2 45 118 15 37 13 12 19 1 40 12 19 2 85 12 15 37 13 13 19 1 40 12 19 2 85 12 19 2 28 45 41 75 45 94 38 114 10 1 4 51 0 13 0 13 16 19 2 43 45 44 13 0 19 1 119 45 120 10 0 39 82 13 0 13 16 13 15 13 17 13 14 13 2 20 5 23 45 121 10 5 45 122 10 6 4 12 10 1 4 12 19 2 73 45 123 13 1 10 0 17 124 10 0 43 1 43 1 10 5 45 125 10 6 16 63 12 10 1 16 63 12 19 2 73 45 126 10 1 5 12 10 0 17 124 10 0 43 1 43 1 43 1 43 2 10 1 5 51 1 10 1 40 -116 43 2 10 10 4 45 41 75 45 32 38 48 10 1 4 51 0 10 0 4 12 15 127 19 2 34 39 27 10 0 45 128 10 3 45 129 13 1 10 0 4 3 45 130 13 1 10 0 17 124 10 0 43 3 10 1 5 51 1 10 1 40 -50 43 2 10 10 16 63 45 41 75 45 32 38 51 10 1 4 51 0 10 0 4 12 15 131 19 2 34 39 30 10 0 45 132 10 3 45 133 13 1 10 0 16 63 3 45 134 10 1 5 12 10 0 17 124 10 0 43 3 10 1 5 51 1 10 1 40 -53 43 2 10 10 16 63 45 41 75 45 32 38 51 10 1 4 51 0 10 0 4 12 15 135 19 2 34 39 30 10 0 45 136 10 3 45 137 13 1 10 0 16 63 3 45 138 10 1 5 12 10 0 17 124 10 0 43 3 10 1 5 51 1 10 1 40 -53 43 2 10 11 4 45 41 75 45 32 38 64 10 1 4 51 0 10 0 4 12 15 139 19 2 34 39 43 13 0 10 2 4 12 14 114 15 115 19 4 34 76 39 27 10 0 45 140 10 3 45 141 13 1 10 0 4 3 45 142 13 1 10 0 17 124 10 0 43 3 10 1 5 51 1 10 1 40 -66 43 2 10 11 16 63 45 41 75 45 32 38 68 10 1 4 51 0 10 0 4 12 15 143 19 2 34 39 47 13 0 10 2 16 63 12 14 114 15 115 19 4 34 76 39 30 10 0 45 144 10 3 45 145 13 1 10 0 16 63 3 45 146 10 1 5 12 10 0 17 124 10 0 43 3 10 1 5 51 1 10 1 40 -70 43 2 15 84 10 0 4 12 19 2 85 12 19 1 101 12 15 84 10 0 16 63 12 19 2 85 12 19 1 101 12 15 147 15 97 10 0 16 63 12 14 148 15 149 14 36 15 37 19 6 150 12 19 2 85 12 46 151 46 152 46 153 10 1 45 41 75 45 154 38 85 10 1 4 51 0 13 0 13 19 19 1 33 12 19 2 34 40 17 13 0 13 2 19 2 34 40 8 13 0 13 4 19 2 34 76 39 43 10 5 45 155 10 6 16 63 12 13 1 13 11 19 1 30 12 19 2 98 6 1 12 19 2 31 45 156 10 1 5 12 10 0 17 124 10 0 43 1 43 1 10 1 5 51 1 10 1 40 -87 43 2 43 3 77 77 46 157 46 158 19 0 159 12 10 1 3 51 1 77 15 160 13 14 19 1 21 12 13 15 19 1 21 12 34 170 12 13 15 19 1 171 12 19 2 70 12 19 5 166 12 10 1 3 51 1 10 2 4 12 19 1 172 45 41 75 45 173 38 139 10 1 4 51 0 10 0 4 12 15 174 19 2 34 39 23 10 0 4 12 10 2 3 51 2 10 0 16 63 4 12 10 2 3 51 2 38 96 10 0 4 12 10 3 3 51 3 10 0 16 63 45 41 75 45 175 38 70 10 1 4 51 0 10 0 16 176 12 9 3 19 2 177 39 9 10 0 4 12 1 177 17 48 39 6 10 0 5 38 3 10 0 45 41 75 45 32 38 18 10 1 4 51 0 13 0 10 7 3 51 7 10 1 5 51 1 10 1 40 -20 43 2 10 1 5 51 1 10 1 40 -72 43 2 10 1 5 51 1 10 1 40 -141 43 2 10 0 39 10 13 0 13 1 19 2 73 51 1 15 178 10 1 3 51 1 10 2 16 63 12 19 1 179 45 41 75 45 180 38 209 10 1 4 51 0 10 0 4 12 10 3 3 51 3 10 0 4 12 15 181 19 2 34 39 14 10 0 16 63 4 12 10 3 3 51 3 38 166 10 0 4 12 1 97 17 48 39 26 10 0 16 63 4 12 10 3 3 51 3 10 0 16 63 16 63 12 10 3 3 51 3 38 131 10 0 16 63 76 40 124 10 0 16 63 16 176 12 9 1 19 2 177 39 9 10 0 16 63 4 16 182 76 39 14 10 0 16 63 4 12 10 3 3 51 3 38 87 10 0 16 63 45 41 75 45 175 38 70 10 1 4 51 0 10 0 16 176 12 9 3 19 2 177 39 9 10 0 4 12 1 177 17 48 39 6 10 0 5 38 3 10 0 45 41 75 45 32 38 18 10 1 4 51 0 13 0 10 7 3 51 7 10 1 5 51 1 10 1 40 -20 43 2 10 1 5 51 1 10 1 40 -72 43 2 10 1 5 51 1 10 1 40 -211 43 2 15 183 19 1 184 45 183 10 0 45 185 11 47 45 186 13 1 15 183 9 23 13 0 19 4 187 43 1 43 1 10 2 16 188 12 19 1 189 45 190 13 0 19 1 191 45 192 10 2 45 193 75 45 194 13 1 15 183 9 23 13 0 19 4 187 43 1 43 1 10 0 73 39 16 13 0 13 1 13 17 13 18 13 19 13 2 19 6 195 43 2 43 1 43 2 43 1 43 3 43 9 29) #67# #1# 62028) si::fset)) #1# 62028) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 85 12 19 2 86 1 0 73 29) #68=#A(t (87) (common-lisp-user::update-params-for-compiled-production ext::location (defun common-lisp-user::update-params-for-compiled-production) (#1# . 76402) ext::annotate :lambda-list (common-lisp-user::p3 common-lisp-user::new-prod common-lisp-user::p1 common-lisp-user::p2 common-lisp-user::module common-lisp-user::procedural) common-lisp-user::p3 common-lisp-user::new-prod common-lisp-user::p1 common-lisp-user::p2 common-lisp-user::module common-lisp-user::procedural common-lisp-user::check-for-duplicate-productions common-lisp-user::exists common-lisp-user::compilation-module-trace common-lisp-user::printing-module common-lisp-user::get-module-fct #:g19150 #:g19149 common-lisp-user::printing-module-v common-lisp-user::act-r-output-stream #51# "  New production:~%" format #:g19152 #:g19151 common-lisp-user::printing-module-suppress-cmds #:g19153 #:g19154 t #:g19155 (setf common-lisp-user::printing-module-suppress-cmds) (:v) common-lisp-user::sgp-fct #:g19156 #:g19157 (setf common-lisp-user::printing-module-suppress-cmds) common-lisp-user::print-production common-lisp-user::procedural-use-tree common-lisp-user::procedural-delay-tree common-lisp-user::add-production-to-tree common-lisp-user::production-user-created-setf common-lisp-user::production-name common-lisp-user::initialize-utility-for-compiled-production #:g19161 #:g19160 #:g19162 #:g19163 #:g19164 (setf common-lisp-user::printing-module-suppress-cmds) (:v) #:g19165 #:g19166 (setf common-lisp-user::printing-module-suppress-cmds) common-lisp-user::spp-fct common-lisp-user::production-user-created #:g19168 #:g19167 "  Recreating production ~a" #:g19169 #:g19170 si::structure-set common-lisp-user::delete-production common-lisp-user::release-name-fct #:g19171 #:g19172 common-lisp-user::update-utility-for-compiled-production #:g19174 #:g19173 #:g19175 #:g19176 #:g19177 (setf common-lisp-user::printing-module-suppress-cmds) (:v) #:g19178 #:g19179 (setf common-lisp-user::printing-module-suppress-cmds) #:g19181 #:g19180 "  Result is production ~a~%  No actions taken." #:g19182 #:g19183 #:g19184 #:g19185 #Y(common-lisp-user::update-params-for-compiled-production nil nil (24 45 7 24 45 8 24 45 9 24 45 10 24 45 11 24 45 12 26 13 5 13 4 19 2 13 45 14 10 0 76 39 276 13 2 19 1 15 39 129 15 16 19 1 17 47 1 18 45 19 10 1 39 10 13 0 19 1 20 12 19 1 21 39 18 13 0 19 1 20 12 19 1 21 12 15 22 15 23 19 3 24 43 2 15 16 19 1 17 47 1 25 45 26 10 1 39 59 13 0 19 1 27 45 28 10 1 45 29 11 30 45 31 13 0 13 1 33 32 18 2 43 1 43 1 64 7 15 33 19 1 34 65 10 1 45 35 10 1 45 36 13 0 13 1 33 37 18 2 43 1 43 1 66 43 1 43 2 4 39 8 13 6 14 30 19 2 38 13 1 19 1 39 39 7 13 1 19 1 40 76 39 8 13 6 13 1 19 2 41 13 5 77 19 2 42 13 5 13 4 19 1 43 12 13 3 19 1 43 12 19 3 44 13 2 19 1 15 39 76 15 16 19 1 17 47 1 45 45 46 10 1 39 59 13 0 19 1 27 45 47 10 1 45 48 11 30 45 49 13 0 13 1 33 50 18 2 43 1 43 1 64 7 15 51 19 1 34 65 10 1 45 52 10 1 45 53 13 0 13 1 33 54 18 2 43 1 43 1 66 43 1 43 2 4 73 39 9 10 5 6 1 12 19 1 55 38 337 13 0 19 1 56 76 39 221 13 2 19 1 15 39 47 15 16 19 1 17 47 1 57 45 58 10 1 39 10 13 0 19 1 20 12 19 1 21 39 20 13 0 19 1 20 12 19 1 21 12 15 22 15 59 13 2 19 4 24 43 2 10 1 45 60 11 30 45 61 13 1 15 12 9 23 13 0 19 4 62 43 1 43 1 13 5 19 1 63 13 5 19 1 64 10 1 45 65 75 45 66 13 1 15 12 9 23 13 0 19 4 62 43 1 43 1 13 0 13 4 19 1 43 12 13 3 19 1 43 12 19 3 67 13 2 19 1 15 39 76 15 16 19 1 17 47 1 68 45 69 10 1 39 59 13 0 19 1 27 45 70 10 1 45 71 11 30 45 72 13 0 13 1 33 73 18 2 43 1 43 1 64 7 15 74 19 1 34 65 10 1 45 75 10 1 45 76 13 0 13 1 33 77 18 2 43 1 43 1 66 43 1 43 2 4 73 39 9 10 0 6 1 12 19 1 55 38 109 13 2 19 1 15 39 47 15 16 19 1 17 47 1 78 45 79 10 1 39 10 13 0 19 1 20 12 19 1 21 39 20 13 0 19 1 20 12 19 1 21 12 15 22 15 80 13 2 19 4 24 43 2 10 1 45 81 11 30 45 82 13 1 15 12 9 23 13 0 19 4 62 43 1 43 1 13 5 19 1 63 13 5 19 1 64 10 1 45 83 75 45 84 13 1 15 12 9 23 13 0 19 4 62 43 1 43 1 43 1 29) #68# #1# 76402) si::fset)) #1# 76402) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 11 12 19 2 12 1 0 73 29) #69=#A(t (13) (common-lisp-user::new-production-name ext::location (defun common-lisp-user::new-production-name) (#1# . 78630) ext::annotate :lambda-list 0 common-lisp-user::production common-lisp-user::new-name-fct common-lisp-user::name common-lisp-user::get-production #Y(common-lisp-user::new-production-name nil nil (26 58 60 34 57 6 61 1 1 15 7 19 1 8 45 9 13 0 19 1 10 76 39 6 10 0 73 36 2 43 1 35 0 0 62 73 63 29) #69# #1# 78630) si::fset)) #1# 78630) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 26 12 19 2 27 1 0 73 29) #70=#A(t (28) (common-lisp-user::replace-variables-special ext::location (defun common-lisp-user::replace-variables-special) (#1# . 78775) ext::annotate :lambda-list (common-lisp-user::arg common-lisp-user::bindings) common-lisp-user::arg common-lisp-user::bindings common-lisp-user::res si::%dolist-var common-lisp-user::x #:g19203 common-lisp-user::!safe-eval! eql common-lisp-user::!safe-bind! common-lisp-user::replace-variables-for-eval common-lisp-user::replace-variables #:g19205 nconc #:g19204 rplaca second #:g19209 #:g19211 #:g19210 #Y(common-lisp-user::replace-variables-special nil nil (24 45 7 24 45 8 26 77 75 6 2 45 9 10 2 4 45 10 75 45 11 38 76 10 1 4 51 0 10 2 45 12 10 1 4 12 1 13 17 14 40 9 10 1 4 12 1 15 17 14 39 10 13 1 13 4 19 2 16 38 8 13 1 13 4 19 2 17 6 1 45 18 10 1 4 12 13 0 19 2 19 45 20 13 2 10 0 17 21 10 0 43 3 10 1 5 51 1 10 1 40 -78 43 2 10 2 16 22 45 10 75 45 11 38 79 10 1 4 51 0 10 2 45 23 10 1 4 12 1 13 17 14 40 9 10 1 4 12 1 15 17 14 39 10 13 1 13 4 19 2 16 38 8 13 1 13 4 19 2 17 6 1 45 24 10 1 16 22 12 13 0 19 2 19 45 25 10 2 5 12 10 0 17 21 10 0 43 3 10 1 5 51 1 10 1 40 -81 43 2 10 0 73 43 1 29) #70# #1# 78775) si::fset)) #1# 78775) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 21 12 19 2 22 1 0 73 29) #71=#A(t (23) (common-lisp-user::sort-conditions ext::location (defun common-lisp-user::sort-conditions) (#1# . 79419) ext::annotate :lambda-list (common-lisp-user::conditions-list) common-lisp-user::conditions-list copy-tree common-lisp-user::new-conditions string< :key common-lisp-user::x string common-lisp-user::val #\! aref eql "z" #Y(nil nil nil (24 45 12 26 10 0 4 16 13 45 14 15 15 13 0 9 0 19 2 16 17 17 39 6 1 18 73 38 4 10 0 73 43 1 29) #71# #1# 79419) sort #Y(common-lisp-user::sort-conditions nil nil (24 45 7 26 10 0 16 8 45 9 13 0 15 10 14 11 34 19 12 19 4 20 43 1 29) #71# #1# 79419) si::fset)) #1# 79419) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 16 12 19 2 17 1 0 73 29) #72=#A(t (18) (common-lisp-user::sort-actions ext::location (defun common-lisp-user::sort-actions) (#1# . 79815) ext::annotate :lambda-list (common-lisp-user::actions-list) common-lisp-user::actions-list copy-tree common-lisp-user::new-actions string> :key common-lisp-user::x string #Y(nil nil nil (24 45 12 26 10 0 4 16 13 29) #72# #1# 79815) stable-sort #Y(common-lisp-user::sort-actions nil nil (24 45 7 26 10 0 16 8 45 9 13 0 15 10 14 11 34 14 12 19 4 15 43 1 29) #72# #1# 79815) si::fset)) #1# 79815) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 15 12 19 2 16 1 0 73 29) #73=#A(t (17) (common-lisp-user::check-for-duplicate-productions ext::location (defun common-lisp-user::check-for-duplicate-productions) (#1# . 79975) ext::annotate :lambda-list (common-lisp-user::p common-lisp-user::name) common-lisp-user::p common-lisp-user::name common-lisp-user::all-productions si::%dolist-var common-lisp-user::old-p equal common-lisp-user::get-production common-lisp-user::equivalent-productions-p #Y(common-lisp-user::check-for-duplicate-productions nil nil (24 45 7 24 45 8 26 57 0 60 60 19 0 9 45 10 75 45 11 38 38 10 1 4 51 0 13 0 10 3 17 12 76 39 19 13 0 19 1 13 12 13 4 19 2 14 39 6 10 0 73 36 2 10 1 5 51 1 10 1 40 -40 75 51 0 75 73 43 2 63 29) #73# #1# 79975) si::fset)) #1# 79975) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 41 12 19 2 42 1 0 73 29) #74=#A(t (43) (common-lisp-user::equivalent-productions-p ext::location (defun common-lisp-user::equivalent-productions-p) (#1# . 80224) ext::annotate :lambda-list (common-lisp-user::p1 common-lisp-user::p2) common-lisp-user::p1 common-lisp-user::p2 common-lisp-user::production-buffer-indices common-lisp-user::get-buffer-index common-lisp-user::production-variables common-lisp-user::remove-buffers length = common-lisp-user::production-lhs common-lisp-user::production-rhs equal common-lisp-user::x common-lisp-user::&&dummy&& #Y(nil nil nil (24 45 18 26 13 0 1 19 3 73 29) #74# #1# 80224) mapcar #Y(nil nil nil (24 45 18 26 13 0 1 19 3 73 29) #74# #1# 80224) common-lisp-user::produce-standard-representation common-lisp-user::s2 common-lisp-user::s1 common-lisp-user::mappings2 common-lisp-user::mappings1 copy-tree common-lisp-user::replace-variables :test equalp union common-lisp-user::&&var&& :key car remove #Y(nil nil nil (24 45 18 26 10 3 16 28 12 10 0 4 12 1 33 3 12 10 0 4 12 13 1 14 34 15 35 19 4 36 3 12 19 2 29 29) #74# #1# 80224) #Y(nil nil nil (24 45 18 26 10 4 16 28 12 10 0 4 12 1 33 3 12 10 0 4 12 13 2 14 34 15 35 19 4 36 3 12 19 2 29 29) #74# #1# 80224) common-lisp-user::remove-unneeded-variables t #Y(common-lisp-user::equivalent-productions-p nil nil (24 45 7 24 45 8 26 57 0 60 286 13 2 19 1 9 76 39 7 13 2 77 19 2 10 13 1 19 1 9 76 39 7 13 1 77 19 2 10 13 2 19 1 11 12 19 1 12 16 13 12 13 1 19 1 11 12 19 1 12 16 13 12 19 2 14 39 56 13 2 19 1 15 16 13 12 13 1 19 1 15 16 13 12 19 2 14 39 35 13 2 19 1 16 16 13 12 13 1 19 1 16 16 13 12 19 2 14 39 14 13 2 19 1 9 12 13 1 19 1 9 17 17 73 39 170 34 20 12 13 2 19 1 11 12 19 1 12 12 19 2 21 12 34 22 12 13 1 19 1 11 12 19 1 12 12 19 2 21 12 13 2 19 1 23 12 13 1 19 1 23 12 46 24 46 25 46 26 46 27 10 2 16 28 12 13 0 19 2 29 12 10 3 16 28 12 13 1 19 2 29 12 14 30 15 31 19 4 32 16 13 12 10 2 16 13 12 19 2 14 76 39 5 75 73 36 4 34 37 12 13 0 19 2 21 51 0 34 38 12 13 1 19 2 21 51 1 13 0 19 1 39 51 0 13 1 19 1 39 51 1 13 0 13 1 14 30 15 31 19 4 32 16 13 12 10 0 16 13 12 19 2 14 76 39 5 75 73 36 4 11 40 73 43 4 63 29) #74# #1# 80224) si::fset)) #1# 80224) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 25 12 19 2 26 1 0 73 29) #75=#A(t (27) (common-lisp-user::remove-unneeded-variables ext::location (defun common-lisp-user::remove-unneeded-variables) (#1# . 82566) ext::annotate :lambda-list (common-lisp-user::mapping) common-lisp-user::mapping common-lisp-user::res si::%dolist-var common-lisp-user::var common-lisp-user::acts common-lisp-user::conds common-lisp-user::x common-lisp-user::&&var&& common-lisp-user::recursive-find string aref #\! common-lisp-user::y find #Y(nil nil nil (24 45 19 26 15 14 13 0 19 2 20 29) #75# #1# 82566) second remove-if-not #Y(nil nil nil (24 45 19 26 15 14 13 0 19 2 20 29) #75# #1# 82566) #Y(common-lisp-user::remove-unneeded-variables nil nil (24 45 7 26 75 45 8 10 1 45 9 75 45 10 38 188 10 1 4 51 0 77 77 46 11 46 12 10 2 4 45 9 75 45 13 38 63 10 1 4 51 0 15 14 13 0 19 2 15 39 44 10 0 4 16 16 12 9 0 19 2 17 42 18 6 10 0 73 38 19 10 0 4 12 34 21 12 10 0 16 22 12 19 2 23 6 2 73 12 10 2 3 51 2 10 1 5 51 1 10 1 40 -65 43 2 10 2 16 22 45 9 75 45 13 38 63 10 1 4 51 0 15 14 13 0 19 2 15 39 44 10 0 4 16 16 12 9 0 19 2 17 42 18 6 10 0 73 38 19 10 0 4 12 34 24 12 10 0 16 22 12 19 2 23 6 2 73 12 10 3 3 51 3 10 1 5 51 1 10 1 40 -65 43 2 13 0 10 1 6 2 12 10 4 3 51 4 43 2 10 1 5 51 1 10 1 40 -190 43 2 10 0 73 43 1 29) #75# #1# 82566) si::fset)) #1# 82566) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 24 12 19 2 25 1 0 73 29) #76=#A(t (26) (common-lisp-user::get-buffer-composition-type ext::location (defun common-lisp-user::get-buffer-composition-type) (#1# . 83522) ext::annotate :lambda-list (common-lisp-user::buffer) common-lisp-user::buffer common-lisp-user::production-compilation common-lisp-user::get-module-fct common-lisp-user::it common-lisp-user::compilation-module-buffer-type-table gethash *error-output* #3# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "No type for buffer ~S found" format finish-output "Production compilation module not found" #Y(common-lisp-user::get-buffer-composition-type nil nil (24 45 7 26 15 8 19 1 9 45 10 10 0 39 68 13 1 13 0 19 1 11 12 19 2 12 45 10 10 0 39 6 10 0 73 38 42 14 13 15 14 19 0 15 73 39 12 19 0 16 16 17 12 9 1 19 2 18 12 19 0 19 12 15 20 13 2 19 6 21 12 14 13 19 1 22 22 73 43 1 38 40 14 13 15 14 19 0 15 73 39 12 19 0 16 16 17 12 9 1 19 2 18 12 19 0 19 12 15 23 19 5 21 12 14 13 19 1 22 22 73 43 1 29) #76# #1# 83522) si::fset)) #1# 83522) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 14 12 19 2 15 1 0 73 29) #77=#A(t (16) (common-lisp-user::recursive-find ext::location (defun common-lisp-user::recursive-find) (#1# . 83830) ext::annotate :lambda-list (common-lisp-user::item list) common-lisp-user::item list listp common-lisp-user::x #Y(nil nil nil (24 45 10 26 13 2 13 0 19 2 0 29) #77# #1# 83830) some eq #Y(common-lisp-user::recursive-find nil nil (24 45 7 24 45 8 26 10 0 16 9 39 11 34 11 12 13 0 19 2 12 38 7 13 1 10 0 17 13 29) #77# #1# 83830) si::fset)) #1# 83830) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 16 12 19 2 17 1 0 73 29) #78=#A(t (18) (common-lisp-user::rename-variables ext::location (defun common-lisp-user::rename-variables) (#1# . 83961) ext::annotate :lambda-list (common-lisp-user::p common-lisp-user::vars common-lisp-user::not-vars) common-lisp-user::p common-lisp-user::vars common-lisp-user::not-vars common-lisp-user::x common-lisp-user::new-name-fct common-lisp-user::new-var find common-lisp-user::bindings common-lisp-user::replace-variables #Y(common-lisp-user::rename-variables nil nil (24 45 7 24 45 8 24 45 9 26 10 1 45 10 10 0 4 12 19 1 11 45 12 38 11 10 1 4 12 19 1 11 12 53 0 13 0 13 2 19 2 13 76 39 -19 10 0 43 1 45 12 10 1 4 12 10 0 3 6 1 45 14 38 58 10 2 5 51 2 10 2 4 12 19 1 11 45 12 38 11 10 3 4 12 19 1 11 12 53 0 13 0 13 4 19 2 13 76 39 -19 10 0 43 1 51 1 10 2 4 12 10 1 3 12 10 0 3 51 0 51 0 10 2 5 76 39 -62 13 5 13 0 19 2 15 12 13 0 72 2 43 3 29) #78# #1# 83961) si::fset)) #1# 83961) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 23 12 19 2 24 1 0 73 29) #79=#A(t (25) (common-lisp-user::remove-buffers ext::location (defun common-lisp-user::remove-buffers) (#1# . 84583) ext::annotate :lambda-list (common-lisp-user::vars) common-lisp-user::vars common-lisp-user::production-compilation common-lisp-user::get-module-fct common-lisp-user::module common-lisp-user::x common-lisp-user::compilation-module-buffer-var-names find symbol-name subseq intern common-lisp-user::buffer common-lisp-user::get-compilation-type-struct common-lisp-user::buffer-type common-lisp-user::comp-buffer-type-drop-out #Y(nil nil nil (24 45 11 26 13 0 13 1 19 1 12 12 19 2 13 73 39 33 10 0 16 14 12 9 1 19 2 15 12 19 1 16 45 17 13 0 13 2 19 2 18 45 19 13 0 19 1 20 43 2 29) #79# #1# 84583) remove-if #Y(common-lisp-user::remove-buffers nil nil (24 45 7 26 15 8 19 1 9 45 10 34 21 12 13 1 19 2 22 43 1 29) #79# #1# 84583) si::fset)) #1# 84583) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 38 12 19 2 39 15 0 15 40 15 41 19 3 42 1 0 73 29) #80=#A(t (43) (common-lisp-user::produce-standard-representation ext::location (defun common-lisp-user::produce-standard-representation) (#1# . 85016) ext::annotate :lambda-list (common-lisp-user::production) common-lisp-user::production common-lisp-user::production-standard-rep common-lisp-user::it common-lisp-user::rhs common-lisp-user::lhs common-lisp-user::parse common-lisp-user::production-lhs si::%dolist-var common-lisp-user::c common-lisp-user::convert-cmd common-lisp-user::production-statement-op #\! common-lisp-user::production-statement-definition common-lisp-user::production-statement-spec common-lisp-user::chunk-spec-slot-spec string< :key common-lisp-user::slot-to-string sort common-lisp-user::production-rhs common-lisp-user::a eq length = common-lisp-user::x string #Y(nil nil nil (24 45 31 26 10 0 4 16 32 29) #80# #1# 85016) #Y(nil nil nil (24 45 31 26 10 0 4 16 32 29) #80# #1# 85016) #:g19254 #:g19255 si::structure-set #Y(common-lisp-user::produce-standard-representation nil nil (24 45 7 26 13 0 19 1 8 45 9 10 0 39 6 10 0 73 38 252 77 77 77 46 10 46 11 46 12 13 4 19 1 13 45 14 75 45 15 38 59 10 1 4 51 0 13 0 19 1 16 12 13 0 19 1 17 42 18 8 13 0 19 1 19 38 20 13 0 19 1 20 12 19 1 21 12 15 22 14 23 15 24 19 4 25 6 2 12 10 3 3 51 3 10 1 5 51 1 10 1 40 -61 43 2 13 4 19 1 26 45 14 75 45 27 38 88 10 1 4 51 0 13 0 19 1 16 12 13 0 19 1 19 76 39 4 75 38 53 15 18 13 0 19 1 17 17 28 40 14 13 0 19 1 19 16 29 12 9 1 19 2 30 39 8 13 0 19 1 19 38 20 13 0 19 1 20 12 19 1 21 12 15 22 14 23 15 24 19 4 25 6 2 12 10 4 3 51 4 10 1 5 51 1 10 1 40 -90 43 2 13 2 15 22 14 23 34 33 12 19 4 25 12 10 0 3 51 0 13 1 15 22 14 23 34 34 12 19 4 25 12 10 0 3 51 0 10 4 45 35 10 1 45 36 13 1 15 7 9 15 13 0 19 4 37 43 1 43 1 43 3 43 1 29) #80# #1# 85016) si::fset function "This should be part of the general parsing, but for now doing after the fact
   assumes that conditions and actions aren't duplicated" si::set-documentation)) #1# 85016) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 1 0 73 29) #81=#A(t (15) (common-lisp-user::slot-to-string ext::location (defun common-lisp-user::slot-to-string) (#1# . 86545) ext::annotate :lambda-list (common-lisp-user::slot-list) common-lisp-user::slot-list "~{~A%%%~}" format #Y(common-lisp-user::slot-to-string nil nil (24 45 7 26 77 15 8 13 0 19 3 9 29) #81# #1# 86545) si::fset function "Converts a list of items to a string with the gaps replaced with %%%" si::set-documentation)) #1# 86545) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 16 12 19 2 17 15 0 15 18 15 19 19 3 20 1 0 73 29) #82=#A(t (21) (common-lisp-user::convert-cmd ext::location (defun common-lisp-user::convert-cmd) (#1# . 86693) ext::annotate :lambda-list (common-lisp-user::statement) common-lisp-user::statement "~c~a~c" common-lisp-user::production-statement-op common-lisp-user::production-statement-target #\! eq #\> format read-from-string #Y(common-lisp-user::convert-cmd nil nil (24 45 7 26 77 15 8 13 0 19 1 9 12 13 0 19 1 10 12 15 11 13 0 19 1 9 17 12 39 6 1 11 73 38 4 1 13 73 12 19 5 14 12 19 1 15 29) #82# #1# 86693) si::fset function "Converts a statement to the production symbol" si::set-documentation)) #1# 86693) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 22 12 19 2 23 1 0 73 29) #83=#A(t (24) (common-lisp-user::buffer+-union ext::location (defun common-lisp-user::buffer+-union) (#1# . 86998) ext::annotate :lambda-list (common-lisp-user::a1 common-lisp-user::a2) common-lisp-user::a1 common-lisp-user::a2 common-lisp-user::spec-slot-name second mapcar common-lisp-user::a2-slots common-lisp-user::x common-lisp-user::spec-slot-op = eq find #Y(nil nil nil (24 45 13 26 13 0 19 1 14 12 1 15 17 16 73 39 12 13 0 19 1 9 12 13 1 19 2 17 29) #83# #1# 86998) remove-if common-lisp-user::a1-remain append #Y(common-lisp-user::buffer+-union nil nil (24 45 7 24 45 8 26 15 9 10 0 16 10 12 19 2 11 45 12 34 18 12 10 2 16 10 12 19 2 19 45 20 10 3 4 12 13 0 10 2 16 10 12 19 2 21 6 2 73 43 2 29) #83# #1# 86998) si::fset)) #1# 86998) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 22 12 19 2 23 1 0 73 29) #84=#A(t (24) (common-lisp-user::buffer=-union ext::location (defun common-lisp-user::buffer=-union) (#1# . 87369) ext::annotate :lambda-list (common-lisp-user::a1 common-lisp-user::a2) common-lisp-user::a1 common-lisp-user::a2 common-lisp-user::spec-slot-name second mapcar common-lisp-user::a2-slots common-lisp-user::x common-lisp-user::spec-slot-op = eq find #Y(nil nil nil (24 45 13 26 13 0 19 1 14 12 1 15 17 16 73 39 12 13 0 19 1 9 12 13 1 19 2 17 29) #84# #1# 87369) remove-if common-lisp-user::a1-remain append #Y(common-lisp-user::buffer=-union nil nil (24 45 7 24 45 8 26 15 9 10 0 16 10 12 19 2 11 45 12 34 18 12 10 2 16 10 12 19 2 19 45 20 10 3 4 12 13 0 10 2 16 10 12 19 2 21 6 2 73 43 2 29) #84# #1# 87369) si::fset)) #1# 87369) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 23 12 19 2 24 1 0 73 29) #85=#A(t (25) (common-lisp-user::buffer-condition-union ext::location (defun common-lisp-user::buffer-condition-union) (#1# . 87802) ext::annotate :lambda-list (common-lisp-user::c1 common-lisp-user::c2 common-lisp-user::a1) common-lisp-user::c1 common-lisp-user::c2 common-lisp-user::a1 common-lisp-user::spec-slot-name second mapcar common-lisp-user::a1-slots common-lisp-user::x find #Y(nil nil nil (24 45 14 26 13 0 19 1 10 12 13 1 19 2 15 29) #85# #1# 87802) remove-if common-lisp-user::c2-remain append :test equal remove-duplicates #Y(common-lisp-user::buffer-condition-union nil nil (24 45 7 24 45 8 24 45 9 26 10 2 40 3 10 1 73 39 79 10 1 76 39 6 10 2 73 38 69 15 10 10 0 16 11 12 19 2 12 45 13 34 16 12 10 2 16 11 12 19 2 17 45 18 10 4 76 39 12 10 3 4 12 10 0 6 2 73 38 26 10 4 4 12 10 4 16 11 12 13 0 19 2 19 12 14 20 15 21 19 3 22 6 2 73 43 2 29) #85# #1# 87802) si::fset)) #1# 87802) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 12 12 19 2 13 1 0 73 29) #86=#A(t (14) (common-lisp-user::constant-value-p ext::location (defun common-lisp-user::constant-value-p) (#1# . 88301) ext::annotate :lambda-list (common-lisp-user::val common-lisp-user::module) common-lisp-user::val common-lisp-user::module common-lisp-user::chunk-spec-variable-p common-lisp-user::compilation-module-buffer-var-names find #Y(common-lisp-user::constant-value-p nil nil (24 45 7 24 45 8 26 13 1 19 1 9 76 73 40 12 13 1 13 0 19 1 10 12 19 2 11 29) #86# #1# 88301) si::fset)) #1# 88301) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 16 12 14 17 9 3 19 4 18 1 0 73 29) #87=#A(t (19) (common-lisp-user::specify-compilation-buffer-type ext::location (defmacro common-lisp-user::specify-compilation-buffer-type) (#1# . 88444) ext::annotate :lambda-list (common-lisp-user::buffer-name common-lisp-user::buffer-type) #:g19257 #:g19256 #:g19258 si::dm-too-few-arguments common-lisp-user::buffer-name common-lisp-user::buffer-type si::dm-too-many-arguments common-lisp-user::specify-compilation-buffer-type-fct quote #Y(common-lisp-user::specify-compilation-buffer-type nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 76 39 6 13 3 19 1 10 10 1 4 12 10 1 5 51 1 22 45 12 10 2 39 6 13 4 19 1 13 15 14 15 15 10 1 6 2 12 15 15 10 0 6 2 6 3 73 29) #87# #1# 88444) t si::fset)) #1# 88444) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 35 12 19 2 36 1 0 73 29) #88=#A(t (37) (common-lisp-user::specify-compilation-buffer-type-fct ext::location (defun common-lisp-user::specify-compilation-buffer-type-fct) (#1# . 88766) ext::annotate :lambda-list (common-lisp-user::buffer-name common-lisp-user::buffer-type) common-lisp-user::buffer-name common-lisp-user::buffer-type common-lisp-user::production-compilation common-lisp-user::get-module-fct common-lisp-user::module common-lisp-user::*valid-compilation-buffer-types* gethash type common-lisp-user::mp-time-ms = *error-output* #3# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "Cannot change a buffer's compilation type once the model has started running." format finish-output common-lisp-user::buffers find "No buffer named ~s found." "Invalid compilation buffer type ~S." common-lisp-user::compilation-module-buffer-type-table si::hash-set t "No production compilation module found" #Y(common-lisp-user::specify-compilation-buffer-type-fct nil nil (24 45 7 24 45 8 26 15 9 19 1 10 45 11 10 0 39 186 13 1 14 12 19 2 13 45 14 19 0 15 12 9 0 19 2 16 76 39 42 14 17 15 18 19 0 19 73 39 12 19 0 20 16 21 12 9 1 19 2 22 12 19 0 23 12 15 24 19 5 25 12 14 17 19 1 26 22 73 38 120 13 3 19 0 27 12 19 2 28 76 39 44 14 17 15 18 19 0 19 73 39 12 19 0 20 16 21 12 9 1 19 2 22 12 19 0 23 12 15 29 13 3 19 6 25 12 14 17 19 1 26 22 73 38 65 10 0 76 39 44 14 17 15 18 19 0 19 73 39 12 19 0 20 16 21 12 9 1 19 2 22 12 19 0 23 12 15 30 13 2 19 6 25 12 14 17 19 1 26 22 73 38 17 13 3 13 1 19 1 31 12 13 0 19 3 32 11 33 73 43 1 38 40 14 17 15 18 19 0 19 73 39 12 19 0 20 16 21 12 9 1 19 2 22 12 19 0 23 12 15 34 19 5 25 12 14 17 19 1 26 22 73 43 1 29) #88# #1# 88766) si::fset)) #1# 88766) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 45 12 19 2 46 1 0 73 29) #89=#A(t (47) (common-lisp-user::show-compilation-buffer-types ext::location (defun common-lisp-user::show-compilation-buffer-types) (#1# . 89632) ext::annotate :lambda-list common-lisp-user::production-compilation common-lisp-user::get-module-fct common-lisp-user::module max common-lisp-user::x string length #Y(nil nil nil (24 45 10 26 10 0 16 11 16 12 29) #89# #1# 89632) common-lisp-user::buffers mapcar apply common-lisp-user::len common-lisp-user::printing-module #:g19270 #:g19269 common-lisp-user::printing-module-suppress-cmds common-lisp-user::printing-module-c common-lisp-user::act-r-output-stream "~&~@?~%" "  ~va        Type" "Buffer" format common-lisp-user::buffer type #:g19272 #:g19271 "~va        ~a" common-lisp-user::comp-buffer-type-name #Y(nil nil nil (24 45 28 24 45 29 26 15 18 19 1 7 47 1 30 45 31 10 1 39 18 13 0 19 1 21 76 39 10 13 0 19 1 22 12 19 1 23 73 39 28 13 0 19 1 22 12 19 1 23 12 15 24 15 32 13 4 13 3 13 2 19 1 33 12 19 6 27 43 2 29) #89# #1# 89632) common-lisp-user::compilation-module-buffer-type-table maphash *error-output* #3# common-lisp-user::current-mp-fct common-lisp-user::mp-models > common-lisp-user::current-model "No production compilation module found" finish-output #Y(common-lisp-user::show-compilation-buffer-types nil nil (26 15 6 19 1 7 45 8 10 0 39 89 15 9 34 13 12 19 0 14 12 19 2 15 12 19 2 16 45 17 15 18 19 1 7 47 1 19 45 20 10 1 39 18 13 0 19 1 21 76 39 10 13 0 19 1 22 12 19 1 23 39 22 13 0 19 1 22 12 19 1 23 12 15 24 15 25 13 2 15 26 19 5 27 43 2 34 34 12 13 1 19 1 35 17 36 43 1 38 40 14 37 15 38 19 0 39 73 39 12 19 0 40 16 12 12 9 1 19 2 41 12 19 0 42 12 15 43 19 5 27 12 14 37 19 1 44 22 73 43 1 29) #89# #1# 89632) si::fset)) #1# 89632) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 15 12 14 16 9 2 19 4 17 1 0 73 29) #90=#A(t (18) (common-lisp-user::compilation-buffer-type ext::location (defmacro common-lisp-user::compilation-buffer-type) (#1# . 90232) ext::annotate :lambda-list (common-lisp-user::buffer-name) #:g19274 #:g19273 #:g19275 si::dm-too-few-arguments common-lisp-user::buffer-name si::dm-too-many-arguments common-lisp-user::compilation-buffer-type-fct quote #Y(common-lisp-user::compilation-buffer-type nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 39 6 13 3 19 1 12 15 13 15 14 10 0 6 2 6 2 73 29) #90# #1# 90232) t si::fset)) #1# 90232) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 25 12 19 2 26 1 0 73 29) #91=#A(t (27) (common-lisp-user::compilation-buffer-type-fct ext::location (defun common-lisp-user::compilation-buffer-type-fct) (#1# . 90330) ext::annotate :lambda-list (common-lisp-user::buffer) common-lisp-user::buffer common-lisp-user::production-compilation common-lisp-user::get-module-fct common-lisp-user::module common-lisp-user::compilation-module-buffer-type-table gethash type common-lisp-user::comp-buffer-type-name *error-output* #3# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "No production compilation module found" format finish-output #Y(common-lisp-user::compilation-buffer-type-fct nil nil (24 45 7 26 15 8 19 1 9 45 10 10 0 39 31 13 1 13 0 19 1 11 12 19 2 12 45 13 10 0 39 8 13 0 19 1 14 38 3 75 73 43 1 38 40 14 15 15 16 19 0 17 73 39 12 19 0 18 16 19 12 9 1 19 2 20 12 19 0 21 12 15 22 19 5 23 12 14 15 19 1 24 22 73 43 1 29) #91# #1# 90330) si::fset)) #1# 90330) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 122 12 19 2 123 1 0 73 29) #92=#A(t (124) (common-lisp-user::build-compilation-type-file ext::location (defun common-lisp-user::build-compilation-type-file) (#1# . 90675) ext::annotate :lambda-list (common-lisp-user::files &optional (common-lisp-user::by-dan nil)) common-lisp-user::files common-lisp-user::by-dan si::%dolist-var common-lisp-user::file :direction :input open common-lisp-user::f map common-lisp-user::compose common-lisp-user::consistency common-lisp-user::pre-instan common-lisp-user::buffers common-lisp-user::table common-lisp-user::drop-out common-lisp-user::whynot read common-lisp-user::style "ACT-R:tools;~(~a~)-compilation.lisp" format translate-logical-pathname pathname :output :if-exists :overwrite :if-does-not-exist :create common-lisp-user::outfile get-universal-time decode-universal-time common-lisp-user::year common-lisp-user::month common-lisp-user::date common-lisp-user::hour common-lisp-user::minute second ";;;  -*- mode: LISP; Syntax: COMMON-LISP;  Base: 10 -*-~%" ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;~%" ";;; ~%" ";;; Author      : ~[Dan Bothell~]~%" ";;; Copyright   : (c) ~d ~[Dan Bothell~]~%" ";;; Availability: Covered by the GNU LGPL, see LGPL.txt~%" ";;; Address     : ~[Department of Psychology~]~%" ";;;             : ~[Carnegie Mellon University~]~%" ";;;             : ~[Pittsburgh, PA 15213-3890~]~%" ";;;             : ~[db30@andrew.cmu.edu~]~%" ";;; ~%" ";;; ~%" ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;~%" ";;; ~%" ";;; Filename    : ~(~a~)-compilation.lisp~%" ";;; Version     : 1.0~%" ";;; ~%" ";;; Description : Production compilation ~s style definition.~%" ";;; ~%" ";;; Bugs        : ~%" ";;;~%" ";;; To do       : ~%;;;~%" ";;; ----- History -----~%" ";;;~%" ";;; ~d.~d.~2,'0d ~[Dan~]~%" ";;;             : * Created automatically by build-compilation-type-file.~%" ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;~%" "~%" "#+:packaged-actr (in-package :act-r)~%" "#+(and :clean-actr (not :packaged-actr) :ALLEGRO-IDE) (in-package :cg-user)~%" "#-(or (not :clean-actr) :packaged-actr :ALLEGRO-IDE) (in-package :cl-user)~%" read-line common-lisp-user::l make-string-input-stream common-lisp-user::s common-lisp-user::val reverse common-lisp-user::p2-indices length si::%dotimes-var common-lisp-user::i common-lisp-user::p1-index common-lisp-user::j common-lisp-user::it nth 1+ < "~%" "~%" "(defun ~a (module p1 p1-s p2 p2-s buffer)~%)~%" "(defun ~a (p1 p1-s p2 p2-s buffer)~%)~%" "(defun ~a (buffer module p1 p2)~%)~%" "(defun ~a (buffer-and-index p2)~%)~%" "(defun ~a (p1-index p2-index failed-function)~%)~%" common-lisp-user::done common-lisp-user::x third t eq find "(defun ~a (buffer p1 p2)~%)~%" "~%(define-compilation-type ~a ~a ~s ~a ~a ~a ~a ~a ~a)~%~%" "#|~%" "This library is free software; you can redistribute it and/or~%" "modify it under the terms of the GNU Lesser General Public~%" "License as published by the Free Software Foundation; either~%" "version 2.1 of the License, or (at your option) any later version.~%" "~%" "This library is distributed in the hope that it will be useful,~%" "but WITHOUT ANY WARRANTY; without even the implied warranty of~%" "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU~%" "Lesser General Public License for more details.~%" "~%" "You should have received a copy of the GNU Lesser General Public~%" "License along with this library; if not, write to the Free Software~%" "Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA~%" "|#~%" close :abort #Y(common-lisp-user::build-compilation-type-file nil nil (24 45 7 25 40 2 77 46 8 26 10 1 45 9 75 45 10 38 935 10 1 4 51 0 13 0 14 11 14 12 19 3 13 45 14 64 896 75 45 15 75 45 16 75 45 17 75 45 18 75 45 19 75 45 20 75 45 21 75 45 22 13 8 19 1 23 45 24 77 15 25 13 0 19 3 26 12 19 1 27 45 28 13 0 14 11 14 29 14 30 14 31 14 32 14 33 19 7 13 45 34 64 800 19 0 35 12 19 1 36 47 5 37 47 4 38 47 3 39 47 2 40 47 1 41 45 42 13 6 15 43 19 2 26 13 6 15 44 19 2 26 13 6 15 45 19 2 26 13 6 15 46 13 20 19 3 26 13 6 15 47 13 5 13 20 19 4 26 13 6 15 48 19 2 26 13 6 15 49 13 20 19 3 26 13 6 15 50 13 20 19 3 26 13 6 15 51 13 20 19 3 26 13 6 15 52 13 20 19 3 26 13 6 15 53 19 2 26 13 6 15 54 19 2 26 13 6 15 55 19 2 26 13 6 15 56 19 2 26 13 6 15 57 13 8 19 3 26 13 6 15 58 19 2 26 13 6 15 59 19 2 26 13 6 15 60 13 8 19 3 26 13 6 15 61 19 2 26 13 6 15 62 19 2 26 13 6 15 63 19 2 26 13 6 15 64 19 2 26 13 6 15 65 19 2 26 13 6 15 66 19 2 26 13 6 15 67 13 5 13 4 13 3 13 20 19 6 26 13 6 15 68 19 2 26 13 6 15 69 19 2 26 13 6 15 70 19 2 26 13 6 15 71 19 2 26 13 6 15 72 19 2 26 13 6 15 73 19 2 26 13 17 19 1 23 51 16 13 17 19 1 23 51 15 13 17 19 1 23 51 14 13 17 19 1 23 51 13 13 17 19 1 23 51 10 13 17 19 1 23 51 9 13 17 19 1 23 51 12 13 17 19 1 74 13 17 19 1 74 75 45 75 13 18 19 1 74 12 19 1 76 45 77 13 0 77 77 19 3 23 45 78 38 17 13 0 10 2 3 51 2 13 1 77 77 19 3 23 51 0 10 0 76 39 -20 10 2 16 79 43 3 45 80 13 18 19 1 74 10 0 16 81 45 82 8 0 45 83 38 84 13 20 19 1 23 45 84 13 21 19 1 23 10 3 16 81 45 82 8 0 45 85 38 41 13 23 19 1 23 45 86 10 0 39 22 13 3 13 1 10 6 17 87 12 10 0 6 3 12 10 18 3 51 18 38 1 43 1 10 0 16 88 51 0 13 0 13 1 19 2 89 40 -48 43 2 43 1 10 0 16 88 51 0 13 0 13 1 19 2 89 40 -91 43 2 43 1 13 6 15 90 19 2 26 13 6 15 91 19 2 26 10 16 39 10 13 6 15 92 13 16 19 3 26 10 15 39 10 13 6 15 93 13 15 19 3 26 10 14 39 10 13 6 15 94 13 14 19 3 26 10 13 39 10 13 6 15 95 13 13 19 3 26 10 9 39 10 13 6 15 96 13 9 19 3 26 75 45 97 10 12 45 9 75 45 98 38 64 10 1 4 51 0 10 0 16 99 39 24 10 0 16 99 12 11 100 17 101 76 39 12 10 0 16 99 12 13 2 19 2 102 76 39 23 13 9 15 103 10 0 16 99 12 19 3 26 10 0 16 99 12 10 2 3 51 2 10 1 5 51 1 10 1 40 -66 43 2 43 1 13 6 15 104 13 8 13 11 13 12 13 16 13 15 13 14 13 13 13 10 13 9 19 11 26 13 6 15 105 19 2 26 13 6 15 106 19 2 26 13 6 15 107 19 2 26 13 6 15 108 19 2 26 13 6 15 109 19 2 26 13 6 15 110 19 2 26 13 6 15 111 19 2 26 13 6 15 112 19 2 26 13 6 15 113 19 2 26 13 6 15 114 19 2 26 13 6 15 115 19 2 26 13 6 15 116 19 2 26 13 6 15 117 19 2 26 13 6 15 118 19 2 26 13 6 15 119 19 2 26 43 6 69 10 0 39 6 13 0 19 1 120 70 65 10 0 39 10 13 0 14 121 14 100 19 3 120 66 43 1 43 10 69 10 0 39 6 13 0 19 1 120 70 65 10 0 39 10 13 0 14 121 14 100 19 3 120 66 43 1 10 1 5 51 1 10 1 40 -937 75 73 43 2 29) #92# #1# 90675) si::fset)) #1# 90675))
