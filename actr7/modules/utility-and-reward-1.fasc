(#Y(si::bytecodes nil nil (15 0 14 1 14 2 33 3 12 19 4 4 76 73 39 10 15 5 19 1 6 12 19 1 7 29) #A(t (8) ("CENTRAL-PARAMETERS" *modules* :test string= member "ACT-R-support:central-parameters" translate-logical-pathname common-lisp-user::compile-and-load)) #1=#P"C:/Users/Son Pham/Desktop/actr7/modules/utility-and-reward-1.lisp" 0) #Y(si::bytecodes nil nil (15 0 14 1 14 2 33 3 12 19 4 4 76 73 39 10 15 5 19 1 6 12 19 1 7 29) #A(t (8) ("PRODUCTIONS" *modules* :test string= member "ACT-R-support:productions" translate-logical-pathname common-lisp-user::compile-and-load)) #1# 12508) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 14 77 77 15 6 19 15 7 15 0 15 8 15 9 15 10 19 4 11 15 12 15 8 15 13 15 14 19 4 11 15 12 14 15 77 15 16 19 4 11 15 0 19 1 36 78 32 15 12 1 34 12 19 2 35 1 0 73 29) #2=#A(t (37) (common-lisp-user::utility "UTILITY-" (common-lisp-user::egs common-lisp-user::esc common-lisp-user::dat common-lisp-user::ul common-lisp-user::ut common-lisp-user::iu common-lisp-user::nu common-lisp-user::alpha common-lisp-user::utility-hook common-lisp-user::reward-hook common-lisp-user::history common-lisp-user::offsets trace common-lisp-user::reward-notify-hooks) ((common-lisp-user::egs nil t nil 0 nil) (common-lisp-user::esc nil t nil 1 nil) (common-lisp-user::dat nil t nil 2 nil) (common-lisp-user::ul nil t nil 3 nil) (common-lisp-user::ut nil t nil 4 nil) (common-lisp-user::iu nil t nil 5 nil) (common-lisp-user::nu nil t nil 6 nil) (common-lisp-user::alpha nil t nil 7 nil) (common-lisp-user::utility-hook nil t nil 8 nil) (common-lisp-user::reward-hook nil t nil 9 nil) (common-lisp-user::history nil t nil 10 nil) (common-lisp-user::offsets nil t nil 11 nil) (trace nil t nil 12 nil) (common-lisp-user::reward-notify-hooks nil t nil 13 nil)) common-lisp-user::copy-utility (common-lisp-user::make-utility) common-lisp-user::utility-p si::define-structure ext::location (defstruct common-lisp-user::utility) (#1# . 12685) ext::annotate common-lisp-user::make-utility (defun common-lisp-user::make-utility) (#1# . 12685) :lambda-list (&key #3=#:egs #4=#:esc #5=#:dat #6=#:ul #7=#:ut #8=#:iu #9=#:nu #10=#:alpha #11=#:utility-hook #12=#:reward-hook #13=#:history #14=#:offsets #15=#:trace #16=#:reward-notify-hooks) (nil :reward-notify-hooks :trace :offsets :history :reward-hook :utility-hook :alpha :nu :iu :ut :ul :dat :esc :egs) #3# #4# #5# #6# #7# #8# #9# #10# #11# #12# #13# #14# #15# #16# 0 si::make-structure #Y(common-lisp-user::make-utility nil nil (28 17 22 40 2 77 46 18 22 40 2 77 46 19 22 40 2 77 46 20 22 40 2 77 46 21 22 40 2 77 46 22 22 40 2 77 46 23 22 40 2 77 46 24 22 40 2 77 46 25 22 40 2 77 46 26 22 40 2 77 46 27 22 40 2 77 46 28 22 40 2 77 46 29 22 40 2 77 46 30 22 40 2 77 46 31 15 32 13 13 13 12 13 11 13 10 13 9 13 8 13 7 13 6 13 5 13 4 13 3 13 2 13 1 13 0 19 15 33 29) #2# #1# 12685) si::fset find-class)) #1# 12685) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 27 12 19 2 28 1 0 73 29) #17=#A(t (29) (common-lisp-user::get-default-action-time ext::location (defun common-lisp-user::get-default-action-time) (#1# . 12878) ext::annotate :lambda-list (common-lisp-user::p) common-lisp-user::p common-lisp-user::*meta-processes* common-lisp-user::mps-current *error-output* #18="~&#|Warning~:[~*~;~@[ (in model ~a)~]~]: ~@? |#~%" common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "No meta-process available when trying to set production action time" format finish-output common-lisp-user::meta-p-current-model "No current model when trying to set production action time" common-lisp-user::utility common-lisp-user::get-module-fct common-lisp-user::u common-lisp-user::utility-dat "No utility module available when trying to set production action time" #Y(common-lisp-user::get-default-action-time nil nil (24 45 7 26 14 8 19 1 9 76 39 42 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 17 19 5 18 12 14 10 19 1 19 22 73 38 113 14 8 19 1 9 12 19 1 20 76 39 42 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 21 19 5 18 12 14 10 19 1 19 22 73 38 60 15 22 19 1 23 45 24 10 0 39 8 13 0 19 1 25 38 40 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 26 19 5 18 12 14 10 19 1 19 22 73 43 1 29) #17# #1# 12878) si::fset)) #1# 12878) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 27 12 19 2 28 1 0 73 29) #19=#A(t (29) (common-lisp-user::get-default-u ext::location (defun common-lisp-user::get-default-u) (#1# . 13375) ext::annotate :lambda-list (common-lisp-user::p) common-lisp-user::p common-lisp-user::*meta-processes* common-lisp-user::mps-current *error-output* #18# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "No meta-process available when trying to set production u value" format finish-output common-lisp-user::meta-p-current-model "No current model when trying to set production u value" common-lisp-user::utility common-lisp-user::get-module-fct common-lisp-user::u common-lisp-user::utility-iu "No utility module available when trying to set production u value" #Y(common-lisp-user::get-default-u nil nil (24 45 7 26 14 8 19 1 9 76 39 42 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 17 19 5 18 12 14 10 19 1 19 22 73 38 113 14 8 19 1 9 12 19 1 20 76 39 42 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 21 19 5 18 12 14 10 19 1 19 22 73 38 60 15 22 19 1 23 45 24 10 0 39 8 13 0 19 1 25 38 40 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 16 12 15 26 19 5 18 12 14 10 19 1 19 22 73 43 1 29) #19# #1# 13375) si::fset)) #1# 13375) #Y(si::bytecodes nil nil (19 0 0 29) #A(t (1) (common-lisp-user::suppress-extension-warnings)) #1# 13783) #Y(si::bytecodes nil nil (11 0 76 39 89 1 1 16 2 39 39 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 10 15 1 19 6 11 14 3 19 1 12 1 13 16 2 39 39 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 14 15 13 19 6 11 14 3 19 1 12 15 15 14 16 14 17 15 18 19 4 19 39 14 15 15 14 16 14 17 15 18 19 4 20 52 16 14 21 15 15 14 22 77 14 23 77 14 24 15 1 19 8 25 12 11 16 3 52 16 15 1 15 26 15 27 15 28 19 4 29 15 1 14 30 77 15 31 19 4 29 15 1 1 43 12 19 2 44 15 13 15 26 15 45 15 46 19 4 29 15 13 14 30 77 15 47 19 4 29 15 13 1 50 12 19 2 44 15 1 15 26 15 51 15 52 19 4 29 15 1 15 13 9 1 19 3 53 1 1 73 29) #20=#A(t (54) (common-lisp-user::*suppress-extend-item-warning* common-lisp-user::production-utility fboundp *error-output* #18# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model #21="Function ~s already exists and is being redefined." format finish-output common-lisp-user::production-utility-setf #22="Function ~s already exists and is being redefined." common-lisp-user::utility common-lisp-user::*production-parameters-list* :key common-lisp-user::act-r-production-parameter-name find remove :name :default-value :default-function :accessor common-lisp-user::make-act-r-production-parameter ext::location (defun common-lisp-user::production-utility) (#1# . 13880) ext::annotate :lambda-list #23=(common-lisp-user::production-name) common-lisp-user::production-name common-lisp-user::get-production common-lisp-user::production common-lisp-user::production? common-lisp-user::production-parameter-values gethash common-lisp-user::exists common-lisp-user::value common-lisp-user::production-parameter-default si::hash-set #24="~S called with invalid production name." #Y(common-lisp-user::production-utility nil nil (24 45 32 26 13 0 19 1 33 45 34 13 0 19 1 35 39 59 15 15 13 0 19 1 36 12 19 2 37 47 1 38 45 39 10 1 39 6 10 0 73 38 30 15 15 13 2 19 1 36 12 15 15 14 16 14 17 15 18 19 4 19 12 13 2 19 2 40 12 19 3 41 43 2 38 42 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 42 15 1 19 6 11 12 14 3 19 1 12 22 73 43 1 29) #20# #1# 13880) si::fset (defun common-lisp-user::production-utility-setf) (#1# . 13880) #25=(common-lisp-user::production-name common-lisp-user::new-value) common-lisp-user::new-value #26="Setf of ~S called with invalid production." #Y(common-lisp-user::production-utility-setf nil nil (24 45 32 24 45 48 26 13 1 19 1 33 45 34 13 0 19 1 35 39 16 15 15 13 0 19 1 36 12 13 1 19 3 41 38 42 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 49 15 1 19 6 11 12 14 3 19 1 12 22 73 43 1 29) #20# #1# 13880) (defsetf common-lisp-user::production-utility) (#1# . 13880) si::do-defsetf)) #1# 13880) #Y(si::bytecodes nil nil (11 0 76 39 89 1 1 16 2 39 39 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 10 15 1 19 6 11 14 3 19 1 12 1 13 16 2 39 39 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 14 15 13 19 6 11 14 3 19 1 12 15 15 14 16 14 17 15 18 19 4 19 39 14 15 15 14 16 14 17 15 18 19 4 20 52 16 14 21 15 15 14 22 77 14 23 15 24 14 25 15 1 19 8 26 12 11 16 3 52 16 15 1 15 27 15 28 15 29 19 4 30 15 1 14 31 77 15 32 19 4 30 15 1 1 44 12 19 2 45 15 13 15 27 15 46 15 47 19 4 30 15 13 14 31 77 15 48 19 4 30 15 13 1 51 12 19 2 45 15 1 15 27 15 52 15 53 19 4 30 15 1 15 13 9 1 19 3 54 1 1 73 29) #27=#A(t (55) (common-lisp-user::*suppress-extend-item-warning* common-lisp-user::production-u fboundp *error-output* #18# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model #21# format finish-output common-lisp-user::production-u-setf #22# common-lisp-user::u common-lisp-user::*production-parameters-list* :key common-lisp-user::act-r-production-parameter-name find remove :name :default-value :default-function common-lisp-user::get-default-u :accessor common-lisp-user::make-act-r-production-parameter ext::location (defun common-lisp-user::production-u) (#1# . 13912) ext::annotate :lambda-list #23# common-lisp-user::production-name common-lisp-user::get-production common-lisp-user::production common-lisp-user::production? common-lisp-user::production-parameter-values gethash common-lisp-user::exists common-lisp-user::value common-lisp-user::production-parameter-default si::hash-set #24# #Y(common-lisp-user::production-u nil nil (24 45 33 26 13 0 19 1 34 45 35 13 0 19 1 36 39 59 15 15 13 0 19 1 37 12 19 2 38 47 1 39 45 40 10 1 39 6 10 0 73 38 30 15 15 13 2 19 1 37 12 15 15 14 16 14 17 15 18 19 4 19 12 13 2 19 2 41 12 19 3 42 43 2 38 42 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 43 15 1 19 6 11 12 14 3 19 1 12 22 73 43 1 29) #27# #1# 13912) si::fset (defun common-lisp-user::production-u-setf) (#1# . 13912) #25# common-lisp-user::new-value #26# #Y(common-lisp-user::production-u-setf nil nil (24 45 33 24 45 49 26 13 1 19 1 34 45 35 13 0 19 1 36 39 16 15 15 13 0 19 1 37 12 13 1 19 3 42 38 42 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 50 15 1 19 6 11 12 14 3 19 1 12 22 73 43 1 29) #27# #1# 13912) (defsetf common-lisp-user::production-u) (#1# . 13912) si::do-defsetf)) #1# 13912) #Y(si::bytecodes nil nil (11 0 76 39 89 1 1 16 2 39 39 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 10 15 1 19 6 11 14 3 19 1 12 1 13 16 2 39 39 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 14 15 13 19 6 11 14 3 19 1 12 15 15 14 16 14 17 15 18 19 4 19 39 14 15 15 14 16 14 17 15 18 19 4 20 52 16 14 21 15 15 14 22 77 14 23 15 24 14 25 15 1 19 8 26 12 11 16 3 52 16 15 1 15 27 15 28 15 29 19 4 30 15 1 14 31 77 15 32 19 4 30 15 1 1 44 12 19 2 45 15 13 15 27 15 46 15 47 19 4 30 15 13 14 31 77 15 48 19 4 30 15 13 1 51 12 19 2 45 15 1 15 27 15 52 15 53 19 4 30 15 1 15 13 9 1 19 3 54 1 1 73 29) #28=#A(t (55) (common-lisp-user::*suppress-extend-item-warning* common-lisp-user::production-at fboundp *error-output* #18# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model #21# format finish-output common-lisp-user::production-at-setf #22# common-lisp-user::at common-lisp-user::*production-parameters-list* :key common-lisp-user::act-r-production-parameter-name find remove :name :default-value :default-function common-lisp-user::get-default-action-time :accessor common-lisp-user::make-act-r-production-parameter ext::location (defun common-lisp-user::production-at) (#1# . 13968) ext::annotate :lambda-list #23# common-lisp-user::production-name common-lisp-user::get-production common-lisp-user::production common-lisp-user::production? common-lisp-user::production-parameter-values gethash common-lisp-user::exists common-lisp-user::value common-lisp-user::production-parameter-default si::hash-set #24# #Y(common-lisp-user::production-at nil nil (24 45 33 26 13 0 19 1 34 45 35 13 0 19 1 36 39 59 15 15 13 0 19 1 37 12 19 2 38 47 1 39 45 40 10 1 39 6 10 0 73 38 30 15 15 13 2 19 1 37 12 15 15 14 16 14 17 15 18 19 4 19 12 13 2 19 2 41 12 19 3 42 43 2 38 42 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 43 15 1 19 6 11 12 14 3 19 1 12 22 73 43 1 29) #28# #1# 13968) si::fset (defun common-lisp-user::production-at-setf) (#1# . 13968) #25# common-lisp-user::new-value #26# #Y(common-lisp-user::production-at-setf nil nil (24 45 33 24 45 49 26 13 1 19 1 34 45 35 13 0 19 1 36 39 16 15 15 13 0 19 1 37 12 13 1 19 3 42 38 42 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 50 15 1 19 6 11 12 14 3 19 1 12 22 73 43 1 29) #28# #1# 13968) (defsetf common-lisp-user::production-at) (#1# . 13968) si::do-defsetf)) #1# 13968) #Y(si::bytecodes nil nil (11 0 76 39 89 1 1 16 2 39 39 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 10 15 1 19 6 11 14 3 19 1 12 1 13 16 2 39 39 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 14 15 13 19 6 11 14 3 19 1 12 15 15 14 16 14 17 15 18 19 4 19 39 14 15 15 14 16 14 17 15 18 19 4 20 52 16 14 21 15 15 14 22 77 14 23 77 14 24 15 1 19 8 25 12 11 16 3 52 16 15 1 15 26 15 27 15 28 19 4 29 15 1 14 30 77 15 31 19 4 29 15 1 1 43 12 19 2 44 15 13 15 26 15 45 15 46 19 4 29 15 13 14 30 77 15 47 19 4 29 15 13 1 50 12 19 2 44 15 1 15 26 15 51 15 52 19 4 29 15 1 15 13 9 1 19 3 53 1 1 73 29) #29=#A(t (54) (common-lisp-user::*suppress-extend-item-warning* common-lisp-user::production-reward fboundp *error-output* #18# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model #21# format finish-output common-lisp-user::production-reward-setf #22# common-lisp-user::reward common-lisp-user::*production-parameters-list* :key common-lisp-user::act-r-production-parameter-name find remove :name :default-value :default-function :accessor common-lisp-user::make-act-r-production-parameter ext::location (defun common-lisp-user::production-reward) (#1# . 14035) ext::annotate :lambda-list #23# common-lisp-user::production-name common-lisp-user::get-production common-lisp-user::production common-lisp-user::production? common-lisp-user::production-parameter-values gethash common-lisp-user::exists common-lisp-user::value common-lisp-user::production-parameter-default si::hash-set #24# #Y(common-lisp-user::production-reward nil nil (24 45 32 26 13 0 19 1 33 45 34 13 0 19 1 35 39 59 15 15 13 0 19 1 36 12 19 2 37 47 1 38 45 39 10 1 39 6 10 0 73 38 30 15 15 13 2 19 1 36 12 15 15 14 16 14 17 15 18 19 4 19 12 13 2 19 2 40 12 19 3 41 43 2 38 42 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 42 15 1 19 6 11 12 14 3 19 1 12 22 73 43 1 29) #29# #1# 14035) si::fset (defun common-lisp-user::production-reward-setf) (#1# . 14035) #25# common-lisp-user::new-value #26# #Y(common-lisp-user::production-reward-setf nil nil (24 45 32 24 45 48 26 13 1 19 1 33 45 34 13 0 19 1 35 39 16 15 15 13 0 19 1 36 12 13 1 19 3 41 38 42 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 49 15 1 19 6 11 12 14 3 19 1 12 22 73 43 1 29) #29# #1# 14035) (defsetf common-lisp-user::production-reward) (#1# . 14035) si::do-defsetf)) #1# 14035) #Y(si::bytecodes nil nil (11 0 76 39 89 1 1 16 2 39 39 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 10 15 1 19 6 11 14 3 19 1 12 1 13 16 2 39 39 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 14 15 13 19 6 11 14 3 19 1 12 15 15 14 16 14 17 15 18 19 4 19 39 14 15 15 14 16 14 17 15 18 19 4 20 52 16 14 21 15 15 14 22 77 14 23 77 14 24 15 1 19 8 25 12 11 16 3 52 16 15 1 15 26 15 27 15 28 19 4 29 15 1 14 30 77 15 31 19 4 29 15 1 1 43 12 19 2 44 15 13 15 26 15 45 15 46 19 4 29 15 13 14 30 77 15 47 19 4 29 15 13 1 50 12 19 2 44 15 1 15 26 15 51 15 52 19 4 29 15 1 15 13 9 1 19 3 53 1 1 73 29) #30=#A(t (54) (common-lisp-user::*suppress-extend-item-warning* common-lisp-user::production-fixed-utility fboundp *error-output* #18# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model #21# format finish-output common-lisp-user::production-fixed-utility-setf #22# common-lisp-user::fixed-utility common-lisp-user::*production-parameters-list* :key common-lisp-user::act-r-production-parameter-name find remove :name :default-value :default-function :accessor common-lisp-user::make-act-r-production-parameter ext::location (defun common-lisp-user::production-fixed-utility) (#1# . 14064) ext::annotate :lambda-list #23# common-lisp-user::production-name common-lisp-user::get-production common-lisp-user::production common-lisp-user::production? common-lisp-user::production-parameter-values gethash common-lisp-user::exists common-lisp-user::value common-lisp-user::production-parameter-default si::hash-set #24# #Y(common-lisp-user::production-fixed-utility nil nil (24 45 32 26 13 0 19 1 33 45 34 13 0 19 1 35 39 59 15 15 13 0 19 1 36 12 19 2 37 47 1 38 45 39 10 1 39 6 10 0 73 38 30 15 15 13 2 19 1 36 12 15 15 14 16 14 17 15 18 19 4 19 12 13 2 19 2 40 12 19 3 41 43 2 38 42 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 42 15 1 19 6 11 12 14 3 19 1 12 22 73 43 1 29) #30# #1# 14064) si::fset (defun common-lisp-user::production-fixed-utility-setf) (#1# . 14064) #25# common-lisp-user::new-value #26# #Y(common-lisp-user::production-fixed-utility-setf nil nil (24 45 32 24 45 48 26 13 1 19 1 33 45 34 13 0 19 1 35 39 16 15 15 13 0 19 1 36 12 13 1 19 3 41 38 42 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 49 15 1 19 6 11 12 14 3 19 1 12 22 73 43 1 29) #30# #1# 14064) (defsetf common-lisp-user::production-fixed-utility) (#1# . 14064) si::do-defsetf)) #1# 14064) #Y(si::bytecodes nil nil (11 0 76 39 89 1 1 16 2 39 39 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 10 15 1 19 6 11 14 3 19 1 12 1 13 16 2 39 39 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 14 15 13 19 6 11 14 3 19 1 12 15 15 14 16 14 17 15 18 19 4 19 39 14 15 15 14 16 14 17 15 18 19 4 20 52 16 14 21 15 15 14 22 77 14 23 77 14 24 15 1 19 8 25 12 11 16 3 52 16 15 1 15 26 15 27 15 28 19 4 29 15 1 14 30 77 15 31 19 4 29 15 1 1 43 12 19 2 44 15 13 15 26 15 45 15 46 19 4 29 15 13 14 30 77 15 47 19 4 29 15 13 1 50 12 19 2 44 15 1 15 26 15 51 15 52 19 4 29 15 1 15 13 9 1 19 3 53 1 1 73 29) #31=#A(t (54) (common-lisp-user::*suppress-extend-item-warning* common-lisp-user::production-reward-changed fboundp *error-output* #18# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model #21# format finish-output common-lisp-user::production-reward-changed-setf #22# common-lisp-user::reward-changed common-lisp-user::*production-parameters-list* :key common-lisp-user::act-r-production-parameter-name find remove :name :default-value :default-function :accessor common-lisp-user::make-act-r-production-parameter ext::location (defun common-lisp-user::production-reward-changed) (#1# . 14100) ext::annotate :lambda-list #23# common-lisp-user::production-name common-lisp-user::get-production common-lisp-user::production common-lisp-user::production? common-lisp-user::production-parameter-values gethash common-lisp-user::exists common-lisp-user::value common-lisp-user::production-parameter-default si::hash-set #24# #Y(common-lisp-user::production-reward-changed nil nil (24 45 32 26 13 0 19 1 33 45 34 13 0 19 1 35 39 59 15 15 13 0 19 1 36 12 19 2 37 47 1 38 45 39 10 1 39 6 10 0 73 38 30 15 15 13 2 19 1 36 12 15 15 14 16 14 17 15 18 19 4 19 12 13 2 19 2 40 12 19 3 41 43 2 38 42 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 42 15 1 19 6 11 12 14 3 19 1 12 22 73 43 1 29) #31# #1# 14100) si::fset (defun common-lisp-user::production-reward-changed-setf) (#1# . 14100) #25# common-lisp-user::new-value #26# #Y(common-lisp-user::production-reward-changed-setf nil nil (24 45 32 24 45 48 26 13 1 19 1 33 45 34 13 0 19 1 35 39 16 15 15 13 0 19 1 36 12 13 1 19 3 41 38 42 14 3 15 4 19 0 5 73 39 12 19 0 6 16 7 12 9 1 19 2 8 12 19 0 9 12 15 49 15 1 19 6 11 12 14 3 19 1 12 22 73 43 1 29) #31# #1# 14100) (defsetf common-lisp-user::production-reward-changed) (#1# . 14100) si::do-defsetf)) #1# 14100) #Y(si::bytecodes nil nil (19 0 0 29) #A(t (1) (common-lisp-user::unsuppress-extension-warnings)) #1# 14137) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 3 77 77 15 6 19 15 7 15 0 15 8 15 9 15 10 19 4 11 15 12 15 8 15 13 15 14 19 4 11 15 12 14 15 77 15 16 19 4 11 15 0 19 1 25 78 21 15 12 1 23 12 19 2 24 1 0 73 29) #32=#A(t (26) (common-lisp-user::utility-history "UTILITY-HISTORY-" (common-lisp-user::name time common-lisp-user::requests) ((common-lisp-user::name nil t nil 0 nil) (time nil t nil 1 nil) (common-lisp-user::requests nil t nil 2 nil)) common-lisp-user::copy-utility-history (common-lisp-user::make-utility-history) common-lisp-user::utility-history-p si::define-structure ext::location (defstruct common-lisp-user::utility-history) (#1# . 14172) ext::annotate common-lisp-user::make-utility-history (defun common-lisp-user::make-utility-history) (#1# . 14172) :lambda-list (&key #33=#:name #34=#:time #35=#:requests) (nil :requests :time :name) #33# #34# #35# 0 si::make-structure #Y(common-lisp-user::make-utility-history nil nil (28 17 22 40 2 77 46 18 22 40 2 77 46 19 22 40 2 77 46 20 15 21 13 2 13 1 13 0 19 4 22 29) #32# #1# 14172) si::fset find-class)) #1# 14172) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 26 12 19 2 27 1 0 73 29) #36=#A(t (28) (common-lisp-user::note-production-selection ext::location (defun common-lisp-user::note-production-selection) (#1# . 14325) ext::annotate :lambda-list (common-lisp-user::production) common-lisp-user::production common-lisp-user::utility common-lisp-user::get-module-fct common-lisp-user::u common-lisp-user::utility-ul #:g17849 :name :time common-lisp-user::mp-time-ms :requests t eq common-lisp-user::production-requested-actions common-lisp-user::make-utility-history #:g17851 common-lisp-user::utility-history nconc #:g17850 si::structure-set #Y(common-lisp-user::note-production-selection nil nil (24 45 7 26 15 8 19 1 9 45 10 10 0 39 6 13 0 19 1 11 73 39 70 10 0 45 12 14 13 13 2 14 14 19 0 15 12 14 16 13 1 19 1 11 12 11 17 17 18 76 73 39 6 13 2 19 1 19 12 19 6 20 6 1 45 21 13 1 19 1 22 12 13 0 19 2 23 45 24 13 2 15 8 9 10 13 0 19 4 25 43 3 43 1 29) #36# #1# 14325) si::fset)) #1# 14325) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 9 12 19 2 10 1 0 73 29) #37=#A(t (11) (common-lisp-user::productions-action-time ext::location (defun common-lisp-user::productions-action-time) (#1# . 14760) ext::annotate :lambda-list (common-lisp-user::production) common-lisp-user::production common-lisp-user::production-at #Y(common-lisp-user::productions-action-time nil nil (24 45 7 26 13 0 19 1 8 29) #37# #1# 14760) si::fset)) #1# 14760) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 29 12 19 2 30 1 0 73 29) #38=#A(t (31) (common-lisp-user::compute-utility ext::location (defun common-lisp-user::compute-utility) (#1# . 14840) ext::annotate :lambda-list (common-lisp-user::production &optional (common-lisp-user::save nil)) common-lisp-user::production common-lisp-user::save common-lisp-user::utility common-lisp-user::get-module-fct common-lisp-user::u common-lisp-user::utility-utility-hook common-lisp-user::it common-lisp-user::over-ride numberp common-lisp-user::utility-esc common-lisp-user::utility-egs zerop common-lisp-user::act-r-noise common-lisp-user::production-u common-lisp-user::utility-offsets + common-lisp-user::x common-lisp-user::val #Y(nil nil nil (24 45 23 26 13 0 13 4 20 1 23 45 24 10 0 16 15 39 6 10 0 73 38 4 8 0 73 43 1 29) #38# #1# 14840) mapcar reduce common-lisp-user::production-utility-setf #Y(common-lisp-user::compute-utility nil nil (24 45 7 25 40 2 77 46 8 26 15 9 19 1 10 45 11 10 0 73 39 136 13 0 19 1 12 45 13 10 0 39 10 13 0 13 3 20 1 23 38 2 75 43 1 45 14 10 0 16 15 39 5 10 0 38 81 13 1 19 1 16 39 16 13 1 19 1 17 39 9 13 1 19 1 17 16 18 76 39 12 13 1 19 1 17 12 19 1 19 38 4 8 0 73 12 13 3 19 1 20 12 13 1 19 1 21 39 22 33 22 12 34 25 12 13 1 19 1 21 12 19 2 26 12 19 2 27 38 4 8 0 73 12 19 3 22 45 9 10 3 39 10 13 4 13 0 19 2 28 38 4 10 0 73 43 2 43 1 29) #38# #1# 14840) si::fset)) #1# 14840) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 10 12 19 2 11 1 0 73 29) #39=#A(t (12) (common-lisp-user::minimum-utility ext::location (defun common-lisp-user::minimum-utility) (#1# . 15975) ext::annotate :lambda-list common-lisp-user::utility common-lisp-user::get-module-fct common-lisp-user::u common-lisp-user::utility-ut #Y(common-lisp-user::minimum-utility nil nil (26 15 6 19 1 7 45 8 10 0 73 39 6 13 0 19 1 9 43 1 29) #39# #1# 15975) si::fset)) #1# 15975) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 18 12 19 2 19 1 0 73 29) #40=#A(t (20) (common-lisp-user::linear-update-utility ext::location (defun common-lisp-user::linear-update-utility) (#1# . 16079) ext::annotate :lambda-list (common-lisp-user::module common-lisp-user::production common-lisp-user::reward) common-lisp-user::module common-lisp-user::production common-lisp-user::reward common-lisp-user::production-u common-lisp-user::utility-alpha common-lisp-user::alpha common-lisp-user::old - * + common-lisp-user::production-u-setf #Y(common-lisp-user::linear-update-utility nil nil (24 45 7 24 45 8 24 45 9 26 13 1 19 1 10 12 13 2 19 1 11 12 46 12 46 13 13 3 13 0 13 1 13 2 13 0 19 2 14 12 19 2 15 12 19 2 16 12 19 2 17 43 2 29) #40# #1# 16079) si::fset)) #1# 16079) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 32 12 19 2 33 1 0 73 29) #41=#A(t (34) (common-lisp-user::trigger-reward ext::location (defun common-lisp-user::trigger-reward) (#1# . 16293) ext::annotate :lambda-list (common-lisp-user::value &optional (common-lisp-user::maintenance nil)) common-lisp-user::value common-lisp-user::maintenance common-lisp-user::current-model *error-output* #18# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > "No current model.  Trigger-reward has no effect." format finish-output common-lisp-user::numornil common-lisp-user::propagate-reward :module common-lisp-user::utility :priority :max :params :output common-lisp-user::medium :maintenance common-lisp-user::schedule-event-now t "Trigger-reward must be called with a number or nil." #Y(common-lisp-user::trigger-reward nil nil (24 45 7 25 40 2 77 46 8 26 19 0 9 76 39 42 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 9 12 15 16 19 5 17 12 14 10 19 1 18 22 73 38 80 13 1 19 1 19 39 34 15 20 14 21 15 22 14 23 14 24 14 25 10 1 6 1 12 14 26 15 27 14 28 13 0 19 11 29 11 30 73 38 40 14 10 15 11 19 0 12 73 39 12 19 0 13 16 14 12 9 1 19 2 15 12 19 0 9 12 15 31 19 5 17 12 14 10 19 1 18 22 73 29) #41# #1# 16293) si::fset)) #1# 16293) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 95 12 19 2 96 1 0 73 29) #42=#A(t (97) (common-lisp-user::propagate-reward ext::location (defun common-lisp-user::propagate-reward) (#1# . 16803) ext::annotate :lambda-list (common-lisp-user::value) common-lisp-user::value common-lisp-user::utility common-lisp-user::get-module-fct common-lisp-user::u common-lisp-user::utility-ul common-lisp-user::ul common-lisp-user::utility-reward-notify-hooks si::%dolist-var common-lisp-user::hook numberp common-lisp-user::utility-esc common-lisp-user::keep common-lisp-user::utility-trace common-lisp-user::printing-module #:g17909 #:g17908 common-lisp-user::printing-module-v common-lisp-user::act-r-output-stream #43="~&~@?~%" " Utility updates with Reward = ~f   alpha = ~f" common-lisp-user::utility-alpha format common-lisp-user::utility-history common-lisp-user::item common-lisp-user::utility-history-name common-lisp-user::name common-lisp-user::production-fixed-utility #:g17931 #:g17930 "  Updating of production ~S skipped because it has a fixed utility" common-lisp-user::mp-time-ms common-lisp-user::utility-history-time - common-lisp-user::ms->seconds common-lisp-user::delta-t t eq common-lisp-user::utility-reward-hook common-lisp-user::override common-lisp-user::r #:g17933 #:g17932 "  Updating utility of production ~S" #:g17935 #:g17934 "   U(n-1) = ~f   R(n) = ~f [~:[~f - ~f seconds since selection~;from reward-hook function~]]" common-lisp-user::production-u common-lisp-user::linear-update-utility #:g17937 #:g17936 "   U(n) = ~f" #:g17938 common-lisp-user::request-completed-p common-lisp-user::utility-history-requests remove-if #:g17939 si::structure-set #:g17941 nconc #:g17943 #:g17942 "  Updating of production ~S skipped because not complete" #:g17945 #:g17944 "  Updating utility of production ~S" #:g17947 #:g17946 "   U(n-1) = ~f   R(n) = ~f [~:[~f - ~f seconds since selection~;from reward-hook function~]]" #:g17949 #:g17948 "   U(n) = ~f" #:g17950 #:g17951 *error-output* #18# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "Trigger-reward can only be used if utility learning is enabled." finish-output "Trigger-reward must be called with a numeric value or nil not ~S." #:g17953 #:g17952 "  Null reward clears utility learning history." #:g17954 #:g17955 #Y(common-lisp-user::propagate-reward nil nil (24 45 7 26 15 8 19 1 9 45 10 13 0 19 1 11 45 12 13 1 19 1 13 45 14 75 45 15 38 18 10 1 4 51 0 13 0 13 4 20 1 23 10 1 5 51 1 10 1 40 -20 43 2 10 2 16 16 39 835 13 1 19 1 17 39 3 10 0 39 783 75 45 18 13 2 19 1 19 39 53 15 20 19 1 9 47 1 21 45 22 10 1 39 10 13 0 19 1 23 12 19 1 24 39 26 13 0 19 1 23 12 19 1 24 12 15 25 15 26 13 5 13 4 19 1 27 12 19 5 28 43 2 13 2 19 1 29 45 14 75 45 30 38 676 10 1 4 51 0 13 0 19 1 31 45 32 13 0 19 1 33 39 56 13 5 19 1 19 39 47 15 20 19 1 9 47 1 34 45 35 10 1 39 10 13 0 19 1 23 12 19 1 24 39 20 13 0 19 1 23 12 19 1 24 12 15 25 15 36 13 2 19 4 28 43 2 38 595 19 0 37 12 13 1 19 1 38 12 19 2 39 12 19 1 40 45 41 13 5 11 42 17 43 39 229 13 6 19 1 44 39 16 13 6 19 1 44 12 13 1 13 7 13 0 20 3 23 45 45 10 0 16 16 39 5 10 0 38 8 13 8 13 1 19 2 39 45 46 13 8 19 1 19 39 109 15 20 19 1 9 47 1 47 45 48 10 1 39 10 13 0 19 1 23 12 19 1 24 39 20 13 0 19 1 23 12 19 1 24 12 15 25 15 49 13 5 19 4 28 43 2 15 20 19 1 9 47 1 50 45 51 10 1 39 10 13 0 19 1 23 12 19 1 24 39 36 13 0 19 1 23 12 19 1 24 12 15 25 15 52 13 6 19 1 31 12 19 1 53 12 13 2 13 3 13 11 13 4 19 8 28 43 2 13 8 13 3 13 0 19 3 54 13 8 19 1 19 39 51 15 20 19 1 9 47 1 55 45 56 10 1 39 10 13 0 19 1 23 12 19 1 24 39 24 13 0 19 1 23 12 19 1 24 12 15 25 15 57 13 5 19 1 53 12 19 4 28 43 2 43 2 38 338 10 2 45 58 15 59 13 3 19 1 60 12 19 2 61 45 62 13 1 15 29 9 2 13 0 19 4 63 43 1 43 1 13 2 19 1 60 39 73 10 2 6 1 45 64 13 5 13 0 19 2 65 51 5 43 1 13 6 19 1 19 39 47 15 20 19 1 9 47 1 66 45 67 10 1 39 10 13 0 19 1 23 12 19 1 24 39 20 13 0 19 1 23 12 19 1 24 12 15 25 15 68 13 3 19 4 28 43 2 38 227 13 6 19 1 44 39 16 13 6 19 1 44 12 13 1 13 7 13 0 20 3 23 45 45 10 0 16 16 39 5 10 0 38 8 13 8 13 1 19 2 39 45 46 13 8 19 1 19 39 109 15 20 19 1 9 47 1 69 45 70 10 1 39 10 13 0 19 1 23 12 19 1 24 39 20 13 0 19 1 23 12 19 1 24 12 15 25 15 71 13 5 19 4 28 43 2 15 20 19 1 9 47 1 72 45 73 10 1 39 10 13 0 19 1 23 12 19 1 24 39 36 13 0 19 1 23 12 19 1 24 12 15 25 15 74 13 6 19 1 31 12 19 1 53 12 13 2 13 3 13 11 13 4 19 8 28 43 2 13 8 13 3 13 0 19 3 54 13 8 19 1 19 39 51 15 20 19 1 9 47 1 75 45 76 10 1 39 10 13 0 19 1 23 12 19 1 24 39 24 13 0 19 1 23 12 19 1 24 12 15 25 15 77 13 5 19 1 53 12 19 4 28 43 2 43 2 43 1 43 1 10 1 5 51 1 10 1 40 -678 43 2 10 2 45 78 10 1 45 79 13 1 15 8 9 10 13 0 19 4 63 43 1 43 1 43 1 38 40 14 80 15 81 19 0 82 73 39 12 19 0 83 16 84 12 9 1 19 2 85 12 19 0 86 12 15 87 19 5 28 12 14 80 19 1 88 22 73 38 121 10 2 39 44 14 80 15 81 19 0 82 73 39 12 19 0 83 16 84 12 9 1 19 2 85 12 19 0 86 12 15 89 13 2 19 6 28 12 14 80 19 1 88 22 73 38 74 13 1 19 1 19 39 45 15 20 19 1 9 47 1 90 45 91 10 1 39 10 13 0 19 1 23 12 19 1 24 39 18 13 0 19 1 23 12 19 1 24 12 15 25 15 92 19 3 28 43 2 10 1 45 93 75 45 94 13 1 15 8 9 10 13 0 19 4 63 43 1 43 1 43 2 29) #42# #1# 16803) si::fset)) #1# 16803) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 56 12 19 2 57 1 0 73 29) #44=#A(t (58) (common-lisp-user::learn-parameters ext::location (defun common-lisp-user::learn-parameters) (#1# . 20661) ext::annotate :lambda-list (common-lisp-user::production) common-lisp-user::production common-lisp-user::production-reward common-lisp-user::it numberp common-lisp-user::trigger-reward :module common-lisp-user::procedural :params :priority :min :output common-lisp-user::high common-lisp-user::schedule-event-now common-lisp-user::utility common-lisp-user::get-module-fct common-lisp-user::u common-lisp-user::complete common-lisp-user::utility-ul eq common-lisp-user::utility-history last common-lisp-user::event common-lisp-user::utility-history-name #:g17961 common-lisp-user::production-requested-actions #:g17962 si::structure-set common-lisp-user::printing-module #:g17964 #:g17963 common-lisp-user::printing-module-v common-lisp-user::act-r-output-stream #:g17965 common-lisp-user::printing-module-model-warnings *error-output* common-lisp-user::*one-stream-hack* t *standard-output* eql #45="~&#|Warning~:[~*~; (in model ~a)~]: ~@? |#~%" common-lisp-user::mp-models length > common-lisp-user::current-model "Utility received a learn-parameters signal for production ~s which wasn't the last one noted as being selected ~s." format finish-output #46="~&#|Warning~:[~*~; (in model ~a)~]: ~@? |#~%" #47="~&#|Warning~:[~*~; (in model ~a)~]: ~@? |#~%" #Y(common-lisp-user::learn-parameters nil nil (24 45 7 26 13 0 19 1 8 45 9 10 0 39 58 10 0 16 10 39 27 15 11 14 12 15 13 14 14 10 0 6 1 12 14 15 14 16 14 17 15 18 19 9 19 38 24 15 11 14 12 15 13 14 14 75 6 1 12 14 15 14 16 14 17 15 18 19 9 19 38 1 43 1 15 20 19 1 21 45 22 10 0 39 10 15 23 13 0 19 1 24 17 25 73 39 254 13 0 19 1 26 12 19 1 27 4 45 28 10 0 73 39 235 13 2 13 0 19 1 29 17 25 39 29 10 0 45 30 13 3 19 1 31 45 32 13 1 15 26 9 2 13 0 19 4 33 43 1 43 1 38 196 15 34 19 1 21 47 1 35 45 36 10 1 39 10 13 0 19 1 37 12 19 1 38 73 39 168 13 0 19 1 37 12 19 1 38 45 39 13 1 19 1 40 76 40 145 10 0 76 40 27 13 0 11 41 17 25 40 19 11 42 40 15 13 0 11 43 17 25 39 7 14 41 11 44 17 45 39 41 14 41 15 46 19 0 47 16 48 12 9 1 19 2 49 12 19 0 50 12 15 51 13 5 13 3 19 1 29 12 19 7 52 14 41 19 1 53 38 72 14 41 15 54 19 0 47 16 48 12 9 1 19 2 49 12 19 0 50 12 15 51 13 5 13 3 19 1 29 12 19 7 52 14 41 19 1 53 13 0 15 55 19 0 47 16 48 12 9 1 19 2 49 12 19 0 50 12 15 51 13 5 13 3 19 1 29 12 19 7 52 75 73 43 1 43 2 43 1 43 1 29) #44# #1# 20661) si::fset)) #1# 20661) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 38 12 19 2 39 1 0 73 29) #48=#A(t (40) (common-lisp-user::initialize-utility-for-compiled-production ext::location (defun common-lisp-user::initialize-utility-for-compiled-production) (#1# . 22139) ext::annotate :lambda-list (common-lisp-user::new-p common-lisp-user::p1 common-lisp-user::p2) common-lisp-user::new-p common-lisp-user::p1 common-lisp-user::p2 common-lisp-user::production-at common-lisp-user::at1 common-lisp-user::at2 max common-lisp-user::at common-lisp-user::production-reward common-lisp-user::r1 common-lisp-user::r2 numberp common-lisp-user::reward common-lisp-user::production-at-setf common-lisp-user::production-reward-setf common-lisp-user::printing-module common-lisp-user::get-module-fct #:g17986 #:g17985 common-lisp-user::printing-module-suppress-cmds #:g17987 #:g17988 t #:g17989 (setf common-lisp-user::printing-module-suppress-cmds) (:nu) common-lisp-user::sgp-fct #:g17990 #:g17991 (setf common-lisp-user::printing-module-suppress-cmds) common-lisp-user::production-u-setf #Y(common-lisp-user::initialize-utility-for-compiled-production nil nil (24 45 7 24 45 8 24 45 9 26 13 1 19 1 10 45 11 13 1 19 1 10 45 12 13 1 13 0 19 2 13 45 14 13 4 19 1 15 45 16 13 4 19 1 15 45 17 10 1 16 18 39 14 10 0 16 18 39 8 13 1 13 0 19 2 13 40 27 10 1 16 18 39 3 10 1 40 17 10 0 16 18 39 3 10 0 40 7 10 1 40 3 10 0 45 19 13 8 13 3 19 2 20 13 8 13 0 19 2 21 13 8 15 22 19 1 23 47 1 24 45 25 10 1 39 59 13 0 19 1 26 45 27 10 1 45 28 11 29 45 30 13 0 13 1 33 31 18 2 43 1 43 1 64 7 15 32 19 1 33 65 10 1 45 34 10 1 45 35 13 0 13 1 33 36 18 2 43 1 43 1 66 43 1 43 2 4 12 19 2 37 43 6 29) #48# #1# 22139) si::fset)) #1# 22139) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 52 12 19 2 53 1 0 73 29) #49=#A(t (54) (common-lisp-user::update-utility-for-compiled-production ext::location (defun common-lisp-user::update-utility-for-compiled-production) (#1# . 22767) ext::annotate :lambda-list (common-lisp-user::p3 common-lisp-user::p1 common-lisp-user::p2) common-lisp-user::p3 common-lisp-user::p1 common-lisp-user::p2 common-lisp-user::utility common-lisp-user::get-module-fct common-lisp-user::u common-lisp-user::production-reward-changed common-lisp-user::printing-module #:g18002 #:g18001 common-lisp-user::printing-module-v common-lisp-user::act-r-output-stream #:g18003 common-lisp-user::printing-module-model-warnings *error-output* eq common-lisp-user::*one-stream-hack* t *standard-output* eql #45# common-lisp-user::mp-models length > common-lisp-user::current-model "Parent productions for ~s may now provide different rewards than they did when it was created." format finish-output #46# #47# common-lisp-user::utility-ul common-lisp-user::utility-trace #:g18005 #:g18004 #43# "  Updating utility of production ~S from production compilation" #:g18007 #:g18006 "    U(n-1) = ~f   R(n) = ~f [U(n) for first parent] alpha = ~f" common-lisp-user::production-u common-lisp-user::utility-alpha common-lisp-user::linear-update-utility #:g18009 #:g18008 "    U(n) = ~f" #Y(common-lisp-user::update-utility-for-compiled-production nil nil (24 45 7 24 45 8 24 45 9 26 15 10 19 1 11 45 12 13 2 19 1 13 40 6 13 1 19 1 13 39 175 15 14 19 1 11 47 1 15 45 16 10 1 39 10 13 0 19 1 17 12 19 1 18 39 148 13 0 19 1 17 12 19 1 18 45 19 13 1 19 1 20 76 40 127 10 0 76 40 27 13 0 11 21 17 22 40 19 11 23 40 15 13 0 11 24 17 22 39 7 14 21 11 25 17 26 39 35 14 21 15 27 19 0 28 16 29 12 9 1 19 2 30 12 19 0 31 12 15 32 13 6 19 6 33 14 21 19 1 34 38 60 14 21 15 35 19 0 28 16 29 12 9 1 19 2 30 12 19 0 31 12 15 32 13 6 19 6 33 14 21 19 1 34 13 0 15 36 19 0 28 16 29 12 9 1 19 2 30 12 19 0 31 12 15 32 13 6 19 6 33 43 1 43 2 10 0 39 6 13 0 19 1 37 73 39 188 13 0 19 1 38 39 109 15 14 19 1 11 47 1 39 45 40 10 1 39 10 13 0 19 1 17 12 19 1 18 39 20 13 0 19 1 17 12 19 1 18 12 15 41 15 42 13 5 19 4 33 43 2 15 14 19 1 11 47 1 43 45 44 10 1 39 10 13 0 19 1 17 12 19 1 18 39 36 13 0 19 1 17 12 19 1 18 12 15 41 15 45 13 5 19 1 46 12 13 4 19 1 46 12 13 2 19 1 47 12 19 6 33 43 2 13 0 13 3 13 2 19 1 46 12 19 3 48 13 0 19 1 38 73 39 52 15 14 19 1 11 47 1 49 45 50 10 1 39 10 13 0 19 1 17 12 19 1 18 73 39 24 13 0 19 1 17 12 19 1 18 12 15 41 15 51 13 5 19 1 46 12 19 4 33 43 2 43 1 29) #49# #1# 22767) si::fset)) #1# 22767) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 109 12 19 2 110 1 0 73 29) #50=#A(t (111) (common-lisp-user::utility-module-params ext::location (defun common-lisp-user::utility-module-params) (#1# . 23568) ext::annotate :lambda-list (common-lisp-user::u common-lisp-user::param) common-lisp-user::u common-lisp-user::param consp common-lisp-user::un-delay-conflict-resolution common-lisp-user::all-productions length > (:esc :dat :ul :iu) member common-lisp-user::printing-module common-lisp-user::get-module-fct #:g18049 #:g18048 common-lisp-user::printing-module-v common-lisp-user::act-r-output-stream #:g18050 common-lisp-user::printing-module-model-warnings *error-output* eq common-lisp-user::*one-stream-hack* t *standard-output* eql #45# common-lisp-user::mp-models common-lisp-user::current-model "Changing procedural parameters when productions exist unsupported." format finish-output #46# #47# #:g18052 #:g18051 #:g18053 "Results may not be what one expects." :esc #:g18054 #:g18055 common-lisp-user::utility si::structure-set :egs #:g18056 #:g18057 :ul #:g18058 #:g18059 :dat #:g18060 common-lisp-user::seconds->ms #:g18061 :iu #:g18062 #:g18063 :nu #:g18064 #:g18065 :alpha #:g18066 #:g18067 :ult #:g18068 #:g18069 :ut #:g18070 #:g18071 :utility-hook common-lisp-user::utility-utility-hook #18# common-lisp-user::current-mp-fct "Utility-hook was set to ~S and is being overwritten" #:g18072 #:g18073 :reward-hook common-lisp-user::utility-reward-hook "Reward-hook was set to ~S and is being overwritten" #:g18074 #:g18075 :utility-offsets common-lisp-user::utility-offsets "Setting parameter ~s failed because ~s already on the hook." :activation-offsets #:g18078 #:g18076 #:g18077 #:g18079 #:g18080 :reward-notify-hook common-lisp-user::utility-reward-notify-hooks "Setting parameter ~s failed because ~s already on the hook." #:g18081 #:g18083 nconc #:g18082 #:g18084 #:g18085 common-lisp-user::utility-egs common-lisp-user::utility-ul common-lisp-user::utility-iu common-lisp-user::utility-nu common-lisp-user::utility-ut common-lisp-user::utility-alpha common-lisp-user::utility-trace #Y(common-lisp-user::utility-module-params nil nil (24 45 7 24 45 8 26 10 0 16 9 39 1063 19 0 10 19 0 11 16 12 12 9 0 19 2 13 39 10 10 0 4 12 15 14 19 2 15 39 337 15 16 19 1 17 47 1 18 45 19 10 1 39 10 13 0 19 1 20 12 19 1 21 39 142 13 0 19 1 20 12 19 1 21 45 22 13 1 19 1 23 76 40 121 10 0 76 40 27 13 0 11 24 17 25 40 19 11 26 40 15 13 0 11 27 17 25 39 7 14 24 11 28 17 29 39 33 14 24 15 30 19 0 31 16 12 12 9 1 19 2 13 12 19 0 32 12 15 33 19 5 34 14 24 19 1 35 38 56 14 24 15 36 19 0 31 16 12 12 9 1 19 2 13 12 19 0 32 12 15 33 19 5 34 14 24 19 1 35 13 0 15 37 19 0 31 16 12 12 9 1 19 2 13 12 19 0 32 12 15 33 19 5 34 43 1 43 2 15 16 19 1 17 47 1 38 45 39 10 1 39 10 13 0 19 1 20 12 19 1 21 39 142 13 0 19 1 20 12 19 1 21 45 40 13 1 19 1 23 76 40 121 10 0 76 40 27 13 0 11 24 17 25 40 19 11 26 40 15 13 0 11 27 17 25 39 7 14 24 11 28 17 29 39 33 14 24 15 30 19 0 31 16 12 12 9 1 19 2 13 12 19 0 32 12 15 41 19 5 34 14 24 19 1 35 38 56 14 24 15 36 19 0 31 16 12 12 9 1 19 2 13 12 19 0 32 12 15 41 19 5 34 14 24 19 1 35 13 0 15 37 19 0 31 16 12 12 9 1 19 2 13 12 19 0 32 12 15 41 19 5 34 43 1 43 2 10 0 4 42 42 27 10 1 45 43 10 1 5 45 44 13 1 15 45 9 1 13 0 19 4 46 43 1 43 1 38 666 42 47 27 10 1 45 48 10 1 5 45 49 13 1 15 45 9 0 13 0 19 4 46 43 1 43 1 38 637 42 50 27 10 1 45 51 10 1 5 45 52 13 1 15 45 9 3 13 0 19 4 46 43 1 43 1 38 608 42 53 31 10 1 45 54 10 1 5 12 19 1 55 45 56 13 1 15 45 9 2 13 0 19 4 46 43 1 43 1 38 575 42 57 27 10 1 45 58 10 1 5 45 59 13 1 15 45 9 5 13 0 19 4 46 43 1 43 1 38 546 42 60 27 10 1 45 61 10 1 5 45 62 13 1 15 45 9 6 13 0 19 4 46 43 1 43 1 38 517 42 63 27 10 1 45 64 10 1 5 45 65 13 1 15 45 9 7 13 0 19 4 46 43 1 43 1 38 488 42 66 27 10 1 45 67 10 1 5 45 68 13 1 15 45 9 12 13 0 19 4 46 43 1 43 1 38 459 42 69 27 10 1 45 70 10 1 5 45 71 13 1 15 45 9 4 13 0 19 4 46 43 1 43 1 38 430 42 72 81 10 0 5 39 6 13 1 19 1 73 39 43 14 24 15 74 19 0 75 73 39 12 19 0 31 16 12 12 9 1 19 2 13 12 19 0 32 12 15 76 13 1 19 1 73 12 19 6 34 14 24 19 1 35 10 1 45 77 10 1 5 45 78 13 1 15 45 9 8 13 0 19 4 46 43 1 43 1 38 347 42 79 81 10 0 5 39 6 13 1 19 1 80 39 43 14 24 15 74 19 0 75 73 39 12 19 0 31 16 12 12 9 1 19 2 13 12 19 0 32 12 15 81 13 1 19 1 80 12 19 6 34 14 24 19 1 35 10 1 45 82 10 1 5 45 83 13 1 15 45 9 9 13 0 19 4 46 43 1 43 1 38 264 42 84 126 10 0 5 39 97 10 0 5 12 13 1 19 1 85 12 19 2 15 39 48 14 24 15 74 19 0 75 73 39 12 19 0 31 16 12 12 9 1 19 2 13 12 19 0 32 12 15 86 14 87 10 0 5 12 19 7 34 12 14 24 19 1 35 22 73 38 33 10 0 5 45 88 10 2 45 89 13 1 13 0 19 1 85 3 45 90 13 1 15 45 9 11 13 0 19 4 46 43 3 38 23 10 1 45 91 75 45 92 13 1 15 45 9 11 13 0 19 4 46 43 1 43 1 38 136 42 93 131 10 0 5 39 102 10 0 5 12 13 1 19 1 94 12 19 2 15 39 48 14 24 15 74 19 0 75 73 39 12 19 0 31 16 12 12 9 1 19 2 13 12 19 0 32 12 15 95 14 93 10 0 5 12 19 7 34 12 14 24 19 1 35 22 73 38 38 10 1 45 96 10 1 5 6 1 45 97 13 1 19 1 94 12 13 0 19 2 98 45 99 13 2 15 45 9 13 13 0 19 4 46 43 3 38 23 10 1 45 100 75 45 101 13 1 15 45 9 13 13 0 19 4 46 43 1 43 1 38 3 75 73 38 115 10 0 42 47 8 13 1 19 1 102 38 103 42 50 8 13 1 19 1 103 38 93 42 57 8 13 1 19 1 104 38 83 42 60 8 13 1 19 1 105 38 73 42 69 8 13 1 19 1 106 38 63 42 63 8 13 1 19 1 107 38 53 42 66 8 13 1 19 1 108 38 43 42 72 8 13 1 19 1 73 38 33 42 79 8 13 1 19 1 80 38 23 42 84 8 13 1 19 1 85 38 13 42 93 8 13 1 19 1 94 38 3 75 73 29) #50# #1# 23568) si::fset)) #1# 23568) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 12 12 19 2 13 1 0 73 29) #51=#A(t (14) (common-lisp-user::reset-utility-module ext::location (defun common-lisp-user::reset-utility-module) (#1# . 26817) ext::annotate :lambda-list (common-lisp-user::u) common-lisp-user::u #:g18088 #:g18089 common-lisp-user::utility si::structure-set #Y(common-lisp-user::reset-utility-module nil nil (24 45 7 26 10 0 45 8 75 45 9 13 1 15 10 9 10 13 0 19 4 11 43 1 43 1 29) #51# #1# 26817) si::fset)) #1# 26817) #Y(si::bytecodes nil nil (15 0 77 14 1 14 2 77 19 3 3 12 14 4 14 5 33 6 12 14 7 15 8 14 9 15 10 14 11 15 12 19 9 3 12 14 13 14 5 1 18 12 14 7 77 14 9 15 19 14 11 15 20 19 9 3 12 14 21 14 2 77 19 3 3 12 14 22 14 5 33 6 12 14 7 9 0 14 9 15 23 14 11 15 24 19 9 3 12 14 25 14 5 33 6 12 14 7 9 0 14 9 15 26 14 11 15 27 19 9 3 12 14 28 14 5 33 29 12 14 7 77 14 9 15 30 14 11 15 31 19 9 3 12 14 32 14 7 15 33 14 5 33 6 12 14 9 15 34 14 11 15 35 19 9 3 12 14 36 14 5 33 15 12 14 7 77 14 9 15 37 14 11 15 38 19 9 3 12 14 39 14 5 33 40 12 14 7 77 14 9 15 41 14 11 15 42 19 9 3 12 14 43 14 5 33 40 12 14 7 77 14 9 15 44 14 11 15 45 19 9 3 12 14 46 14 5 33 40 12 14 7 77 14 9 15 47 14 11 15 48 19 9 3 12 14 49 14 5 33 40 12 14 7 77 14 9 15 50 14 11 15 51 19 9 3 6 13 12 14 52 15 53 14 11 15 54 14 55 1 57 12 14 58 33 59 12 14 60 33 61 12 19 13 62 29) #52=#A(t (63) (common-lisp-user::utility :esc :owner common-lisp-user::define-parameter :egs :valid-test numberp :default-value 0.0 :warning "a number" :documentation "Expected Gain S" :ul common-lisp-user::x common-lisp-user::tornil common-lisp-user::complete eq #Y(nil nil nil (24 45 14 26 13 0 19 1 15 73 40 7 13 0 1 16 17 17 29) #52# #1# 26889) "T, complete, or nil" "Utility learning switch" :dat :iu "a number" "default U(0) value for an initial (user defined) production" :nu "a number" "default U(0) value for a newly learned production" :ut common-lisp-user::numornil "a number or nil" "Utility Threshold" :alpha 0.2 "a number" "Production learning rate" :ult "T or nil" "Utility learning trace" :utility-hook common-lisp-user::fctornil "a function or nil" "Utility computation hook" :reward-hook "a function or nil" "Reward value hook" :utility-offsets "a function or nil" "Add additional utility equation components" :reward-notify-hook "a function or nil" "Functions to call when there is a reward provided" :version "3.1" "A module that computes production utilities" :creation common-lisp-user::make-utility #Y(nil nil nil (24 45 14 26 19 0 56 29) #52# #1# 26889) :reset common-lisp-user::reset-utility-module :params common-lisp-user::utility-module-params common-lisp-user::define-module-fct)) #1# 26889) #Y(si::bytecodes nil nil (14 0 14 1 14 2 14 3 14 4 19 5 5 29) #A(t (6) (:egs :ul :iu :nu :alpha common-lisp-user::register-subsymbolic-parameters)) #1# 29214) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 99 12 19 2 100 15 0 15 101 15 102 19 3 103 1 0 73 29) #53=#A(t (104) (common-lisp-user::production-parameter-fct ext::location (defun common-lisp-user::production-parameter-fct) (#1# . 29275) ext::annotate :lambda-list (common-lisp-user::production-name &optional common-lisp-user::parameters) common-lisp-user::production-name common-lisp-user::parameters common-lisp-user::printing-module common-lisp-user::get-module-fct #:g18135 #:g18134 common-lisp-user::printing-module-suppress-cmds #:g18136 #:g18137 t #:g18138 (setf common-lisp-user::printing-module-suppress-cmds) (:esc) common-lisp-user::sgp-fct #:g18139 #:g18140 (setf common-lisp-user::printing-module-suppress-cmds) #:g18142 #:g18141 #:g18143 #:g18144 #:g18145 (setf common-lisp-user::printing-module-suppress-cmds) (:ul) #:g18146 #:g18147 (setf common-lisp-user::printing-module-suppress-cmds) values common-lisp-user::value common-lisp-user::ul common-lisp-user::esc #:g18149 #:g18148 common-lisp-user::printing-module-c common-lisp-user::act-r-output-stream "~&~@?~%" "Parameters for production ~S:" format si::%dolist-var common-lisp-user::parameter :name :utility common-lisp-user::production-utility :u common-lisp-user::production-u :at common-lisp-user::production-at common-lisp-user::ms->seconds :reward common-lisp-user::production-reward :fixed-utility common-lisp-user::production-fixed-utility *error-output* #18# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "NO PARAMETER ~A DEFINED FOR PRODUCTIONS." finish-output :error #:g18159 nconc numberp #:g18161 #:g18160 " ~S ~6,3F" #:g18163 #:g18162 " ~S ~6@s" #:g18165 #:g18164 " :utility ~6,3F" #:g18167 #:g18166 " :utility ~6@s" #:g18169 #:g18168 " :u  ~6,3F" #:g18171 #:g18170 " :at ~6,3F" #:g18173 #:g18172 " :reward ~6,3F" #:g18175 #:g18174 " :reward ~6@s" #:g18177 #:g18176 " :fixed-utility ~6@s" #Y(common-lisp-user::production-parameter-fct nil nil (24 45 7 25 40 2 77 46 8 26 15 9 19 1 10 47 1 11 45 12 10 1 39 59 13 0 19 1 13 45 14 10 1 45 15 11 16 45 17 13 0 13 1 33 18 18 2 43 1 43 1 64 7 15 19 19 1 20 65 10 1 45 21 10 1 45 22 13 0 13 1 33 23 18 2 43 1 43 1 66 43 1 43 2 4 12 15 9 19 1 10 47 1 24 45 25 10 1 39 59 13 0 19 1 13 45 26 10 1 45 27 11 16 45 28 13 0 13 1 33 29 18 2 43 1 43 1 64 7 15 30 19 1 20 65 10 1 45 31 10 1 45 32 13 0 13 1 33 33 18 2 43 1 43 1 66 43 1 43 2 4 12 77 77 46 34 46 35 46 36 46 37 10 5 39 780 15 9 19 1 10 47 1 38 45 39 10 1 39 18 13 0 19 1 13 76 39 10 13 0 19 1 40 12 19 1 41 39 20 13 0 19 1 40 12 19 1 41 12 15 42 15 43 13 7 19 4 44 43 2 10 4 39 273 10 4 45 45 75 45 46 38 253 10 1 4 51 0 10 0 42 47 5 10 7 38 95 42 48 8 13 7 19 1 49 38 85 42 50 8 13 7 19 1 51 38 75 42 52 12 13 7 19 1 53 12 19 1 54 38 61 42 55 8 13 7 19 1 56 38 51 42 57 8 13 7 19 1 58 38 41 14 59 15 60 19 0 61 73 39 12 19 0 62 16 63 12 9 1 19 2 64 12 19 0 65 12 15 66 13 0 19 6 44 14 59 19 1 67 11 68 51 4 10 4 6 1 45 69 13 6 13 0 19 2 70 51 6 43 1 10 4 16 71 39 59 15 9 19 1 10 47 1 72 45 73 10 1 39 18 13 0 19 1 13 76 39 10 13 0 19 1 40 12 19 1 41 39 22 13 0 19 1 40 12 19 1 41 12 15 42 15 74 13 2 13 6 19 5 44 43 2 38 57 15 9 19 1 10 47 1 75 45 76 10 1 39 18 13 0 19 1 13 76 39 10 13 0 19 1 40 12 19 1 41 39 22 13 0 19 1 40 12 19 1 41 12 15 42 15 77 13 2 13 6 19 5 44 43 2 10 1 5 51 1 10 1 40 -255 43 2 10 3 73 38 448 10 0 39 128 13 5 19 1 49 16 71 39 61 15 9 19 1 10 47 1 78 45 79 10 1 39 18 13 0 19 1 13 76 39 10 13 0 19 1 40 12 19 1 41 39 24 13 0 19 1 40 12 19 1 41 12 15 42 15 80 13 7 19 1 49 12 19 4 44 43 2 38 59 15 9 19 1 10 47 1 81 45 82 10 1 39 18 13 0 19 1 13 76 39 10 13 0 19 1 40 12 19 1 41 39 24 13 0 19 1 40 12 19 1 41 12 15 42 15 83 13 7 19 1 49 12 19 4 44 43 2 15 9 19 1 10 47 1 84 45 85 10 1 39 18 13 0 19 1 13 76 39 10 13 0 19 1 40 12 19 1 41 39 24 13 0 19 1 40 12 19 1 41 12 15 42 15 86 13 7 19 1 51 12 19 4 44 43 2 15 9 19 1 10 47 1 87 45 88 10 1 39 18 13 0 19 1 13 76 39 10 13 0 19 1 40 12 19 1 41 39 28 13 0 19 1 40 12 19 1 41 12 15 42 15 89 13 7 19 1 53 12 19 1 54 12 19 4 44 43 2 10 0 39 3 10 1 39 186 13 5 19 1 56 16 71 39 61 15 9 19 1 10 47 1 90 45 91 10 1 39 18 13 0 19 1 13 76 39 10 13 0 19 1 40 12 19 1 41 39 24 13 0 19 1 40 12 19 1 41 12 15 42 15 92 13 7 19 1 56 12 19 4 44 43 2 38 59 15 9 19 1 10 47 1 93 45 94 10 1 39 18 13 0 19 1 13 76 39 10 13 0 19 1 40 12 19 1 41 39 24 13 0 19 1 40 12 19 1 41 12 15 42 15 95 13 7 19 1 56 12 19 4 44 43 2 15 9 19 1 10 47 1 96 45 97 10 1 39 18 13 0 19 1 13 76 39 10 13 0 19 1 40 12 19 1 41 39 24 13 0 19 1 40 12 19 1 41 12 15 42 15 98 13 7 19 1 58 12 19 4 44 43 2 10 5 73 38 4 11 68 73 43 4 29) #53# #1# 29275) si::fset function "Returns the value of the production parameter(s), or print all if none given." si::set-documentation)) #1# 29275) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 26 12 14 22 9 5 19 4 27 15 0 15 28 15 29 19 3 30 1 0 73 29) #54=#A(t (31) (common-lisp-user::set-parameter ext::location (defmacro common-lisp-user::set-parameter) (#1# . 31933) ext::annotate :lambda-list (common-lisp-user::slot common-lisp-user::parameter common-lisp-user::test warning &rest common-lisp-user::housekeeping) #:g18179 #:g18178 #:g18180 si::dm-too-few-arguments common-lisp-user::slot common-lisp-user::parameter common-lisp-user::test warning common-lisp-user::housekeeping cond setf common-lisp-user::p common-lisp-user::value (common-lisp-user::value) append t common-lisp-user::print-warning #55="PARAMETER ~A CANNOT TAKE VALUE ~S BECAUSE IT MUST BE ~:@(~A~)." :error #Y(common-lisp-user::set-parameter nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 10 1 76 39 6 13 3 19 1 10 10 1 4 12 10 1 5 51 1 22 45 12 10 2 76 39 6 13 4 19 1 10 10 2 4 12 10 2 5 51 2 22 45 13 10 3 76 39 6 13 5 19 1 10 10 3 4 12 10 3 5 51 3 22 45 14 10 4 45 15 15 16 13 2 15 17 13 4 1 18 6 2 12 1 19 6 3 12 13 0 15 20 19 2 21 7 3 12 15 22 15 23 15 24 13 3 15 19 10 1 6 5 12 11 25 6 3 6 3 73 29) #54# #1# 31933) si::fset function "Sets parameter of production p in slot if value passes test, otherwise issue warning." si::set-documentation)) #1# 31933) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 77 12 19 2 78 15 0 15 79 15 80 19 3 81 1 0 73 29) #56=#A(t (82) (common-lisp-user::parameters-fct ext::location (defun common-lisp-user::parameters-fct) (#1# . 32478) ext::annotate :lambda-list (common-lisp-user::p common-lisp-user::parameters) common-lisp-user::p common-lisp-user::parameters common-lisp-user::un-delay-conflict-resolution common-lisp-user::printing-module common-lisp-user::get-module-fct #:g18206 #:g18205 common-lisp-user::printing-module-suppress-cmds #:g18207 #:g18208 t #:g18209 (setf common-lisp-user::printing-module-suppress-cmds) (:ul) common-lisp-user::sgp-fct #:g18210 #:g18211 (setf common-lisp-user::printing-module-suppress-cmds) common-lisp-user::ul values 0 #:g18213 common-lisp-user::parameter #:g18214 common-lisp-user::value listp quote eq second :name *error-output* #18# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "PARAMETER NAME CANNOT BE SET." format finish-output :error :utility "PARAMETER UTILITY CANNOT BE SET." :u numberp common-lisp-user::production-u-setf #55# "a number" :at common-lisp-user::spp common-lisp-user::safe-seconds->ms common-lisp-user::nonneg common-lisp-user::production-at-setf "a positive number" :reward common-lisp-user::mp-time-ms zerop common-lisp-user::production-reward common-lisp-user::old common-lisp-user::production-reward-changed-setf common-lisp-user::production-reward-setf "PARAMETER ~A CANNOT TAKE VALUE ~S BECAUSE IT MUST BE ~:@(~A~)." "a number, t, or nil" "PARAMETER REWARD CAN ONLY BE SET WHEN UL IS T." :fixed-utility common-lisp-user::production-fixed-utility-setf "T or nil" "NO PARAMETER ~A DEFINED FOR PRODUCTIONS." #:g18217 nconc #Y(common-lisp-user::parameters-fct nil nil (24 45 7 24 45 8 26 19 0 9 77 15 10 19 1 11 47 1 12 45 13 10 1 39 59 13 0 19 1 14 45 15 10 1 45 16 11 17 45 18 13 0 13 1 33 19 18 2 43 1 43 1 64 7 15 20 19 1 21 65 10 1 45 22 10 1 45 23 13 0 13 1 33 24 18 2 43 1 43 1 66 43 1 43 2 4 12 46 25 46 26 10 3 39 609 58 60 604 57 27 61 1 1 10 4 76 39 6 10 2 73 36 1 10 4 45 28 10 0 4 12 10 0 5 51 0 10 0 51 5 22 43 1 45 29 10 5 45 30 10 0 4 12 10 0 5 51 0 10 0 51 6 22 43 1 45 31 10 0 16 32 39 9 10 0 4 12 1 33 17 34 39 7 10 0 16 35 51 0 10 1 42 36 41 14 37 15 38 19 0 39 73 39 12 19 0 40 16 41 12 9 1 19 2 42 12 19 0 43 12 15 44 19 5 45 14 37 19 1 46 11 47 38 455 42 48 41 14 37 15 38 19 0 39 73 39 12 19 0 40 16 41 12 9 1 19 2 42 12 19 0 43 12 15 49 19 5 45 14 37 19 1 46 11 47 38 412 42 50 64 10 0 16 51 39 12 13 7 13 0 19 2 52 10 0 38 45 14 37 15 38 19 0 39 73 39 12 19 0 40 16 41 12 9 1 19 2 42 12 19 0 43 12 15 53 14 50 13 0 15 54 19 8 45 14 37 19 1 46 11 47 38 346 42 55 74 13 0 15 56 19 2 57 51 0 13 0 19 1 58 39 12 13 7 13 0 19 2 59 10 0 38 45 14 37 15 38 19 0 39 73 39 12 19 0 40 16 41 12 9 1 19 2 42 12 19 0 43 12 15 53 14 55 13 0 15 60 19 8 45 14 37 19 1 46 11 47 38 270 42 61 154 10 5 39 110 10 0 76 40 13 13 0 11 17 17 34 40 5 10 0 16 51 39 45 19 0 62 16 63 76 39 26 13 7 19 1 64 45 65 13 1 10 0 17 34 76 39 8 13 8 14 17 19 2 66 43 1 13 7 13 0 19 2 67 10 0 38 45 14 37 15 38 19 0 39 73 39 12 19 0 40 16 41 12 9 1 19 2 42 12 19 0 43 12 15 68 14 61 13 0 15 69 19 8 45 14 37 19 1 46 11 47 38 39 14 37 15 38 19 0 39 73 39 12 19 0 40 16 41 12 9 1 19 2 42 12 19 0 43 12 15 70 19 5 45 12 14 37 19 1 46 22 38 114 42 71 71 13 0 11 17 17 34 40 4 10 0 76 39 12 13 7 13 0 19 2 72 10 0 38 45 14 37 15 38 19 0 39 73 39 12 19 0 40 16 41 12 9 1 19 2 42 12 19 0 43 12 15 53 14 71 13 0 15 73 19 8 45 14 37 19 1 46 11 47 38 41 14 37 15 38 19 0 39 73 39 12 19 0 40 16 41 12 9 1 19 2 42 12 19 0 43 12 15 74 13 1 19 6 45 14 37 19 1 46 11 47 6 1 45 75 13 5 13 0 19 2 76 51 5 43 1 43 2 35 0 0 62 73 63 38 4 11 47 73 43 2 29) #56# #1# 32478) si::fset function "Sets the parameters of the production (internal - user should use spp)." si::set-documentation)) #1# 32478) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 13 12 14 14 9 1 19 4 15 15 0 15 16 15 17 19 3 18 1 0 73 29) #57=#A(t (19) (common-lisp-user::spp ext::location (defmacro common-lisp-user::spp) (#1# . 35489) ext::annotate :lambda-list (&rest common-lisp-user::production-parameters) #:g18230 #:g18229 #:g18231 common-lisp-user::production-parameters common-lisp-user::spp-fct quote #Y(common-lisp-user::spp nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 45 10 15 11 15 12 10 0 6 2 6 2 73 29) #57# #1# 35489) t si::fset function "Inspects and sets production parameters." si::set-documentation)) #1# 35489) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 52 12 19 2 53 15 0 15 54 15 55 19 3 56 1 0 73 29) #58=#A(t (57) (common-lisp-user::spp-fct ext::location (defun common-lisp-user::spp-fct) (#1# . 35623) ext::annotate :lambda-list (common-lisp-user::parameters) common-lisp-user::parameters common-lisp-user::results common-lisp-user::all-productions si::%dolist-var common-lisp-user::production common-lisp-user::production-parameter-fct #:g18277 nconc keywordp second listp common-lisp-user::description atom common-lisp-user::parameters-fct #:g18301 common-lisp-user::get-production cddr third #:g18310 common-lisp-user::printing-module common-lisp-user::get-module-fct #:g18312 #:g18311 common-lisp-user::printing-module-v common-lisp-user::act-r-output-stream #:g18313 common-lisp-user::printing-module-model-warnings *error-output* eq common-lisp-user::*one-stream-hack* t *standard-output* eql #45# common-lisp-user::mp-models length > common-lisp-user::current-model "Spp cannot adjust parameters because production ~S does not exist" format finish-output #46# #47# :error #:g18315 #Y(common-lisp-user::spp-fct nil nil (24 45 7 26 75 45 8 10 1 76 39 49 19 0 9 45 10 75 45 11 38 31 10 1 4 51 0 13 0 19 1 12 6 1 45 13 13 3 13 0 19 2 14 51 3 43 1 10 1 5 51 1 10 1 40 -33 43 2 38 453 10 1 4 16 15 40 31 10 1 16 16 16 15 40 23 10 1 4 16 17 39 16 10 1 16 16 76 39 9 10 1 4 16 16 16 15 76 39 7 10 1 6 1 38 3 10 1 45 10 75 45 18 38 393 10 1 4 51 0 10 0 16 19 39 7 10 0 6 1 51 0 10 0 4 16 15 39 74 19 0 9 45 10 75 45 11 38 56 10 1 4 51 0 10 2 5 39 8 10 2 16 16 16 15 76 39 10 13 0 13 2 19 2 20 38 8 13 0 13 2 19 2 12 6 1 45 21 13 5 13 0 19 2 14 51 5 43 1 10 1 5 51 1 10 1 40 -58 43 2 38 291 10 0 4 16 19 39 8 10 0 4 6 1 38 4 10 0 4 45 10 75 45 11 38 261 10 1 4 51 0 13 0 19 1 22 39 53 10 2 16 23 39 8 10 2 16 24 16 15 76 39 12 13 0 10 2 5 12 19 2 20 38 10 13 0 10 2 5 12 19 2 12 6 1 45 25 13 5 13 0 19 2 14 51 5 43 1 38 192 15 26 19 1 27 47 1 28 45 29 10 1 39 10 13 0 19 1 30 12 19 1 31 39 148 13 0 19 1 30 12 19 1 31 45 32 13 1 19 1 33 76 40 127 10 0 76 40 27 13 0 11 34 17 35 40 19 11 36 40 15 13 0 11 37 17 35 39 7 14 34 11 38 17 39 39 35 14 34 15 40 19 0 41 16 42 12 9 1 19 2 43 12 19 0 44 12 15 45 13 3 19 6 46 14 34 19 1 47 38 60 14 34 15 48 19 0 41 16 42 12 9 1 19 2 43 12 19 0 44 12 15 45 13 3 19 6 46 14 34 19 1 47 13 0 15 49 19 0 41 16 42 12 9 1 19 2 43 12 19 0 44 12 15 45 13 3 19 6 46 43 1 43 2 11 50 6 1 45 51 13 5 13 0 19 2 14 51 5 43 1 10 1 5 51 1 10 1 40 -263 43 2 10 1 5 51 1 10 1 40 -395 43 2 10 0 73 43 1 29) #58# #1# 35623) si::fset function "Inspects and sets production parameters." si::set-documentation)) #1# 35623))
