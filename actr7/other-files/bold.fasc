(#Y(si::bytecodes nil nil (15 0 14 1 14 2 33 3 12 19 4 4 76 73 39 10 15 5 19 1 6 12 19 1 7 29) #A(t (8) ("ENVIRONMENT-COLORS" *modules* :test string= member "ACT-R-support:environment-colors" translate-logical-pathname common-lisp-user::compile-and-load)) #1=#P"C:/Users/Son Pham/Desktop/actr7/other-files/bold.lisp" 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 10 12 19 2 11 1 0 73 29) #2=#A(t (12) (common-lisp-user::bold-buffer-record-times ext::location (defun common-lisp-user::bold-buffer-record-times) (#1# . 22148) ext::annotate :lambda-list (common-lisp-user::x) common-lisp-user::x common-lisp-user::buffer-record-ms-time / #Y(common-lisp-user::bold-buffer-record-times nil nil (24 45 7 26 13 0 19 1 8 12 9 1000 19 2 9 29) #2# #1# 22148) si::fset)) #1# 22148) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 17 77 77 15 6 19 15 7 15 0 15 8 15 9 15 10 19 4 11 15 12 15 8 15 13 15 14 19 4 11 15 12 14 15 77 15 16 19 4 11 15 0 19 1 39 78 35 15 12 1 37 12 19 2 38 1 0 73 29) #3=#A(t (40) (common-lisp-user::bold-module "BOLD-MODULE-" (common-lisp-user::scale (exp 0) common-lisp-user::inc common-lisp-user::settle common-lisp-user::point common-lisp-user::v common-lisp-user::cmdt common-lisp-user::buffers common-lisp-user::max-table common-lisp-user::c1 common-lisp-user::c2 (common-lisp-user::neg-exp 0) common-lisp-user::neg-scale common-lisp-user::mode common-lisp-user::save-data common-lisp-user::colors common-lisp-user::end) ((common-lisp-user::scale nil t nil 0 nil) (exp 0 t nil 1 nil) (common-lisp-user::inc nil t nil 2 nil) (common-lisp-user::settle nil t nil 3 nil) (common-lisp-user::point nil t nil 4 nil) (common-lisp-user::v nil t nil 5 nil) (common-lisp-user::cmdt nil t nil 6 nil) (common-lisp-user::buffers nil t nil 7 nil) (common-lisp-user::max-table nil t nil 8 nil) (common-lisp-user::c1 nil t nil 9 nil) (common-lisp-user::c2 nil t nil 10 nil) (common-lisp-user::neg-exp 0 t nil 11 nil) (common-lisp-user::neg-scale nil t nil 12 nil) (common-lisp-user::mode nil t nil 13 nil) (common-lisp-user::save-data nil t nil 14 nil) (common-lisp-user::colors nil t nil 15 nil) (common-lisp-user::end nil t nil 16 nil)) common-lisp-user::copy-bold-module (common-lisp-user::make-bold-module) common-lisp-user::bold-module-p si::define-structure ext::location (defstruct common-lisp-user::bold-module) (#1# . 22223) ext::annotate common-lisp-user::make-bold-module (defun common-lisp-user::make-bold-module) (#1# . 22223) :lambda-list (&key #4=#:scale (#5=#:exp 0) #6=#:inc #7=#:settle #8=#:point #9=#:v #10=#:cmdt #11=#:buffers #12=#:max-table #13=#:c1 #14=#:c2 (#15=#:neg-exp 0) #16=#:neg-scale #17=#:mode #18=#:save-data #19=#:colors #20=#:end) (nil :end :colors :save-data :mode :neg-scale :neg-exp :c2 :c1 :max-table :buffers :cmdt :v :point :settle :inc :exp :scale) #4# #5# #6# #7# #8# #9# #10# #11# #12# #13# #14# #15# #16# #17# #18# #19# #20# 0 si::make-structure #Y(common-lisp-user::make-bold-module nil nil (28 17 22 40 2 77 46 18 22 40 3 9 0 46 19 22 40 2 77 46 20 22 40 2 77 46 21 22 40 2 77 46 22 22 40 2 77 46 23 22 40 2 77 46 24 22 40 2 77 46 25 22 40 2 77 46 26 22 40 2 77 46 27 22 40 2 77 46 28 22 40 3 9 0 46 29 22 40 2 77 46 30 22 40 2 77 46 31 22 40 2 77 46 32 22 40 2 77 46 33 22 40 2 77 46 34 15 35 13 16 13 15 13 14 13 13 13 12 13 11 13 10 13 9 13 8 13 7 13 6 13 5 13 4 13 3 13 2 13 1 13 0 19 18 36 29) #3# #1# 22223) si::fset find-class)) #1# 22223) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 25 12 19 2 26 15 0 15 27 15 28 19 3 29 1 0 73 29) #21=#A(t (30) (common-lisp-user::bold_partial_gammapdf ext::location (defun common-lisp-user::bold_partial_gammapdf) (#1# . 22361) ext::annotate :lambda-list (time common-lisp-user::a common-lisp-user::b) time common-lisp-user::a common-lisp-user::b / common-lisp-user::scale #:g24815 #:g24816 0 error si::temp #Y(nil nil nil (24 45 16 26 10 0 51 2 35 1 0 29) #21# #1# 22361) si::*handler-clusters* expt - exp * condition common-lisp-user::result #Y(common-lisp-user::bold_partial_gammapdf nil nil (24 45 7 24 45 8 24 45 9 26 13 2 13 0 19 2 10 45 11 57 12 60 61 75 45 13 57 14 61 1 36 15 15 34 17 3 6 1 12 11 18 3 48 18 13 3 10 5 17 19 12 13 3 19 1 20 16 21 12 19 2 22 36 2 44 1 10 1 45 23 77 13 0 72 2 43 1 36 2 62 43 1 63 45 24 10 0 39 6 10 0 73 38 4 8 0 73 43 2 29) #21# #1# 22361) si::fset function "Compute the gammapdf function without this part: 1/(b*a!) because that will be multiplied through at the end" si::set-documentation)) #1# 22361) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 18 12 19 2 19 15 0 15 20 15 21 19 3 22 1 0 73 29) #22=#A(t (23) (common-lisp-user::area-under-bold-subsegment ext::location (defun common-lisp-user::area-under-bold-subsegment) (#1# . 22841) ext::annotate :lambda-list (time common-lisp-user::time1 common-lisp-user::time2 common-lisp-user::a common-lisp-user::b) time common-lisp-user::time1 common-lisp-user::time2 common-lisp-user::a common-lisp-user::b - common-lisp-user::bold_partial_gammapdf + / * 0.25 #Y(common-lisp-user::area-under-bold-subsegment nil nil (24 45 7 24 45 8 24 45 9 24 45 10 24 45 11 26 13 4 13 3 19 2 12 12 13 1 13 0 19 3 13 12 9 2 13 4 13 3 13 2 19 2 14 12 9 2 19 2 15 12 19 2 12 12 13 1 13 0 19 3 13 12 19 2 16 12 13 4 13 2 19 2 12 12 13 1 13 0 19 3 13 12 19 3 14 12 13 2 13 3 19 2 12 12 15 17 19 3 16 29) #22# #1# 22841) si::fset function "Compute the area under the gammapdf using the trapezoidal rule with the ends and midpoint and inverting the time for the convolution" si::set-documentation)) #1# 22841) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 28 12 19 2 29 15 0 15 30 15 31 19 3 32 1 0 73 29) #23=#A(t (33) (common-lisp-user::area-under-bold-curve ext::location (defun common-lisp-user::area-under-bold-curve) (#1# . 23249) ext::annotate :lambda-list (time common-lisp-user::time1 common-lisp-user::time2 common-lisp-user::inc common-lisp-user::a common-lisp-user::b) time common-lisp-user::time1 common-lisp-user::time2 common-lisp-user::inc common-lisp-user::a common-lisp-user::b min = - common-lisp-user::width ceiling common-lisp-user::steps / step common-lisp-user::sum common-lisp-user::y common-lisp-user::x common-lisp-user::current 1+ common-lisp-user::area-under-bold-subsegment + #Y(common-lisp-user::area-under-bold-curve nil nil (24 45 7 24 45 8 24 45 9 24 45 10 24 45 11 24 45 12 26 13 5 13 3 19 2 13 51 3 13 4 13 3 19 2 14 39 6 8 0 73 38 127 13 3 13 4 19 2 15 45 16 13 0 13 3 19 2 17 45 18 13 1 13 0 19 2 19 45 20 9 1 13 6 13 0 19 2 15 12 13 6 9 0 46 21 46 22 46 23 46 24 38 44 10 0 16 25 12 13 1 13 4 19 2 15 12 13 1 13 3 13 12 13 1 13 2 13 8 13 7 19 5 26 12 19 2 27 12 53 3 53 2 53 1 53 0 13 0 13 5 19 2 14 39 -51 13 3 13 12 13 11 13 2 13 8 13 7 19 5 26 12 19 2 27 43 4 43 3 29) #23# #1# 23249) si::fset function "Compute the area under the bold curve for the demand from time1 to time2 in blocks no bigger than the increment" si::set-documentation)) #1# 23249) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 22 12 19 2 23 15 0 15 24 15 25 19 3 26 1 0 73 29) #24=#A(t (27) (common-lisp-user::sum-bold-demands ext::location (defun common-lisp-user::sum-bold-demands) (#1# . 23851) ext::annotate :lambda-list (common-lisp-user::times time common-lisp-user::inc common-lisp-user::a common-lisp-user::b common-lisp-user::point-based?) common-lisp-user::times time common-lisp-user::inc common-lisp-user::a common-lisp-user::b common-lisp-user::point-based? common-lisp-user::sum common-lisp-user::temp caar - common-lisp-user::bold_partial_gammapdf cdar common-lisp-user::area-under-bold-curve + > #Y(common-lisp-user::sum-bold-demands nil nil (24 45 7 24 45 8 24 45 9 24 45 10 24 45 11 24 45 12 26 13 5 9 0 46 13 46 14 38 61 10 0 5 12 13 1 10 2 39 21 13 6 10 0 16 15 12 19 2 16 12 13 4 13 3 19 3 17 38 22 13 6 10 0 16 15 12 10 0 16 18 12 13 5 13 4 13 3 19 6 19 12 19 2 20 12 53 1 53 0 10 0 76 40 11 10 0 16 15 12 13 6 19 2 21 39 -76 10 1 73 43 2 29) #24# #1# 23851) si::fset function "Iterate over the demand segments and sum the area" si::set-documentation)) #1# 23851) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 31 12 19 2 32 1 0 73 29) #25=#A(t (33) (common-lisp-user::compute-bold-values ext::location (defun common-lisp-user::compute-bold-values) (#1# . 24252) ext::annotate :lambda-list (common-lisp-user::times common-lisp-user::start common-lisp-user::end common-lisp-user::inc common-lisp-user::settle common-lisp-user::a common-lisp-user::b common-lisp-user::point-based?) common-lisp-user::times common-lisp-user::start common-lisp-user::end common-lisp-user::inc common-lisp-user::settle common-lisp-user::a common-lisp-user::b common-lisp-user::point-based? common-lisp-user::results / + time - :test < :key car cdr member common-lisp-user::sum-bold-demands #:g24837 nconc #:g24839 <= #Y(common-lisp-user::compute-bold-values nil nil (24 45 7 24 45 8 24 45 9 24 45 10 24 45 11 24 45 12 24 45 13 24 45 14 26 75 45 15 13 7 13 5 9 2 19 2 16 12 19 2 17 45 18 38 80 13 0 13 5 19 2 19 12 13 9 14 20 15 21 14 22 10 2 39 6 1 23 73 38 4 1 24 73 12 19 6 25 51 9 13 9 13 0 13 6 13 4 13 3 13 2 19 6 26 6 1 45 27 13 2 13 0 19 2 28 51 2 43 1 10 6 45 29 13 1 13 0 19 2 17 51 1 43 1 13 0 13 7 13 6 9 2 19 2 16 12 19 2 19 12 19 2 30 76 39 -100 10 1 73 43 2 29) #25# #1# 24252) si::fset)) #1# 24252) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 33 12 19 2 34 1 0 73 29) #26=#A(t (35) (common-lisp-user::bold-predict ext::location (defun common-lisp-user::bold-predict) (#1# . 24630) ext::annotate :lambda-list (common-lisp-user::times common-lisp-user::start common-lisp-user::end common-lisp-user::inc common-lisp-user::settle common-lisp-user::c1 common-lisp-user::c2 common-lisp-user::ap common-lisp-user::bp common-lisp-user::pos-factor common-lisp-user::an common-lisp-user::bn common-lisp-user::neg-factor common-lisp-user::point-based?) common-lisp-user::times common-lisp-user::start common-lisp-user::end common-lisp-user::inc common-lisp-user::settle common-lisp-user::c1 common-lisp-user::c2 common-lisp-user::ap common-lisp-user::bp common-lisp-user::pos-factor common-lisp-user::an common-lisp-user::bn common-lisp-user::neg-factor common-lisp-user::point-based? zerop common-lisp-user::compute-bold-values common-lisp-user::neg common-lisp-user::pos common-lisp-user::p common-lisp-user::n * - #Y(nil nil nil (24 45 25 24 45 26 26 13 1 13 8 19 2 27 12 13 0 13 5 19 2 27 12 19 2 28 29) #26# #1# 24630) mapcar #Y(nil nil nil (24 45 25 26 13 0 13 7 19 2 27 29) #26# #1# 24630) #Y(nil nil nil (24 45 26 26 13 0 13 4 19 2 27 12 19 1 28 29) #26# #1# 24630) #Y(common-lisp-user::bold-predict nil nil (24 45 7 24 45 8 24 45 9 24 45 10 24 45 11 24 45 12 24 45 13 24 45 14 24 45 15 24 45 16 24 45 17 24 45 18 24 45 19 24 45 20 26 10 8 16 21 76 73 39 20 13 13 13 12 13 11 13 10 13 9 13 6 13 5 13 0 19 8 22 12 10 7 16 21 76 73 39 20 13 13 13 12 13 11 13 10 13 9 13 3 13 2 13 0 19 8 22 12 46 23 46 24 10 10 16 21 76 39 6 10 9 16 21 76 39 13 34 29 12 13 0 13 1 19 3 30 38 25 10 9 16 21 39 11 34 31 12 13 0 19 2 30 38 9 34 32 12 13 1 19 2 30 43 2 29) #26# #1# 24630) si::fset)) #1# 24630) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 13 12 19 2 14 1 0 73 29) #27=#A(t (15) (common-lisp-user::bold_factorial ext::location (defun common-lisp-user::bold_factorial) (#1# . 25236) ext::annotate :lambda-list (common-lisp-user::n) common-lisp-user::n common-lisp-user::i common-lisp-user::v 1- * = #Y(common-lisp-user::bold_factorial nil nil (24 45 7 26 10 0 45 8 10 0 45 9 38 16 10 1 16 10 51 1 13 0 13 1 19 2 11 51 0 13 1 9 1 19 2 12 39 -23 10 0 73 43 2 29) #27# #1# 25236) si::fset)) #1# 25236) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 42 12 19 2 43 1 0 73 29) #28=#A(t (44) (common-lisp-user::parse-trace-lists-for-bold ext::location (defun common-lisp-user::parse-trace-lists-for-bold) (#1# . 25332) ext::annotate :lambda-list (common-lisp-user::bm &optional common-lisp-user::trace-data (common-lisp-user::end-time (common-lisp-user::mp-time-ms))) common-lisp-user::bm common-lisp-user::trace-data common-lisp-user::mp-time-ms common-lisp-user::end-time common-lisp-user::get-current-buffer-trace trace common-lisp-user::bold-module-buffers common-lisp-user::b listp common-lisp-user::buffers common-lisp-user::all-data si::%dolist-var common-lisp-user::x common-lisp-user::current-rect common-lisp-user::rects common-lisp-user::z common-lisp-user::buffer-record-buffers :key common-lisp-user::buffer-summary-name find common-lisp-user::record common-lisp-user::buffer-summary-busy common-lisp-user::buffer-summary-busy->free common-lisp-user::buffer-summary-request common-lisp-user::bold-buffer-record-times #:g24927 nconc common-lisp-user::buffer-summary-chunk-name common-lisp-user::buffer-summary-error common-lisp-user::buffer-summary-error->clear #:g24931 #:g24934 #:g24936 / #:g24938 #Y(common-lisp-user::parse-trace-lists-for-bold nil nil (24 45 7 25 40 2 77 46 8 25 40 5 19 0 9 12 46 10 26 10 1 39 5 10 1 38 4 19 0 11 45 12 13 3 19 1 13 45 14 10 0 16 15 39 5 10 0 38 4 19 0 16 45 16 75 45 17 10 1 45 18 75 45 19 38 328 10 1 4 51 0 77 77 46 20 46 21 10 7 45 18 75 45 22 38 255 10 1 4 51 0 13 4 13 0 19 1 23 12 14 24 15 25 19 4 26 45 27 10 0 39 222 10 4 39 67 13 0 19 1 28 76 40 13 13 0 19 1 29 40 6 13 0 19 1 30 39 43 13 4 13 1 19 1 31 3 6 1 45 32 13 4 13 0 19 2 33 51 4 43 1 13 0 19 1 30 39 10 13 1 19 1 31 51 4 38 4 75 51 4 38 152 13 0 19 1 28 39 75 13 0 19 1 30 39 28 13 0 19 1 34 40 21 13 0 19 1 35 39 7 13 0 19 1 36 76 40 6 13 0 19 1 29 39 30 13 1 19 1 31 12 13 1 19 1 31 3 6 1 45 37 13 4 13 0 19 2 33 51 4 43 1 38 8 13 1 19 1 31 51 4 38 71 13 0 19 1 30 39 30 13 1 19 1 31 12 13 1 19 1 31 3 6 1 45 38 13 4 13 0 19 2 33 51 4 43 1 38 35 13 0 19 1 34 39 28 13 1 19 1 31 12 13 1 19 1 31 3 6 1 45 39 13 4 13 0 19 2 33 51 4 43 1 43 1 10 1 5 51 1 10 1 40 -257 43 2 10 1 39 26 13 1 13 8 9 1000 19 2 40 3 6 1 45 41 13 1 13 0 19 2 33 51 1 43 1 13 2 10 0 3 12 10 4 3 51 4 43 2 10 1 5 51 1 10 1 40 -330 43 2 10 0 73 43 4 29) #28# #1# 25332) si::fset)) #1# 25332) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 98 12 19 2 99 1 0 73 29) #29=#A(t (100) (common-lisp-user::predict-bold-response ext::location (defun common-lisp-user::predict-bold-response) (#1# . 27488) ext::annotate :lambda-list (&optional (common-lisp-user::start 0) common-lisp-user::end) common-lisp-user::start common-lisp-user::end common-lisp-user::*meta-processes* common-lisp-user::mps-current *error-output* #30="~&#|Warning~:[~*~;~@[ (in model ~a)~]~]: ~@? |#~%" common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "Predict-bold-response requires a current meta-process." format finish-output common-lisp-user::meta-p-current-model "Predict-bold-response requires a current model." common-lisp-user::mp-time-ms / numberp "Predict-bold-response requires start and end times to be numbers, but given ~s,~s." common-lisp-user::safe-seconds->ms common-lisp-user::bold common-lisp-user::get-module-fct common-lisp-user::bm common-lisp-user::parse-trace-lists-for-bold common-lisp-user::data common-lisp-user::bold-module-point common-lisp-user::point common-lisp-user::bold-module-inc common-lisp-user::inc common-lisp-user::bold-module-c1 common-lisp-user::c1 common-lisp-user::bold-module-c2 common-lisp-user::c2 common-lisp-user::bold-module-mode common-lisp-user::spm eq common-lisp-user::bold-module-exp 1- common-lisp-user::ap common-lisp-user::bold-module-neg-exp common-lisp-user::an common-lisp-user::bold-module-scale common-lisp-user::bp common-lisp-user::bold-module-neg-scale common-lisp-user::bn zerop max common-lisp-user::bold_factorial * - common-lisp-user::pos-factor common-lisp-user::neg-factor < "Sample time too short for BOLD predictions - must be at least :bold-inc seconds (currently ~s)" mod floor common-lisp-user::printing-module #:g24943 #:g24942 common-lisp-user::printing-module-v common-lisp-user::act-r-output-stream #:g24944 common-lisp-user::printing-module-model-warnings common-lisp-user::*one-stream-hack* t *standard-output* eql #31="~&#|Warning~:[~*~; (in model ~a)~]: ~@? |#~%" "Start time should be a multiple of :bold-inc (~S).  Using start time of ~S." #32="~&#|Warning~:[~*~; (in model ~a)~]: ~@? |#~%" #33="~&#|Warning~:[~*~; (in model ~a)~]: ~@? |#~%" si::%dolist-var common-lisp-user::x common-lisp-user::bold-module-settle find common-lisp-user::bold-predict common-lisp-user::buffer apply common-lisp-user::bold-module-max-table assoc common-lisp-user::old-max #:g24954 #:g24952 #:g24953 common-lisp-user::bold-module si::structure-set #:g24955 #:g24956 rplacd common-lisp-user::output-bold-response-data #Y(common-lisp-user::predict-bold-response nil nil (25 40 3 9 0 46 7 25 40 2 77 46 8 26 57 0 60 941 14 9 19 1 10 76 39 42 14 11 15 12 19 0 13 73 39 12 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 18 19 5 19 12 14 11 19 1 20 22 73 38 891 14 9 19 1 10 12 19 1 21 76 39 42 14 11 15 12 19 0 13 73 39 12 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 22 19 5 19 12 14 11 19 1 20 22 73 38 838 10 1 76 39 12 19 0 23 12 9 1000 19 2 24 51 1 10 2 16 25 39 5 10 1 16 25 76 39 45 14 11 15 12 19 0 13 73 39 12 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 26 13 2 13 1 19 7 19 14 11 19 1 20 75 73 36 0 13 2 15 0 19 2 27 13 1 15 0 19 2 27 15 28 19 1 29 45 30 13 0 19 1 31 45 32 75 45 28 13 2 19 1 33 45 34 13 3 19 1 35 45 36 13 4 19 1 37 45 38 13 5 19 1 39 45 40 13 6 19 1 41 12 1 42 17 43 39 10 13 6 19 1 44 16 45 38 6 13 6 19 1 44 45 46 13 7 19 1 41 12 1 42 17 43 39 10 13 7 19 1 47 16 45 38 6 13 7 19 1 47 45 48 13 8 19 1 49 45 50 13 9 19 1 51 45 52 10 5 16 53 76 39 61 13 10 19 1 41 12 1 42 17 43 39 28 13 5 13 5 13 4 19 2 54 12 13 1 13 3 19 1 55 12 19 3 56 12 19 2 24 38 22 13 5 13 5 13 4 19 2 57 12 13 1 13 3 19 1 55 12 19 4 24 45 58 10 5 16 53 76 39 61 13 11 19 1 41 12 1 42 17 43 39 28 13 5 13 6 13 5 19 2 54 12 13 1 13 3 19 1 55 12 19 3 56 12 19 2 24 38 22 13 5 13 6 13 5 19 2 57 12 13 1 13 3 19 1 55 12 19 4 24 45 59 13 14 13 15 19 2 57 12 13 8 19 2 60 39 44 14 11 15 12 19 0 13 73 39 12 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 61 13 8 19 6 19 12 14 11 19 1 20 22 73 38 438 13 15 10 8 17 62 16 53 76 39 196 13 8 13 15 13 8 19 2 63 12 19 2 56 51 15 15 64 19 1 29 47 1 65 45 66 10 1 39 10 13 0 19 1 67 12 19 1 68 39 154 13 0 19 1 67 12 19 1 68 45 69 13 1 19 1 70 76 40 133 10 0 76 40 27 13 0 11 11 17 43 40 19 11 71 40 15 13 0 11 72 17 43 39 7 14 11 11 73 17 74 39 37 14 11 15 75 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 76 13 11 13 18 19 7 19 14 11 19 1 20 38 64 14 11 15 77 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 76 13 11 13 18 19 7 19 14 11 19 1 20 13 0 15 78 19 0 14 16 15 12 9 1 19 2 16 12 19 0 17 12 15 76 13 11 13 18 19 7 19 43 1 43 2 10 11 45 79 75 45 80 38 67 10 1 4 51 0 10 0 4 12 10 0 5 12 13 17 13 16 13 10 13 14 19 1 81 12 13 9 13 8 13 7 13 5 13 3 13 6 13 4 13 2 10 0 4 12 13 11 19 2 82 12 19 14 83 3 12 10 12 3 51 12 10 1 5 51 1 10 1 40 -69 43 2 10 10 45 79 75 45 80 38 122 10 1 4 51 0 10 0 4 45 84 10 1 5 45 32 10 0 39 9 33 54 12 13 0 19 2 85 45 54 13 2 13 17 19 1 86 12 19 2 87 45 88 10 0 76 39 37 13 3 10 1 3 45 89 10 19 45 90 13 1 13 0 19 1 86 3 45 91 13 1 15 92 9 8 13 0 19 4 93 43 3 38 32 13 1 10 0 5 12 19 2 16 39 21 10 0 45 94 10 2 45 95 13 1 10 0 17 96 10 0 43 1 43 1 43 4 10 1 5 51 1 10 1 40 -124 43 2 13 10 13 12 13 15 13 14 19 4 97 10 10 73 43 13 63 29) #29# #1# 27488) si::fset)) #1# 27488) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 43 12 19 2 44 1 0 73 29) #34=#A(t (45) (common-lisp-user::module-demand-times ext::location (defun common-lisp-user::module-demand-times) (#1# . 30670) ext::annotate :lambda-list (&key (common-lisp-user::start 0) common-lisp-user::end) (nil :end :start) common-lisp-user::start common-lisp-user::end common-lisp-user::*meta-processes* common-lisp-user::mps-current *error-output* #30# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "Module-demand-times requires a current meta-process." format finish-output common-lisp-user::meta-p-current-model "Module-demand-times requires a current model." common-lisp-user::mp-time-ms / numberp common-lisp-user::predict-bold-response common-lisp-user::safe-seconds->ms common-lisp-user::bold common-lisp-user::get-module-fct common-lisp-user::bm common-lisp-user::parse-trace-lists-for-bold common-lisp-user::data common-lisp-user::x common-lisp-user::y < #Y(nil nil nil (24 45 35 26 10 0 5 12 13 5 19 2 36 73 40 10 10 0 4 12 13 4 19 2 17 29) #34# #1# 30670) remove-if #Y(nil nil nil (24 45 34 26 10 0 4 12 34 37 12 10 0 5 12 19 2 38 3 73 29) #34# #1# 30670) mapcar reverse "Start and end times for module-demand-times must be numbers, but given ~s,~s." #Y(common-lisp-user::module-demand-times nil nil (28 7 22 40 3 9 0 46 8 22 40 2 77 46 9 14 10 19 1 11 76 39 42 14 12 15 13 19 0 14 73 39 12 19 0 15 16 16 12 9 1 19 2 17 12 19 0 18 12 15 19 19 5 20 12 14 12 19 1 21 22 73 38 167 14 10 19 1 11 12 19 1 22 76 39 42 14 12 15 13 19 0 14 73 39 12 19 0 15 16 16 12 9 1 19 2 17 12 19 0 18 12 15 23 19 5 20 12 14 12 19 1 21 22 73 38 114 10 0 76 39 12 19 0 24 12 9 1000 19 2 25 51 0 10 1 16 26 39 5 10 0 16 26 39 43 13 1 15 27 19 2 28 13 0 15 27 19 2 28 15 29 19 1 30 45 31 13 0 19 1 32 45 33 34 39 12 13 0 19 2 40 16 41 43 2 38 44 14 12 15 13 19 0 14 73 39 12 19 0 15 16 16 12 9 1 19 2 17 12 19 0 18 12 15 42 13 1 13 0 19 7 20 12 14 12 19 1 21 22 73 29) #34# #1# 30670) si::fset)) #1# 30670) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 35 12 19 2 36 1 0 73 29) #35=#A(t (37) (common-lisp-user::module-demand-functions ext::location (defun common-lisp-user::module-demand-functions) (#1# . 31613) ext::annotate :lambda-list (&key (common-lisp-user::start 0) common-lisp-user::end step) (nil :step :end :start) common-lisp-user::start common-lisp-user::end step common-lisp-user::*meta-processes* common-lisp-user::mps-current *error-output* #30# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "Module-demand-functions requires a current meta-process." format finish-output common-lisp-user::meta-p-current-model "Module-demand-functions requires a current model." common-lisp-user::bold common-lisp-user::get-module-fct common-lisp-user::bold-module-inc common-lisp-user::mp-time-ms / numberp common-lisp-user::predict-bold-response common-lisp-user::safe-seconds->ms common-lisp-user::compute-module-demand "Start, end, and step for module-demand-functions must be numbers, but given ~s,~s,~s." #Y(common-lisp-user::module-demand-functions nil nil (28 7 22 40 3 9 0 46 8 22 40 2 77 46 9 22 40 2 77 46 10 14 11 19 1 12 76 39 42 14 13 15 14 19 0 15 73 39 12 19 0 16 16 17 12 9 1 19 2 18 12 19 0 19 12 15 20 19 5 21 12 14 13 19 1 22 22 73 38 175 14 11 19 1 12 12 19 1 23 76 39 42 14 13 15 14 19 0 15 73 39 12 19 0 16 16 17 12 9 1 19 2 18 12 19 0 19 12 15 24 19 5 21 12 14 13 19 1 22 22 73 38 122 10 0 76 39 12 15 25 19 1 26 12 19 1 27 51 0 10 1 76 39 12 19 0 28 12 9 1000 19 2 29 51 1 10 2 16 30 39 11 10 1 16 30 39 5 10 0 16 30 39 27 13 2 15 31 19 2 32 13 1 15 31 19 2 32 13 2 13 1 13 0 77 19 4 33 38 46 14 13 15 14 19 0 15 73 39 12 19 0 16 16 17 12 9 1 19 2 18 12 19 0 19 12 15 34 13 2 13 1 13 0 19 8 21 12 14 13 19 1 22 22 73 29) #35# #1# 31613) si::fset)) #1# 31613) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 36 12 19 2 37 1 0 73 29) #36=#A(t (38) (common-lisp-user::module-demand-proportion ext::location (defun common-lisp-user::module-demand-proportion) (#1# . 32359) ext::annotate :lambda-list (&key (common-lisp-user::start 0) common-lisp-user::end step) (nil :step :end :start) common-lisp-user::start common-lisp-user::end step common-lisp-user::*meta-processes* common-lisp-user::mps-current *error-output* #30# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "Module-demand-proportion requires a current meta-process." format finish-output common-lisp-user::meta-p-current-model "Module-demand-proportion requires a current model." common-lisp-user::bold common-lisp-user::get-module-fct common-lisp-user::bold-module-inc common-lisp-user::mp-time-ms / numberp common-lisp-user::predict-bold-response common-lisp-user::safe-seconds->ms t common-lisp-user::compute-module-demand "Start, end, and step for module-demand-proportion must be numbers, but given ~s,~s,~s." #Y(common-lisp-user::module-demand-proportion nil nil (28 7 22 40 3 9 0 46 8 22 40 2 77 46 9 22 40 2 77 46 10 14 11 19 1 12 76 39 42 14 13 15 14 19 0 15 73 39 12 19 0 16 16 17 12 9 1 19 2 18 12 19 0 19 12 15 20 19 5 21 12 14 13 19 1 22 22 73 38 176 14 11 19 1 12 12 19 1 23 76 39 42 14 13 15 14 19 0 15 73 39 12 19 0 16 16 17 12 9 1 19 2 18 12 19 0 19 12 15 24 19 5 21 12 14 13 19 1 22 22 73 38 123 10 0 76 39 12 15 25 19 1 26 12 19 1 27 51 0 10 1 76 39 12 19 0 28 12 9 1000 19 2 29 51 1 10 2 16 30 39 11 10 1 16 30 39 5 10 0 16 30 39 28 13 2 15 31 19 2 32 13 1 15 31 19 2 32 13 2 13 1 13 0 14 33 19 4 34 38 46 14 13 15 14 19 0 15 73 39 12 19 0 16 16 17 12 9 1 19 2 18 12 19 0 19 12 15 35 13 2 13 1 13 0 19 8 21 12 14 13 19 1 22 22 73 29) #36# #1# 32359) si::fset)) #1# 32359) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 20 12 19 2 21 1 0 73 29) #37=#A(t (22) (common-lisp-user::compute-module-demand ext::location (defun common-lisp-user::compute-module-demand) (#1# . 33104) ext::annotate :lambda-list (common-lisp-user::start common-lisp-user::end step common-lisp-user::percent) common-lisp-user::start common-lisp-user::end step common-lisp-user::percent common-lisp-user::bold common-lisp-user::get-module-fct common-lisp-user::bm common-lisp-user::parse-trace-lists-for-bold common-lisp-user::data si::%dolist-var common-lisp-user::x common-lisp-user::module-demand-internal common-lisp-user::output-module-demand-data #Y(common-lisp-user::compute-module-demand nil nil (24 45 7 24 45 8 24 45 9 24 45 10 26 15 11 19 1 12 45 13 13 0 19 1 14 45 15 75 45 11 10 1 45 16 75 45 17 38 37 10 1 4 51 0 10 0 4 12 10 0 5 12 13 6 13 8 13 7 13 5 19 5 18 3 12 10 2 3 51 2 10 1 5 51 1 10 1 40 -39 43 2 13 0 13 2 13 6 13 5 13 4 19 5 19 10 0 73 43 3 29) #37# #1# 33104) si::fset)) #1# 33104) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 56 12 19 2 57 1 0 73 29) #38=#A(t (58) (common-lisp-user::module-demand-internal ext::location (defun common-lisp-user::module-demand-internal) (#1# . 33457) ext::annotate :lambda-list (common-lisp-user::times step common-lisp-user::start common-lisp-user::end common-lisp-user::percent) common-lisp-user::times step common-lisp-user::start common-lisp-user::end common-lisp-user::percent - ceiling :initial-element make-list common-lisp-user::results si::%dolist-var common-lisp-user::x = >= < > max min common-lisp-user::e common-lisp-user::s floor #:g25034 #:g25035 #:g25037 nth + #:g25036 nthcdr rplaca #:g25038 #:g25039 #:g25040 common-lisp-user::index list common-lisp-user::ending #:g25048 #:g25049 1+ * #:g25051 #:g25050 #:g25052 #:g25053 #:g25054 second zerop / #Y(nil nil nil (24 45 18 26 13 0 13 5 19 2 53 12 9 1000 19 2 53 29) #38# #1# 33457) mapcar #Y(common-lisp-user::module-demand-internal nil nil (24 45 7 24 45 8 24 45 9 24 45 10 24 45 11 26 13 1 13 2 19 2 12 12 13 3 19 2 13 12 14 14 9 0 19 3 15 45 16 10 5 45 17 75 45 18 38 396 10 1 4 51 0 10 0 4 12 10 0 5 12 19 2 19 39 21 10 0 4 12 13 5 19 2 20 39 10 10 0 4 12 13 4 19 2 21 40 21 10 0 5 12 13 5 19 2 22 39 10 10 0 4 12 13 4 19 2 21 39 329 9 0 10 0 4 12 13 5 19 2 12 12 19 2 23 12 10 0 5 12 13 5 19 2 12 12 13 4 13 5 19 2 12 12 19 2 24 12 46 25 46 26 10 2 4 12 10 2 5 12 19 2 19 39 89 10 5 39 49 13 0 13 8 19 2 27 45 28 10 5 45 29 8 1 45 30 13 2 10 1 17 31 12 13 0 19 2 32 45 33 13 3 10 2 17 34 12 10 0 17 35 10 0 43 4 38 35 13 0 13 8 19 2 27 45 36 10 5 45 37 8 1 45 38 13 2 10 1 17 34 12 10 0 17 35 10 0 43 1 43 2 38 184 13 0 13 8 19 2 27 45 39 15 40 13 2 13 9 19 2 27 69 21 23 45 41 38 127 10 7 39 88 10 1 45 42 10 7 45 43 9 1000 13 5 10 3 16 44 12 13 12 19 2 45 12 19 2 24 12 19 2 45 12 9 1000 13 4 13 3 13 12 19 2 45 12 19 2 23 12 19 2 45 12 19 2 12 45 46 13 2 10 1 17 31 12 13 0 19 2 32 45 47 13 3 10 2 17 34 12 10 0 17 35 10 0 43 4 38 30 10 1 45 48 10 7 45 49 8 1 45 50 13 2 10 1 17 34 12 10 0 17 35 10 0 43 1 43 2 10 1 16 44 51 1 10 0 16 51 16 52 39 12 13 1 10 0 4 12 19 2 19 38 10 13 1 10 0 4 12 19 2 22 39 -155 43 2 43 2 10 1 5 51 1 10 1 40 -398 43 2 10 1 39 11 34 54 12 13 0 19 2 55 38 4 10 0 73 43 1 29) #38# #1# 33457) si::fset)) #1# 33457) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 43 12 19 2 44 1 0 73 29) #39=#A(t (45) (common-lisp-user::output-module-demand-data ext::location (defun common-lisp-user::output-module-demand-data) (#1# . 34566) ext::annotate :lambda-list (common-lisp-user::data common-lisp-user::bm common-lisp-user::start common-lisp-user::end step) common-lisp-user::data common-lisp-user::bm common-lisp-user::start common-lisp-user::end step common-lisp-user::bold-module-v common-lisp-user::bold-module-cmdt time common-lisp-user::times common-lisp-user::x + > reverse mapcar list apply common-lisp-user::transposed max symbol-name length #Y(nil nil nil (24 45 16 26 10 0 16 25 16 26 29) #39# #1# 34566) common-lisp-user::max-len common-lisp-user::printing-module common-lisp-user::get-module-fct #:g25068 #:g25067 common-lisp-user::printing-module-suppress-cmds common-lisp-user::printing-module-c common-lisp-user::act-r-output-stream #40="~&~@?~%" "~?" "~~{~~~d,@a~~}" format #:g25070 #:g25069 "~~{~~{~~~d,3f~~}~~%~~}" #Y(common-lisp-user::output-module-demand-data nil nil (24 45 7 24 45 8 24 45 9 24 45 10 24 45 11 26 10 4 39 13 13 3 19 1 12 39 6 13 3 19 1 13 73 39 214 1 14 6 1 45 15 10 3 45 16 38 17 13 0 10 1 3 51 1 13 0 13 2 19 2 17 51 0 13 0 13 3 19 2 18 39 -24 10 1 16 19 12 10 6 3 51 6 43 2 15 20 15 21 13 4 19 3 22 45 23 9 2 15 24 34 27 12 10 0 4 12 19 2 20 12 19 2 22 12 19 2 17 45 28 15 29 19 1 30 47 1 31 45 32 10 1 39 18 13 0 19 1 33 76 39 10 13 0 19 1 34 12 19 1 35 39 29 13 0 19 1 34 12 19 1 35 12 15 36 15 37 77 15 38 13 2 19 3 39 12 13 3 19 5 39 43 2 15 29 19 1 30 47 1 40 45 41 10 1 39 18 13 0 19 1 33 76 39 10 13 0 19 1 34 12 19 1 35 73 39 29 13 0 19 1 34 12 19 1 35 12 15 36 77 15 42 13 2 19 3 39 12 10 3 5 12 19 4 39 43 2 43 2 29) #39# #1# 34566) si::fset)) #1# 34566) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 45 12 19 2 46 1 0 73 29) #41=#A(t (47) (common-lisp-user::output-bold-response-data ext::location (defun common-lisp-user::output-bold-response-data) (#1# . 35159) ext::annotate :lambda-list (common-lisp-user::data common-lisp-user::bm common-lisp-user::start common-lisp-user::end) common-lisp-user::data common-lisp-user::bm common-lisp-user::start common-lisp-user::end common-lisp-user::bold-module-v common-lisp-user::bold-module-cmdt time common-lisp-user::times common-lisp-user::bold-module-inc common-lisp-user::inc / + common-lisp-user::x > reverse mapcar list apply common-lisp-user::transposed max symbol-name length #Y(nil nil nil (24 45 19 26 10 0 16 27 16 28 29) #41# #1# 35159) common-lisp-user::max-len common-lisp-user::printing-module common-lisp-user::get-module-fct #:g25084 #:g25083 common-lisp-user::printing-module-suppress-cmds common-lisp-user::printing-module-c common-lisp-user::act-r-output-stream #40# "~?" "~~{~~~d,@a~~}" format #:g25086 #:g25085 "~~{~~{~~~d,3f~~}~~%~~}" #Y(common-lisp-user::output-bold-response-data nil nil (24 45 7 24 45 8 24 45 9 24 45 10 26 10 3 39 13 13 2 19 1 11 39 6 13 2 19 1 12 73 39 232 1 13 6 1 45 14 13 3 19 1 15 45 16 13 3 13 0 9 2 19 2 17 12 19 2 18 45 19 38 17 13 0 10 2 3 51 2 13 0 13 1 19 2 18 51 0 13 0 13 3 19 2 20 39 -24 10 2 16 21 12 10 6 3 51 6 43 3 15 22 15 23 13 3 19 3 24 45 25 9 2 15 26 34 29 12 10 0 4 12 19 2 22 12 19 2 24 12 19 2 18 45 30 15 31 19 1 32 47 1 33 45 34 10 1 39 18 13 0 19 1 35 76 39 10 13 0 19 1 36 12 19 1 37 39 29 13 0 19 1 36 12 19 1 37 12 15 38 15 39 77 15 40 13 2 19 3 41 12 13 3 19 5 41 43 2 15 31 19 1 32 47 1 42 45 43 10 1 39 18 13 0 19 1 35 76 39 10 13 0 19 1 36 12 19 1 37 73 39 29 13 0 19 1 36 12 19 1 37 12 15 38 77 15 44 13 2 19 3 41 12 10 3 5 12 19 4 41 43 2 43 2 29) #41# #1# 35159) si::fset)) #1# 35159) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 10 12 19 2 11 1 0 73 29) #42=#A(t (12) (common-lisp-user::create-bold-module ext::location (defun common-lisp-user::create-bold-module) (#1# . 35807) ext::annotate :lambda-list (common-lisp-user::name) common-lisp-user::name common-lisp-user::make-bold-module common-lisp-user::bm #Y(common-lisp-user::create-bold-module nil nil (24 45 7 26 19 0 8 45 9 10 0 73 43 1 29) #42# #1# 35807) si::fset)) #1# 35807) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 12 12 19 2 13 1 0 73 29) #43=#A(t (14) (common-lisp-user::reset-bold-module ext::location (defun common-lisp-user::reset-bold-module) (#1# . 35916) ext::annotate :lambda-list (common-lisp-user::module) common-lisp-user::module #:g25089 #:g25090 common-lisp-user::bold-module si::structure-set #Y(common-lisp-user::reset-bold-module nil nil (24 45 7 26 10 0 45 8 75 45 9 13 1 15 10 9 8 13 0 19 4 11 43 1 43 1 29) #43# #1# 35916) si::fset)) #1# 35916) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 99 12 19 2 100 1 0 73 29) #44=#A(t (101) (common-lisp-user::handle-bold-params ext::location (defun common-lisp-user::handle-bold-params) (#1# . 35997) ext::annotate :lambda-list (common-lisp-user::instance common-lisp-user::param) common-lisp-user::instance common-lisp-user::param consp :buffer-trace-colors #:g25138 #:g25139 common-lisp-user::bold-module si::structure-set :v #:g25140 #:g25141 :cmdt #:g25142 #:g25143 :traced-buffers #:g25144 #:g25145 :bold-scale #:g25146 #:g25147 :bold-exp #:g25148 #:g25149 :bold-settle #:g25150 #:g25151 :neg-bold-exp #:g25152 #:g25153 :neg-bold-scale #:g25154 #:g25155 :bold-positive #:g25156 #:g25157 :bold-negative #:g25158 #:g25159 :bold-inc #:g25160 #:g25161 :point-predict #:g25162 #:g25163 :bold-param-mode common-lisp-user::act-r eq common-lisp-user::bold-module-exp = common-lisp-user::bold-module-neg-exp #:g25164 #:g25165 #:g25166 #:g25167 common-lisp-user::spm #:g25168 #:g25169 #:g25170 #:g25171 #:g25172 #:g25173 :save-bold-data #:g25174 #:g25175 common-lisp-user::printing-module common-lisp-user::get-module-fct #:g25177 #:g25176 common-lisp-user::printing-module-suppress-cmds #:g25178 #:g25179 t #:g25180 (setf common-lisp-user::printing-module-suppress-cmds) (:save-buffer-trace) common-lisp-user::sgp-fct (:save-buffer-trace t) #:g25181 #:g25182 (setf common-lisp-user::printing-module-suppress-cmds) :save-buffer-trace #:g25183 #:g25184 common-lisp-user::bold-module-scale common-lisp-user::bold-module-neg-scale common-lisp-user::bold-module-c1 common-lisp-user::bold-module-c2 common-lisp-user::bold-module-settle common-lisp-user::bold-module-inc common-lisp-user::bold-module-point common-lisp-user::bold-module-mode common-lisp-user::bold-module-save-data #Y(common-lisp-user::handle-bold-params nil nil (24 45 7 24 45 8 26 10 0 16 9 39 729 10 0 4 42 10 27 10 1 45 11 10 1 5 45 12 13 1 15 13 9 15 13 0 19 4 14 43 1 43 1 38 695 42 15 27 10 1 45 16 10 1 5 45 17 13 1 15 13 9 5 13 0 19 4 14 43 1 43 1 38 666 42 18 27 10 1 45 19 10 1 5 45 20 13 1 15 13 9 6 13 0 19 4 14 43 1 43 1 38 637 42 21 27 10 1 45 22 10 1 5 45 23 13 1 15 13 9 7 13 0 19 4 14 43 1 43 1 38 608 42 24 27 10 1 45 25 10 1 5 45 26 13 1 15 13 9 0 13 0 19 4 14 43 1 43 1 38 579 42 27 27 10 1 45 28 10 1 5 45 29 13 1 15 13 9 1 13 0 19 4 14 43 1 43 1 38 550 42 30 27 10 1 45 31 10 1 5 45 32 13 1 15 13 9 3 13 0 19 4 14 43 1 43 1 38 521 42 33 27 10 1 45 34 10 1 5 45 35 13 1 15 13 9 11 13 0 19 4 14 43 1 43 1 38 492 42 36 27 10 1 45 37 10 1 5 45 38 13 1 15 13 9 12 13 0 19 4 14 43 1 43 1 38 463 42 39 27 10 1 45 40 10 1 5 45 41 13 1 15 13 9 9 13 0 19 4 14 43 1 43 1 38 434 42 42 27 10 1 45 43 10 1 5 45 44 13 1 15 13 9 10 13 0 19 4 14 43 1 43 1 38 405 42 45 27 10 1 45 46 10 1 5 45 47 13 1 15 13 9 2 13 0 19 4 14 43 1 43 1 38 376 42 48 27 10 1 45 49 10 1 5 45 50 13 1 15 13 9 4 13 0 19 4 14 43 1 43 1 38 347 42 51 193 10 0 5 12 1 52 17 53 39 25 13 1 19 1 54 12 9 6 19 2 55 39 12 13 1 19 1 56 12 9 16 19 2 55 39 49 10 1 45 57 8 5 45 58 13 1 15 13 9 1 13 0 19 4 14 43 1 43 1 10 1 45 59 8 15 45 60 13 1 15 13 9 11 13 0 19 4 14 43 1 43 1 38 83 10 0 5 12 1 61 17 53 39 25 13 1 19 1 54 12 9 5 19 2 55 39 12 13 1 19 1 56 12 9 15 19 2 55 39 47 10 1 45 62 8 6 45 63 13 1 15 13 9 1 13 0 19 4 14 43 1 43 1 10 1 45 64 8 16 45 65 13 1 15 13 9 11 13 0 19 4 14 43 1 43 1 10 1 45 66 10 1 5 45 67 13 1 15 13 9 13 13 0 19 4 14 43 1 43 1 38 152 42 68 118 10 1 45 69 10 1 5 45 70 13 1 15 13 9 14 13 0 19 4 14 43 1 43 1 10 0 5 73 39 86 15 71 19 1 72 47 1 73 45 74 10 1 73 39 69 13 0 19 1 75 45 76 10 1 45 77 11 78 45 79 13 0 13 1 33 80 18 2 43 1 43 1 64 17 15 81 19 1 82 4 76 73 39 6 15 83 19 1 82 65 10 1 45 84 10 1 45 85 13 0 13 1 33 86 18 2 43 1 43 1 66 43 1 43 2 38 32 42 87 27 10 1 45 88 10 1 5 45 89 13 1 15 13 9 14 13 0 19 4 14 43 1 43 1 38 3 75 73 38 115 10 0 42 24 8 13 1 19 1 90 38 103 42 27 8 13 1 19 1 54 38 93 42 33 8 13 1 19 1 56 38 83 42 36 8 13 1 19 1 91 38 73 42 39 8 13 1 19 1 92 38 63 42 42 8 13 1 19 1 93 38 53 42 30 8 13 1 19 1 94 38 43 42 45 8 13 1 19 1 95 38 33 42 48 8 13 1 19 1 96 38 23 42 51 8 13 1 19 1 97 38 13 42 68 8 13 1 19 1 98 38 3 75 73 29) #44# #1# 35997) si::fset)) #1# 35997) #Y(si::bytecodes nil nil (15 0 77 14 1 14 2 77 19 3 3 12 14 4 14 2 77 19 3 3 12 14 5 14 2 77 19 3 3 12 14 6 14 2 77 19 3 3 12 14 7 14 2 77 19 3 3 12 14 8 14 9 1 14 12 14 15 15 16 14 17 15 11 14 18 15 19 19 9 3 12 14 20 14 9 15 21 14 15 15 22 14 17 15 23 14 18 15 24 19 9 3 12 14 25 14 9 15 26 14 15 15 27 14 17 9 5 14 18 15 28 19 9 3 12 14 29 14 9 15 21 14 15 15 30 14 17 15 23 14 18 15 31 19 9 3 12 14 32 14 9 15 26 14 15 15 33 14 17 9 15 14 18 15 34 19 9 3 12 14 35 14 9 15 36 14 15 15 37 14 17 9 6 14 18 15 38 19 9 3 12 14 39 14 9 15 36 14 15 15 40 14 17 9 1 14 18 15 41 19 9 3 12 14 42 14 9 15 43 14 15 15 44 14 17 9 2 14 18 15 45 19 9 3 12 14 46 14 9 15 43 14 15 15 47 14 17 9 40 14 18 15 48 19 9 3 12 14 49 14 9 1 56 12 14 15 15 57 14 17 1 58 6 1 12 14 18 15 59 19 9 3 12 14 60 14 9 15 61 14 15 15 62 14 17 77 14 18 15 63 19 9 3 6 16 12 14 64 15 65 14 66 15 67 14 68 33 69 12 14 70 15 71 14 18 15 72 19 13 73 29) #45=#A(t (74) (common-lisp-user::bold :v :owner common-lisp-user::define-parameter :buffer-trace-colors :cmdt :traced-buffers :save-buffer-trace :bold-param-mode :valid-test common-lisp-user::x common-lisp-user::act-r eq common-lisp-user::spm #Y(nil nil nil (24 45 10 26 13 0 1 11 17 12 73 40 7 13 0 1 13 17 12 29) #45# #1# 39009) :warning "either act-r or spm" :default-value :documentation "Set how exp and scale parameters determine the hemodynamic response curve." :bold-scale numberp "a number" 1.0 "Scale parameter for computing the BOLD response." :bold-exp integerp "an integer" "Exponent parameter for computing the BOLD response." :neg-bold-scale "a number" "Scale parameter for computing a negative component of the BOLD response." :neg-bold-exp "an integer" "Exponent parameter for computing a negative component of the BOLD response." :bold-positive common-lisp-user::nonneg "a non-negative number" "Factor for the positive component of the hemodynamic response curve." :bold-negative "a non-negative number" "Factor for the negative component of the hemodynamic response curve." :bold-inc common-lisp-user::posnum "a positive number" "Time increment in seconds for computing the BOLD response." :bold-settle "a positive number" "Time window in seconds for computing the BOLD response." :point-predict listp common-lisp-user::y common-lisp-user::buffers find #Y(nil nil nil (24 45 51 26 13 0 19 0 52 12 19 2 53 29) #45# #1# 39009) every #Y(nil nil nil (24 45 10 26 10 0 16 50 73 39 9 34 54 12 13 0 19 2 55 29) #45# #1# 39009) "a list of buffer names" common-lisp-user::goal "List of buffers for which the point based computation should be used to compute the BOLD response." :save-bold-data common-lisp-user::tornil "T or nil" "Can be used instead of :save-buffer-trace to enable the saving of module activity." :creation common-lisp-user::create-bold-module :reset common-lisp-user::reset-bold-module :params common-lisp-user::handle-bold-params :version "3.1" "A module to produce BOLD response predictions from buffer request activity." common-lisp-user::define-module-fct)) #1# 39009) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 13 12 19 2 14 1 0 73 29) #46=#A(t (15) (common-lisp-user::bold-data-buffer-max ext::location (defun common-lisp-user::bold-data-buffer-max) (#1# . 41951) ext::annotate :lambda-list (common-lisp-user::buffer) common-lisp-user::buffer common-lisp-user::bold common-lisp-user::get-module-fct common-lisp-user::bm common-lisp-user::bold-module-max-table assoc #Y(common-lisp-user::bold-data-buffer-max nil nil (24 45 7 26 15 8 19 1 9 45 10 13 1 13 0 19 1 11 12 19 2 12 5 73 43 1 29) #46# #1# 41951) si::fset)) #1# 41951) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 77 19 4 4 15 0 1 8 12 19 2 9 1 0 73 29) #47=#A(t (10) (common-lisp-user::get-bold-module-data ext::location (defun common-lisp-user::get-bold-module-data) (#1# . 42075) ext::annotate :lambda-list common-lisp-user::bold common-lisp-user::get-module-fct #Y(common-lisp-user::get-bold-module-data nil nil (26 15 6 19 1 7 29) #47# #1# 42075) si::fset)) #1# 42075) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 16 12 19 2 17 1 0 73 29) #48=#A(t (18) (common-lisp-user::save-bold-data-info ext::location (defun common-lisp-user::save-bold-data-info) (#1# . 42288) ext::annotate :lambda-list (common-lisp-user::data stream) common-lisp-user::data stream #:g25187 common-lisp-user::mp-time-ms #:g25188 common-lisp-user::bold-module si::structure-set :stream write #Y(common-lisp-user::save-bold-data-info nil nil (24 45 7 24 45 8 26 10 1 45 9 19 0 10 45 11 13 1 15 12 9 16 13 0 19 4 13 43 1 43 1 13 1 14 14 13 0 19 3 15 29) #48# #1# 42288) si::fset)) #1# 42288) #Y(si::bytecodes nil nil (1 0 16 1 8 100 52 0 15 0 15 2 15 3 15 4 19 4 5 1 0 73 29) #A(t (6) (common-lisp-user::*pixels-per-second-for-bold* si::*make-special ext::location (defparameter common-lisp-user::*pixels-per-second-for-bold*) (#1# . 42406) ext::annotate)) #1# 42406) #Y(si::bytecodes nil nil (1 0 16 1 8 400 52 0 15 0 15 2 15 3 15 4 19 4 5 1 0 73 29) #A(t (6) (common-lisp-user::*bold-vertical-scale* si::*make-special ext::location (defparameter common-lisp-user::*bold-vertical-scale*) (#1# . 42455) ext::annotate)) #1# 42455) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 10 14 3 15 4 19 2 5 52 0 15 0 15 6 15 7 15 8 19 4 9 1 0 73 29) #A(t (10) (common-lisp-user::*bold-data-environment-cache* si::*make-special boundp :test equalp make-hash-table ext::location (defvar common-lisp-user::*bold-data-environment-cache*) (#1# . 42496) ext::annotate)) #1# 42496) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 13 12 19 2 14 1 0 73 29) #49=#A(t (15) (common-lisp-user::bold-tool-buffer-list ext::location (defun common-lisp-user::bold-tool-buffer-list) (#1# . 42567) ext::annotate :lambda-list (common-lisp-user::key) common-lisp-user::key :save-bold-data common-lisp-user::get-history-information common-lisp-user::data common-lisp-user::bold-module-buffers common-lisp-user::buffers #Y(common-lisp-user::bold-tool-buffer-list nil nil (24 45 7 26 14 8 13 0 19 2 9 45 10 10 0 39 8 13 0 19 1 11 38 4 19 0 12 43 1 29) #49# #1# 42567) si::fset)) #1# 42567) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 14 12 19 2 15 1 0 73 29) #50=#A(t (16) (common-lisp-user::cache-bold-data ext::location (defun common-lisp-user::cache-bold-data) (#1# . 42732) ext::annotate :lambda-list (common-lisp-user::dialog common-lisp-user::key) common-lisp-user::dialog common-lisp-user::key common-lisp-user::*bold-data-environment-cache* gethash common-lisp-user::it common-lisp-user::predict-bold-response-for-environment si::hash-set #Y(common-lisp-user::cache-bold-data nil nil (24 45 7 24 45 8 26 13 1 14 9 19 2 10 45 11 10 0 39 6 10 0 73 38 14 13 2 14 9 13 1 19 1 12 12 19 3 13 43 1 29) #50# #1# 42732) si::fset)) #1# 42732) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 11 12 19 2 12 1 0 73 29) #51=#A(t (13) (common-lisp-user::uncache-bold-data ext::location (defun common-lisp-user::uncache-bold-data) (#1# . 42941) ext::annotate :lambda-list (common-lisp-user::dialog) common-lisp-user::dialog common-lisp-user::*bold-data-environment-cache* remhash common-lisp-user::gone #Y(common-lisp-user::uncache-bold-data nil nil (24 45 7 26 13 0 11 8 17 9 1 10 6 1 73 29) #51# #1# 42941) si::fset)) #1# 42941) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 97 12 19 2 98 1 0 73 29) #52=#A(t (99) (common-lisp-user::predict-bold-response-for-environment ext::location (defun common-lisp-user::predict-bold-response-for-environment) (#1# . 43041) ext::annotate :lambda-list (common-lisp-user::key) common-lisp-user::key :save-bold-data common-lisp-user::get-history-information common-lisp-user::bm :save-buffer-trace common-lisp-user::buffer-trace common-lisp-user::start common-lisp-user::bold-module-end numberp common-lisp-user::it common-lisp-user::mp-time-ms common-lisp-user::end common-lisp-user::parse-trace-lists-for-bold common-lisp-user::data common-lisp-user::bold common-lisp-user::bold-module-point common-lisp-user::point common-lisp-user::bold-module-inc common-lisp-user::inc common-lisp-user::bold-module-c1 common-lisp-user::c1 common-lisp-user::bold-module-c2 common-lisp-user::c2 common-lisp-user::bold-module-mode common-lisp-user::spm eq common-lisp-user::bold-module-exp 1- common-lisp-user::ap common-lisp-user::bold-module-neg-exp common-lisp-user::an common-lisp-user::bold-module-scale common-lisp-user::bp common-lisp-user::bold-module-neg-scale common-lisp-user::bn zerop max common-lisp-user::bold_factorial * / - common-lisp-user::pos-factor common-lisp-user::neg-factor < *error-output* #30# common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "Sample time too short for BOLD predictions - must be at least :bold-inc seconds (currently ~s)" format finish-output mod floor common-lisp-user::printing-module common-lisp-user::get-module-fct #:g25213 #:g25212 common-lisp-user::printing-module-v common-lisp-user::act-r-output-stream #:g25214 common-lisp-user::printing-module-model-warnings common-lisp-user::*one-stream-hack* t *standard-output* eql #31# "Start time should be a multiple of :bold-inc (~S).  Using start time of ~S." #32# #33# si::%dolist-var common-lisp-user::x common-lisp-user::bold-module-settle find common-lisp-user::bold-predict common-lisp-user::buffer apply common-lisp-user::bold-module-max-table assoc common-lisp-user::old-max #:g25224 #:g25222 #:g25223 common-lisp-user::bold-module si::structure-set #:g25225 #:g25226 rplacd #Y(common-lisp-user::predict-bold-response-for-environment nil nil (24 45 7 26 14 8 13 0 19 2 9 45 10 14 11 13 1 19 2 9 4 45 12 8 0 45 13 13 2 19 1 14 16 15 45 16 10 0 39 8 13 3 19 1 14 38 4 19 0 17 43 1 45 18 13 3 13 2 13 0 19 3 19 45 20 75 45 21 13 5 19 1 22 45 23 13 6 19 1 24 45 25 13 7 19 1 26 45 27 13 8 19 1 28 45 29 13 9 19 1 30 12 1 31 17 32 39 10 13 9 19 1 33 16 34 38 6 13 9 19 1 33 45 35 13 10 19 1 30 12 1 31 17 32 39 10 13 10 19 1 36 16 34 38 6 13 10 19 1 36 45 37 13 11 19 1 38 45 39 13 12 19 1 40 45 41 10 5 16 42 76 39 61 13 13 19 1 30 12 1 31 17 32 39 28 13 5 13 5 13 4 19 2 43 12 13 1 13 3 19 1 44 12 19 3 45 12 19 2 46 38 22 13 5 13 5 13 4 19 2 47 12 13 1 13 3 19 1 44 12 19 4 46 45 48 10 5 16 42 76 39 61 13 14 19 1 30 12 1 31 17 32 39 28 13 5 13 6 13 5 19 2 43 12 13 1 13 3 19 1 44 12 19 3 45 12 19 2 46 38 22 13 5 13 6 13 5 19 2 47 12 13 1 13 3 19 1 44 12 19 4 46 45 49 13 12 13 13 19 2 47 12 9 1000 13 8 19 2 45 12 19 2 50 39 44 14 51 15 52 19 0 53 73 39 12 19 0 54 16 55 12 9 1 19 2 56 12 19 0 57 12 15 58 13 8 19 6 59 12 14 51 19 1 60 22 73 38 433 13 13 10 8 17 61 16 42 76 39 196 13 8 13 13 13 8 19 2 62 12 19 2 45 51 13 15 63 19 1 64 47 1 65 45 66 10 1 39 10 13 0 19 1 67 12 19 1 68 39 154 13 0 19 1 67 12 19 1 68 45 69 13 1 19 1 70 76 40 133 10 0 76 40 27 13 0 11 51 17 32 40 19 11 71 40 15 13 0 11 72 17 32 39 7 14 51 11 73 17 74 39 37 14 51 15 75 19 0 54 16 55 12 9 1 19 2 56 12 19 0 57 12 15 76 13 11 13 16 19 7 59 14 51 19 1 60 38 64 14 51 15 77 19 0 54 16 55 12 9 1 19 2 56 12 19 0 57 12 15 76 13 11 13 16 19 7 59 14 51 19 1 60 13 0 15 78 19 0 54 16 55 12 9 1 19 2 56 12 19 0 57 12 15 76 13 11 13 16 19 7 59 43 1 43 2 10 11 45 79 75 45 80 38 73 10 1 4 51 0 10 0 4 12 10 0 5 12 13 15 13 14 9 1000 19 2 46 12 13 10 13 17 19 1 81 12 13 9 13 8 13 7 13 5 13 3 13 6 13 4 13 2 10 0 4 12 13 11 19 2 82 12 19 14 83 3 12 10 12 3 51 12 10 1 5 51 1 10 1 40 -75 43 2 10 10 45 79 75 45 80 38 122 10 1 4 51 0 10 0 4 45 84 10 1 5 45 20 10 0 39 9 33 43 12 13 0 19 2 85 45 43 13 2 13 20 19 1 86 12 19 2 87 45 88 10 0 76 39 37 13 3 10 1 3 45 89 10 22 45 90 13 1 13 0 19 1 86 3 45 91 13 1 15 92 9 8 13 0 19 4 93 43 3 38 32 13 1 10 0 5 12 19 2 56 39 21 10 0 45 94 10 2 45 95 13 1 10 0 17 96 10 0 43 1 43 1 43 4 10 1 5 51 1 10 1 40 -124 43 2 10 10 73 43 16 29) #52# #1# 43041) si::fset)) #1# 43041) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 93 12 19 2 94 1 0 73 29) #53=#A(t (95) (common-lisp-user::parse-bold-predictions-for-graph ext::location (defun common-lisp-user::parse-bold-predictions-for-graph) (#1# . 45842) ext::annotate :lambda-list (common-lisp-user::chart common-lisp-user::key common-lisp-user::buffer common-lisp-user::local common-lisp-user::start common-lisp-user::end) common-lisp-user::chart common-lisp-user::key common-lisp-user::buffer common-lisp-user::local common-lisp-user::start common-lisp-user::end common-lisp-user::cache-bold-data common-lisp-user::d :save-bold-data common-lisp-user::get-history-information common-lisp-user::module length > common-lisp-user::normalize-bold-data-for-env-local common-lisp-user::normalize-bold-data-for-env common-lisp-user::all-data common-lisp-user::bold-module-inc common-lisp-user::time-inc cdar common-lisp-user::dummy-data common-lisp-user::data = floor min common-lisp-user::s-index common-lisp-user::e-index * common-lisp-user::s-time >= common-lisp-user::text "No data available for time requested" "#f00" common-lisp-user::size - 1+ common-lisp-user::*pixels-per-second-for-bold* + round common-lisp-user::*bold-vertical-scale* common-lisp-user::line "#000" "#000" si::%dotimes-var common-lisp-user::i / "#000" common-lisp-user::text_y "~,1f" 0.1 format "#000" < "#000" common-lisp-user::text_x "~,2f" "#000" :key car find common-lisp-user::bd subseq common-lisp-user::buffer-data common-lisp-user::bold-module-buffers common-lisp-user::b listp common-lisp-user::buffers common-lisp-user::bold-module-colors common-lisp-user::colors common-lisp-user::*gt-colors* common-lisp-user::create-color-list common-lisp-user::color-list position nth common-lisp-user::cur-color common-lisp-user::color butlast time common-lisp-user::inc common-lisp-user::p2 common-lisp-user::p1 "No Data Available" "#f00" common-lisp-user::result si::%dolist-var common-lisp-user::x "~{~S ~}" #Y(common-lisp-user::parse-bold-predictions-for-graph nil nil (24 45 7 24 45 8 24 45 9 24 45 10 24 45 11 24 45 12 26 13 5 13 4 19 2 13 45 14 14 15 13 5 19 2 16 45 17 10 1 4 16 18 12 9 1 19 2 19 39 17 10 4 39 8 13 1 19 1 20 38 6 13 1 19 1 21 45 22 13 1 19 1 23 45 24 10 1 16 25 45 26 75 45 27 13 7 9 -1 19 2 28 39 5 8 0 38 17 13 7 13 2 19 2 29 12 10 1 16 18 12 19 2 30 45 31 13 7 9 -1 19 2 28 39 7 10 2 16 18 38 17 13 7 13 3 19 2 29 12 10 2 16 18 12 19 2 30 45 32 13 1 13 4 19 2 33 45 34 13 2 13 1 19 2 35 39 21 15 36 15 37 9 40 9 40 1 38 6 5 12 10 3 3 51 3 38 727 10 12 76 39 431 15 39 9 50 13 1 13 2 19 2 40 16 41 12 13 5 14 42 19 3 33 12 19 2 43 12 19 1 44 12 14 45 9 40 19 2 43 6 3 12 10 3 3 51 3 15 46 9 40 9 20 9 40 9 20 14 45 19 2 43 12 1 47 6 6 12 10 3 3 51 3 15 46 9 40 9 20 14 45 19 2 43 12 9 40 13 1 13 2 19 2 40 12 13 5 14 42 19 3 33 12 19 2 43 12 19 1 44 12 9 20 14 45 19 2 43 12 1 48 6 6 12 10 3 3 51 3 8 11 45 49 8 0 45 50 38 130 15 46 9 35 9 20 14 45 19 2 43 12 13 0 14 45 9 10 19 2 51 12 19 2 33 12 19 2 40 12 9 45 9 20 14 45 19 2 43 12 13 0 14 45 9 10 19 2 51 12 19 2 33 12 19 2 40 12 1 52 6 6 12 10 5 3 51 5 15 53 77 15 54 13 0 15 55 19 2 33 12 19 3 56 12 9 35 9 20 14 45 19 2 43 12 13 0 14 45 9 10 19 2 51 12 19 2 33 12 19 2 40 12 1 57 6 5 12 10 5 3 51 5 10 0 16 41 51 0 13 0 13 1 19 2 58 40 -137 43 2 13 1 13 2 19 2 40 16 41 45 49 8 0 45 50 38 124 15 46 9 40 13 0 13 7 14 42 19 3 33 12 19 2 43 12 9 15 14 45 19 2 43 12 9 40 13 0 13 7 14 42 19 3 33 12 19 2 43 12 9 25 14 45 19 2 43 12 1 59 6 6 12 10 5 3 51 5 15 60 77 15 61 13 2 13 0 13 7 19 2 33 12 19 2 43 12 19 3 56 12 9 40 13 0 13 7 14 42 19 3 33 12 19 2 43 12 9 25 14 45 19 2 43 12 1 62 6 5 12 10 5 3 51 5 10 0 16 41 51 0 13 0 13 1 19 2 58 40 -131 43 2 38 292 13 12 13 6 14 63 33 64 12 19 4 65 5 45 66 10 0 39 253 13 0 13 3 13 2 19 3 67 45 68 13 9 19 1 69 45 70 10 0 16 71 39 5 10 0 38 4 19 0 72 45 72 13 11 19 1 73 45 74 10 2 16 71 39 3 10 0 39 6 10 0 73 38 3 75 73 12 13 1 14 75 19 3 76 45 77 13 18 13 2 19 2 78 12 10 0 17 79 45 80 15 81 10 0 6 2 12 10 10 3 51 10 13 5 19 1 82 12 10 5 5 12 14 42 13 12 19 2 33 12 19 1 44 12 9 40 14 42 13 12 9 2 19 2 51 12 19 2 33 12 19 1 44 12 19 2 43 12 46 83 46 84 46 85 46 86 38 93 15 46 13 3 9 20 14 45 19 2 43 12 10 0 4 12 14 45 19 2 33 12 19 2 40 12 13 3 13 2 19 2 43 12 9 20 14 45 19 2 43 12 10 1 4 12 14 45 19 2 33 12 19 2 40 12 10 4 6 6 12 10 14 3 51 14 10 0 5 12 10 1 5 12 13 3 13 2 19 2 43 12 19 1 44 12 53 3 53 1 53 0 10 0 76 39 -96 43 4 43 6 38 19 15 36 15 87 9 40 9 40 1 88 6 5 12 10 4 3 51 4 43 1 75 45 89 10 4 45 90 75 45 91 38 25 10 1 4 51 0 77 15 92 13 0 19 3 56 12 10 2 3 51 2 10 1 5 51 1 10 1 40 -27 43 2 10 0 73 43 1 43 9 29) #53# #1# 45842) si::fset)) #1# 45842) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 32 12 19 2 33 1 0 73 29) #54=#A(t (34) (common-lisp-user::normalize-bold-data-for-env ext::location (defun common-lisp-user::normalize-bold-data-for-env) (#1# . 49859) ext::annotate :lambda-list (common-lisp-user::data) common-lisp-user::data max common-lisp-user::x apply #Y(nil nil nil (24 45 9 26 33 8 12 10 0 5 12 19 2 10 29) #54# #1# 49859) mapcar copy-tree common-lisp-user::new-data zerop 1.0 length 1- si::%dotimes-var common-lisp-user::i si::%dolist-var common-lisp-user::j 1+ #:g25286 #:g25287 nth / #:g25288 nthcdr rplaca < #Y(common-lisp-user::normalize-bold-data-for-env nil nil (24 45 7 26 33 8 12 34 11 12 13 0 19 2 12 12 19 2 10 12 10 0 16 13 12 46 14 46 8 10 0 16 15 39 5 1 16 51 0 10 2 4 16 17 16 18 45 19 8 0 45 20 38 76 10 3 45 21 75 45 22 38 55 10 1 4 51 0 10 2 16 23 45 24 10 1 45 25 10 4 16 23 12 10 2 17 26 12 13 6 19 2 27 45 28 13 2 10 1 17 29 12 10 0 17 30 10 0 43 1 43 2 10 1 5 51 1 10 1 40 -57 43 2 10 0 16 23 51 0 13 0 13 1 19 2 31 40 -83 43 2 10 1 73 43 2 29) #54# #1# 49859) si::fset)) #1# 49859) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 29 12 19 2 30 1 0 73 29) #55=#A(t (31) (common-lisp-user::normalize-bold-data-for-env-local ext::location (defun common-lisp-user::normalize-bold-data-for-env-local) (#1# . 50201) ext::annotate :lambda-list (common-lisp-user::data) common-lisp-user::data copy-tree common-lisp-user::new-data si::%dolist-var common-lisp-user::j max apply zerop 1.0 length 1- si::%dotimes-var common-lisp-user::i 1+ #:g25314 #:g25315 nth / #:g25316 nthcdr rplaca < #Y(common-lisp-user::normalize-bold-data-for-env-local nil nil (24 45 7 26 10 0 16 8 45 9 10 0 45 10 75 45 11 38 110 10 1 4 51 0 33 12 12 10 0 5 12 19 2 13 45 12 10 0 16 14 39 5 1 15 51 0 10 1 16 16 16 17 45 18 8 0 45 19 38 51 10 0 16 20 45 21 10 4 45 22 10 2 16 20 12 10 5 17 23 12 13 4 19 2 24 45 25 13 2 10 1 17 26 12 10 0 17 27 10 0 43 1 43 2 10 0 16 20 51 0 13 0 13 1 19 2 28 40 -58 43 2 43 1 10 1 5 51 1 10 1 40 -112 43 2 10 0 73 43 1 29) #55# #1# 50201) si::fset)) #1# 50201) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 43 12 19 2 44 1 0 73 29) #56=#A(t (45) (common-lisp-user::bold-brain-data-results ext::location (defun common-lisp-user::bold-brain-data-results) (#1# . 50514) ext::annotate :lambda-list (common-lisp-user::chart common-lisp-user::key common-lisp-user::local) common-lisp-user::chart common-lisp-user::key common-lisp-user::local common-lisp-user::cache-bold-data common-lisp-user::d common-lisp-user::result length common-lisp-user::size <= :initial-element "{} \"#000\"" format make-list common-lisp-user::normalize-bold-data-for-env-local common-lisp-user::normalize-bold-data-for-env common-lisp-user::data (common-lisp-user::manual common-lisp-user::goal common-lisp-user::vocal common-lisp-user::imaginal common-lisp-user::retrieval common-lisp-user::production common-lisp-user::aural common-lisp-user::visual) ("#~2,'0x0000" "#00~2,'0x00" "#0000~2,'0x" "#~2,'0x~2,'0x00" "#00~2,'0x~2,'0x" "#~2,'0x00~2,'0x" "#00~2,'0x00" "#0000~2,'0x") common-lisp-user::color common-lisp-user::region assoc common-lisp-user::nums "{} ~{~s ~}" common-lisp-user::x #\x count = * floor / max #Y(nil nil nil (24 45 30 26 9 2 15 31 10 3 4 12 19 2 32 12 19 2 33 39 79 77 10 3 4 12 9 0 13 0 9 20 19 2 34 12 19 1 35 12 9 255 9 20 19 2 36 12 19 2 34 12 19 1 35 12 19 2 37 12 9 0 13 0 9 20 19 2 34 12 19 1 35 12 9 255 9 20 19 2 36 12 19 2 34 12 19 1 35 12 19 2 37 12 19 4 18 38 43 77 10 3 4 12 9 0 13 0 9 20 19 2 34 12 19 1 35 12 9 255 9 20 19 2 36 12 19 2 34 12 19 1 35 12 19 2 37 12 19 3 18 29) #56# #1# 50514) mapcar "~{~a ~}" "{}" reverse #Y(common-lisp-user::bold-brain-data-results nil nil (24 45 7 24 45 8 24 45 9 26 13 2 13 1 19 2 10 45 11 75 45 12 10 1 4 16 13 45 14 13 0 9 1 19 2 15 39 17 9 8 14 16 77 15 17 19 2 18 12 19 3 19 38 118 10 3 39 8 13 2 19 1 20 38 6 13 2 19 1 21 45 22 15 23 15 24 46 25 46 26 38 77 10 0 4 12 13 2 19 2 27 45 28 10 0 39 26 77 15 29 34 38 12 10 0 5 12 19 2 39 12 19 3 18 12 10 5 3 51 5 38 23 77 15 40 13 4 14 16 15 41 19 3 19 12 19 3 18 12 10 5 3 51 5 43 1 10 0 5 12 10 1 5 12 53 1 53 0 10 0 76 39 -80 43 2 10 2 16 42 43 1 43 3 29) #56# #1# 50514) si::fset)) #1# 50514) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 34 12 19 2 35 1 0 73 29) #57=#A(t (36) (common-lisp-user::bold-brain-3d-data ext::location (defun common-lisp-user::bold-brain-3d-data) (#1# . 52001) ext::annotate :lambda-list (common-lisp-user::chart common-lisp-user::key) common-lisp-user::chart common-lisp-user::key common-lisp-user::cache-bold-data common-lisp-user::d common-lisp-user::result length common-lisp-user::size <= :initial-element common-lisp-user::none make-list common-lisp-user::normalize-bold-data-for-env-local common-lisp-user::data (common-lisp-user::manual common-lisp-user::goal common-lisp-user::vocal common-lisp-user::imaginal common-lisp-user::retrieval common-lisp-user::production common-lisp-user::aural common-lisp-user::visual) si::%dolist-var common-lisp-user::region assoc common-lisp-user::nums common-lisp-user::x #Y(nil nil nil (24 45 25 26 10 0 73 29) #57# #1# 52001) mapcar "~{~s ~}" format #Y(nil nil nil (24 45 25 26 77 15 28 13 0 19 3 29 29) #57# #1# 52001) list reverse apply #Y(common-lisp-user::bold-brain-3d-data nil nil (24 45 7 24 45 8 26 13 1 13 0 19 2 9 45 10 75 45 11 10 1 4 16 12 45 13 13 0 9 1 19 2 14 39 17 9 8 14 15 1 16 6 1 12 19 3 17 51 1 38 86 13 2 19 1 18 45 19 1 20 45 21 75 45 22 38 62 10 1 4 51 0 13 0 13 2 19 2 23 45 24 10 0 39 22 15 16 34 26 12 10 0 5 12 19 2 27 3 12 10 5 3 51 5 38 16 13 4 14 15 15 16 19 3 17 12 10 5 3 51 5 43 1 10 1 5 51 1 10 1 40 -64 43 2 43 1 34 30 12 15 27 15 31 10 1 16 32 12 19 3 33 12 19 2 27 43 3 29) #57# #1# 52001) si::fset)) #1# 52001) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 15 0 15 3 15 4 15 5 19 4 6 1 0 73 29) #A(t (7) (common-lisp-user::*brain-scan-event* si::*make-special boundp ext::location (defvar common-lisp-user::*brain-scan-event*) (#1# . 52786) ext::annotate)) #1# 52786) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 11 12 19 2 12 1 0 73 29) #58=#A(t (13) (common-lisp-user::remove-brain-scan ext::location (defun common-lisp-user::remove-brain-scan) (#1# . 52885) ext::annotate :lambda-list (common-lisp-user::event) common-lisp-user::event common-lisp-user::*brain-scan-event* common-lisp-user::delete-event "close" #Y(common-lisp-user::remove-brain-scan nil nil (24 45 7 26 11 8 39 9 14 8 19 1 9 75 52 8 1 10 73 29) #58# #1# 52885) si::fset)) #1# 52885) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 29 12 19 2 30 1 0 73 29) #59=#A(t (31) (common-lisp-user::start-brain-scan ext::location (defun common-lisp-user::start-brain-scan) (#1# . 53057) ext::annotate :lambda-list (common-lisp-user::event) common-lisp-user::event type-of common-lisp-user::environment-handler subtypep common-lisp-user::bold common-lisp-user::get-module-fct common-lisp-user::bm common-lisp-user::bold-module-inc common-lisp-user::inc common-lisp-user::brain-scan :module :priority :max :params :details "Brain-scan" :initial-delay :maintenance t common-lisp-user::schedule-periodic-event common-lisp-user::*brain-scan-event* "{none none none none none none none none}" #Y(common-lisp-user::start-brain-scan nil nil (24 45 7 26 10 0 16 8 12 15 9 19 2 10 39 58 15 11 19 1 12 45 13 13 0 19 1 14 45 15 13 0 15 16 14 17 15 11 14 18 14 19 14 20 10 2 6 1 12 14 21 15 22 14 23 13 0 14 24 14 25 19 14 26 52 27 1 28 73 43 2 38 4 10 0 73 29) #59# #1# 53057) si::fset)) #1# 53057) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 54 12 19 2 55 1 0 73 29) #60=#A(t (56) (common-lisp-user::brain-scan ext::location (defun common-lisp-user::brain-scan) (#1# . 53467) ext::annotate :lambda-list (common-lisp-user::handler) common-lisp-user::handler common-lisp-user::bold common-lisp-user::get-module-fct common-lisp-user::bm common-lisp-user::bold-module-inc common-lisp-user::mp-time floor 1- * max common-lisp-user::start common-lisp-user::printing-module #:g25349 #:g25348 common-lisp-user::printing-module-suppress-cmds #:g25350 #:g25351 t #:g25352 (setf common-lisp-user::printing-module-suppress-cmds) common-lisp-user::predict-bold-response #:g25353 #:g25354 (setf common-lisp-user::printing-module-suppress-cmds) common-lisp-user::d "" common-lisp-user::result (common-lisp-user::manual common-lisp-user::goal common-lisp-user::vocal common-lisp-user::imaginal common-lisp-user::retrieval common-lisp-user::production common-lisp-user::aural common-lisp-user::visual) si::%dolist-var common-lisp-user::region assoc common-lisp-user::nums string last common-lisp-user::val common-lisp-user::bold-module-max-table numberp zerop / princ-to-string "none" "none" " " concatenate "{" "}" common-lisp-user::update-handler #Y(common-lisp-user::brain-scan nil nil (24 45 7 26 15 8 19 1 9 45 10 9 0 13 0 19 1 11 12 19 0 12 12 13 0 19 1 11 12 19 2 13 16 14 12 19 2 15 12 19 2 16 45 17 15 18 19 1 9 47 1 19 45 20 10 1 39 59 13 0 19 1 21 45 22 10 1 45 23 11 24 45 25 13 0 13 1 33 26 18 2 43 1 43 1 64 7 13 3 19 1 27 65 10 1 45 28 10 1 45 29 13 0 13 1 33 30 18 2 43 1 43 1 66 43 1 43 2 45 31 1 32 45 33 1 34 45 35 75 45 36 38 108 10 1 4 51 0 13 0 13 3 19 2 37 45 38 15 39 13 3 10 0 39 68 13 0 19 1 40 4 45 41 13 2 13 7 19 1 42 12 19 2 37 5 45 16 10 1 16 43 39 33 10 0 39 12 10 0 16 43 39 6 10 0 16 44 76 39 10 13 1 13 0 19 2 45 38 3 10 1 16 46 38 4 1 47 73 43 2 38 4 1 48 73 12 15 49 19 4 50 51 3 43 1 10 1 5 51 1 10 1 40 -110 43 2 13 4 15 39 15 51 13 0 15 52 19 4 50 12 19 2 53 43 4 29) #60# #1# 53467) si::fset)) #1# 53467))
