(#Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 4 77 15 6 15 7 19 15 8 15 0 15 9 15 10 15 11 19 4 12 15 13 15 9 15 14 15 15 19 4 12 15 13 14 16 77 15 17 19 4 12 15 0 19 1 27 78 23 15 13 1 25 12 19 2 26 1 0 73 29) #1=#A(t (28) (common-lisp-user::act-r-production-parameter "ACT-R-PRODUCTION-PARAMETER-" (#2="The internal structure of a production parameter" common-lisp-user::name common-lisp-user::default-value common-lisp-user::default-function common-lisp-user::accessor) ((common-lisp-user::name nil t nil 0 nil) (common-lisp-user::default-value nil t nil 1 nil) (common-lisp-user::default-function nil t nil 2 nil) (common-lisp-user::accessor nil t nil 3 nil)) common-lisp-user::copy-act-r-production-parameter (common-lisp-user::make-act-r-production-parameter) #2# common-lisp-user::act-r-production-parameter-p si::define-structure ext::location (defstruct common-lisp-user::act-r-production-parameter) (#3=#P"C:/Users/Son Pham/Desktop/actr7/support/productions.lisp" . 0) ext::annotate common-lisp-user::make-act-r-production-parameter (defun common-lisp-user::make-act-r-production-parameter) (#3# . 0) :lambda-list (&key #4=#:name #5=#:default-value #6=#:default-function #7=#:accessor) (nil :accessor :default-function :default-value :name) #4# #5# #6# #7# 0 si::make-structure #Y(common-lisp-user::make-act-r-production-parameter nil nil (28 18 22 40 2 77 46 19 22 40 2 77 46 20 22 40 2 77 46 21 22 40 2 77 46 22 15 23 13 3 13 2 13 1 13 0 19 5 24 29) #1# #3# 0) si::fset find-class)) #3# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 29 77 77 15 6 19 15 7 15 8 15 9 15 10 15 11 19 4 12 15 13 15 9 15 14 15 15 19 4 12 15 13 14 16 77 15 17 19 4 12 15 0 19 1 54 78 50 15 13 1 52 12 19 2 53 1 0 73 29) #8=#A(t (55) (common-lisp-user::production "PRODUCTION-" (common-lisp-user::text common-lisp-user::name documentation common-lisp-user::variables common-lisp-user::bindings common-lisp-user::conditions common-lisp-user::actions common-lisp-user::lhs common-lisp-user::rhs common-lisp-user::lhs-buffers common-lisp-user::rhs-buffers common-lisp-user::conflict-code break common-lisp-user::disabled common-lisp-user::buffer-indices common-lisp-user::standard-rep common-lisp-user::dynamic common-lisp-user::conflict-val (common-lisp-user::parameter-values #9=(make-hash-table :size 23)) common-lisp-user::constants common-lisp-user::binds common-lisp-user::others common-lisp-user::selection-code common-lisp-user::implicit common-lisp-user::failure-condition common-lisp-user::partial-matched-slots common-lisp-user::searches common-lisp-user::search-binds common-lisp-user::search-others) ((common-lisp-user::text nil t nil 0 nil) (common-lisp-user::name nil t nil 1 nil) (documentation nil t nil 2 nil) (common-lisp-user::variables nil t nil 3 nil) (common-lisp-user::bindings nil t nil 4 nil) (common-lisp-user::conditions nil t nil 5 nil) (common-lisp-user::actions nil t nil 6 nil) (common-lisp-user::lhs nil t nil 7 nil) (common-lisp-user::rhs nil t nil 8 nil) (common-lisp-user::lhs-buffers nil t nil 9 nil) (common-lisp-user::rhs-buffers nil t nil 10 nil) (common-lisp-user::conflict-code nil t nil 11 nil) (break nil t nil 12 nil) (common-lisp-user::disabled nil t nil 13 nil) (common-lisp-user::buffer-indices nil t nil 14 nil) (common-lisp-user::standard-rep nil t nil 15 nil) (common-lisp-user::dynamic nil t nil 16 nil) (common-lisp-user::conflict-val nil t nil 17 nil) (common-lisp-user::parameter-values #9# t nil 18 nil) (common-lisp-user::constants nil t nil 19 nil) (common-lisp-user::binds nil t nil 20 nil) (common-lisp-user::others nil t nil 21 nil) (common-lisp-user::selection-code nil t nil 22 nil) (common-lisp-user::implicit nil t nil 23 nil) (common-lisp-user::failure-condition nil t nil 24 nil) (common-lisp-user::partial-matched-slots nil t nil 25 nil) (common-lisp-user::searches nil t nil 26 nil) (common-lisp-user::search-binds nil t nil 27 nil) (common-lisp-user::search-others nil t nil 28 nil)) common-lisp-user::copy-production (common-lisp-user::make-production) common-lisp-user::production? si::define-structure #10=(common-lisp-user::production (:predicate common-lisp-user::production?)) ext::location (defstruct #10#) (#3# . 1888) ext::annotate common-lisp-user::make-production (defun common-lisp-user::make-production) (#3# . 1888) :lambda-list (&key #11=#:text #12=#:name #13=#:documentation #14=#:variables #15=#:bindings #16=#:conditions #17=#:actions #18=#:lhs #19=#:rhs #20=#:lhs-buffers #21=#:rhs-buffers #22=#:conflict-code #23=#:break #24=#:disabled #25=#:buffer-indices #26=#:standard-rep #27=#:dynamic #28=#:conflict-val (#29=#:parameter-values (make-hash-table :size 23)) #30=#:constants #31=#:binds #32=#:others #33=#:selection-code #34=#:implicit #35=#:failure-condition #36=#:partial-matched-slots #37=#:searches #38=#:search-binds #39=#:search-others) (nil :search-others :search-binds :searches :partial-matched-slots :failure-condition :implicit :selection-code :others :binds :constants :parameter-values :conflict-val :dynamic :standard-rep :buffer-indices :disabled :break :conflict-code :rhs-buffers :lhs-buffers :rhs :lhs :actions :conditions :bindings :variables :documentation :name :text) #11# #12# #13# #14# #15# #16# #17# #18# #19# #20# #21# #22# #23# #24# #25# #26# #27# #28# :size make-hash-table #29# #30# #31# #32# #33# #34# #35# #36# #37# #38# #39# 0 si::make-structure #Y(common-lisp-user::make-production nil nil (28 18 22 40 2 77 46 19 22 40 2 77 46 20 22 40 2 77 46 21 22 40 2 77 46 22 22 40 2 77 46 23 22 40 2 77 46 24 22 40 2 77 46 25 22 40 2 77 46 26 22 40 2 77 46 27 22 40 2 77 46 28 22 40 2 77 46 29 22 40 2 77 46 30 22 40 2 77 46 31 22 40 2 77 46 32 22 40 2 77 46 33 22 40 2 77 46 34 22 40 2 77 46 35 22 40 2 77 46 36 22 40 9 14 37 9 23 19 2 38 12 46 39 22 40 2 77 46 40 22 40 2 77 46 41 22 40 2 77 46 42 22 40 2 77 46 43 22 40 2 77 46 44 22 40 2 77 46 45 22 40 2 77 46 46 22 40 2 77 46 47 22 40 2 77 46 48 22 40 2 77 46 49 15 50 13 28 13 27 13 26 13 25 13 24 13 23 13 22 13 21 13 20 13 19 13 18 13 17 13 16 13 15 13 14 13 13 13 12 13 11 13 10 13 9 13 8 13 7 13 6 13 5 13 4 13 3 13 2 13 1 13 0 19 30 51 29) #8# #3# 1888) si::fset find-class)) #3# 1888) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 15 0 15 3 15 4 15 5 19 4 6 1 0 73 29) #A(t (7) (common-lisp-user::*production-parameters-list* si::*make-special boundp ext::location (defvar common-lisp-user::*production-parameters-list*) (#3# . 2387) ext::annotate)) #3# 2387) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 93 12 14 94 9 2 19 4 95 15 0 15 96 15 97 19 3 98 1 0 73 29) #40=#A(t (99) (common-lisp-user::extend-productions ext::location (defmacro common-lisp-user::extend-productions) (#3# . 2431) ext::annotate :lambda-list (common-lisp-user::parameter-name &key (common-lisp-user::default-value nil) (common-lisp-user::default-function nil)) #:g9401 #:g9400 #:g9402 si::dm-too-few-arguments common-lisp-user::parameter-name :default-value si::search-keyword #:g9403 si::missing-keyword eq common-lisp-user::default-value :default-function #:g9404 common-lisp-user::default-function (:default-function :default-value) si::check-keyword symbolp keywordp *error-output* "~&#|Warning~:[~*~;~@[ (in model ~a)~]~]: ~@? |#~%" common-lisp-user::current-mp-fct common-lisp-user::mp-models length > common-lisp-user::current-model "~s is not a valid symbol for specifying a production parameter." format finish-output string "PRODUCTION-" string-upcase concatenate intern "PRODUCTION-" "-SETF" common-lisp-user::setf-name common-lisp-user::accessor-name common-lisp-user::*production-parameters-list* :key common-lisp-user::act-r-production-parameter-name find "Parameter ~s already defined for productions" :duplicate-parameter "Invalid value ~s specified for the default-function to extend productions" eval-when (:compile-toplevel :load-toplevel :execute) unless common-lisp-user::*suppress-extend-item-warning* when fboundp quote common-lisp-user::print-warning "Function ~s already exists and is being redefined." "Function ~s already exists and is being redefined." (common-lisp-user::*production-parameters-list* :key 'common-lisp-user::act-r-production-parameter-name) setf remove (common-lisp-user::*production-parameters-list* :key 'common-lisp-user::act-r-production-parameter-name) push common-lisp-user::make-act-r-production-parameter :name :accessor defun (common-lisp-user::production-name) let ((common-lisp-user::production (common-lisp-user::get-production common-lisp-user::production-name))) if (common-lisp-user::production? common-lisp-user::production) multiple-value-bind (common-lisp-user::value common-lisp-user::exists) gethash (common-lisp-user::production-parameter-values common-lisp-user::production) common-lisp-user::exists common-lisp-user::value (common-lisp-user::production-parameter-values common-lisp-user::production) common-lisp-user::production-parameter-default (common-lisp-user::*production-parameters-list* :key 'common-lisp-user::act-r-production-parameter-name) common-lisp-user::production "~S called with invalid production name." (common-lisp-user::production-name common-lisp-user::new-value) ((common-lisp-user::production (common-lisp-user::get-production common-lisp-user::production-name))) (common-lisp-user::production? common-lisp-user::production) (common-lisp-user::production-parameter-values common-lisp-user::production) common-lisp-user::new-value "Setf of ~S called with invalid production." defsetf #Y(common-lisp-user::extend-productions nil nil (24 45 7 24 45 8 26 10 1 5 45 9 10 0 76 39 6 13 2 19 1 10 10 0 4 12 10 0 5 51 0 22 45 11 13 1 15 12 19 2 13 45 14 13 0 1 15 17 16 39 4 75 38 3 10 0 45 17 13 3 15 18 19 2 13 45 19 13 0 1 15 17 16 39 4 75 38 3 10 0 45 20 13 5 15 21 19 2 22 10 4 16 23 76 40 5 10 4 16 24 39 44 14 25 15 26 19 0 27 73 39 12 19 0 28 16 29 12 9 1 19 2 30 12 19 0 31 12 15 32 13 4 19 6 33 12 14 25 19 1 34 22 73 38 470 15 35 15 36 13 4 19 1 37 12 19 3 38 12 19 1 39 12 15 35 15 40 13 4 19 1 37 12 15 41 19 4 38 12 19 1 39 12 46 42 46 43 13 6 14 44 14 45 15 46 19 4 47 39 44 14 25 15 26 19 0 27 73 39 12 19 0 28 16 29 12 9 1 19 2 30 12 19 0 31 12 15 48 13 6 19 6 33 14 25 19 1 34 11 49 73 38 370 75 39 44 14 25 15 26 19 0 27 73 39 12 19 0 28 16 29 12 9 1 19 2 30 12 19 0 31 12 15 50 13 2 19 6 33 12 14 25 19 1 34 22 73 38 324 15 51 15 52 15 53 15 54 15 55 15 56 15 57 10 0 6 2 6 2 12 15 58 15 59 15 57 10 0 6 2 6 3 6 3 12 15 55 15 56 15 57 10 1 6 2 6 2 12 15 58 15 60 15 57 10 1 6 2 6 3 6 3 6 4 12 15 55 15 47 15 57 10 6 6 2 12 1 61 7 3 12 15 62 15 44 15 63 15 57 10 6 6 2 12 1 64 7 3 6 3 6 3 12 15 65 15 66 14 67 15 57 10 6 6 2 12 14 12 15 57 10 4 6 2 12 14 18 15 57 10 2 6 2 12 14 68 15 57 10 0 6 2 6 9 12 1 44 6 3 12 15 69 13 0 15 70 15 71 15 72 15 73 15 74 15 75 15 76 15 77 15 57 10 6 6 2 12 1 78 6 3 12 15 73 15 79 15 80 15 62 15 77 15 57 10 6 6 2 12 1 81 6 3 12 15 82 15 47 15 57 10 6 6 2 12 1 83 7 3 12 1 84 6 3 6 3 6 4 6 4 12 15 58 15 85 15 57 10 0 6 2 6 3 6 4 6 3 6 4 12 15 69 13 1 15 86 15 71 15 87 15 73 15 88 15 62 15 77 15 57 10 6 6 2 12 1 89 6 3 12 1 90 6 3 12 15 58 15 91 15 57 10 0 6 2 6 3 6 4 6 3 6 4 12 15 92 13 0 10 1 6 3 12 15 57 10 0 6 2 6 9 73 43 2 29) #40# #3# 2431) t si::fset function "Add new parameters to all productions" si::set-documentation)) #3# 2431) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 11 12 19 2 12 15 0 15 13 15 14 19 3 15 1 0 73 29) #41=#A(t (16) (common-lisp-user::production-parameter-default ext::location (defun common-lisp-user::production-parameter-default) (#3# . 6326) ext::annotate :lambda-list (common-lisp-user::param common-lisp-user::production) common-lisp-user::param common-lisp-user::production common-lisp-user::act-r-production-parameter-default-function common-lisp-user::act-r-production-parameter-default-value #Y(common-lisp-user::production-parameter-default nil nil (24 45 7 24 45 8 26 13 1 19 1 9 39 14 13 1 19 1 9 12 13 0 20 1 23 38 6 13 1 19 1 10 29) #41# #3# 6326) si::fset function "Return a default value for a parameter in a production" si::set-documentation)) #3# 6326) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ("PRODUCTIONS" provide)) #3# 6633))
