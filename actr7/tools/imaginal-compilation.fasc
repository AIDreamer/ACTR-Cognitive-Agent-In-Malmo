(#Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 102 12 19 2 103 15 0 15 104 15 105 19 3 106 1 0 73 29) #1=#A(t (107) (common-lisp-user::map-imaginal-buffer ext::location (defun common-lisp-user::map-imaginal-buffer) (#2=#P"C:/Users/Son Pham/Desktop/actr7/tools/imaginal-compilation.lisp" . 0) ext::annotate :lambda-list (common-lisp-user::module common-lisp-user::p1 common-lisp-user::p1-s common-lisp-user::p2 common-lisp-user::p2-s common-lisp-user::buffer) common-lisp-user::module common-lisp-user::p1 common-lisp-user::p1-s common-lisp-user::p2 common-lisp-user::p2-s common-lisp-user::buffer common-lisp-user::production-buffer-indices assoc common-lisp-user::p1-style common-lisp-user::p2-style common-lisp-user::compilation-module-ppm common-lisp-user::ppm common-lisp-user::compilation-module-previous common-lisp-user::previous-production-bindings common-lisp-user::production-name common-lisp-user::production-compilation-instan append common-lisp-user::bindings (4 12 13 20 28 29) find (8 9 12 13 24 25 28 29 40 56) common-lisp-user::mappings string "+" symbol-name ">" concatenate intern second :key car common-lisp-user::p1-slots "=" ">" common-lisp-user::p2-slots common-lisp-user::x common-lisp-user::spec-slot-op = eq common-lisp-user::spec-slot-name #Y(nil nil nil (24 45 42 26 13 0 19 1 43 12 1 44 17 45 73 39 9 13 0 19 1 46 6 1 73 29) #1# #2# 0) mapcan #Y(nil nil nil (24 45 42 26 13 0 19 1 43 12 1 44 17 45 73 39 9 13 0 19 1 46 6 1 73 29) #1# #2# 0) intersection common-lisp-user::interesting-slots remove-duplicates si::%dolist-var common-lisp-user::slot #Y(nil nil nil (24 45 42 26 13 0 19 1 43 12 1 44 17 45 73 39 11 13 0 19 1 46 12 10 1 17 45 29) #1# #2# 0) remove-if-not common-lisp-user::p1slots #Y(nil nil nil (24 45 42 26 13 0 19 1 43 12 1 44 17 45 73 39 11 13 0 19 1 46 12 10 3 17 45 29) #1# #2# 0) common-lisp-user::p2slots common-lisp-user::spec-slot-value common-lisp-user::constant-value-p (9 25) (8 9 12 13 24 25 28 29) "=" ">" common-lisp-user::p1-slotsa "=" ">" common-lisp-user::p1-slotsb "=" ">" #Y(nil nil nil (24 45 42 26 13 0 19 1 43 12 1 44 17 45 76 73 40 16 13 0 19 1 46 12 13 2 14 36 15 46 19 4 26 29) #1# #2# 0) remove-if #Y(nil nil nil (24 45 42 26 13 0 19 1 46 6 1 73 29) #1# #2# 0) #Y(nil nil nil (24 45 42 26 13 0 19 1 43 12 1 44 17 45 73 39 9 13 0 19 1 46 6 1 73 29) #1# #2# 0) #Y(nil nil nil (24 45 42 26 13 0 19 1 46 12 10 1 17 45 29) #1# #2# 0) #Y(nil nil nil (24 45 42 26 13 0 19 1 46 12 10 3 17 45 29) #1# #2# 0) (40 56) (8 24 40 56) "=" ">" "*" ">" "=" ">" #Y(nil nil nil (24 45 42 26 13 0 19 1 43 12 1 44 17 45 76 73 40 16 13 0 19 1 46 12 13 2 14 36 15 46 19 4 26 29) #1# #2# 0) #Y(nil nil nil (24 45 42 26 13 0 19 1 46 6 1 73 29) #1# #2# 0) #Y(nil nil nil (24 45 42 26 13 0 19 1 43 12 1 44 17 45 73 39 9 13 0 19 1 46 6 1 73 29) #1# #2# 0) #Y(nil nil nil (24 45 42 26 13 0 19 1 46 12 10 1 17 45 29) #1# #2# 0) #Y(nil nil nil (24 45 42 26 13 0 19 1 46 12 10 3 17 45 29) #1# #2# 0) (8 24) (8 9 12 13 24 25 28 29 40 56) "=" ">" cadr "=" ">" #Y(nil nil nil (24 45 42 26 13 0 19 1 43 12 1 44 17 45 73 39 9 13 0 19 1 46 6 1 73 29) #1# #2# 0) #Y(nil nil nil (24 45 42 26 13 0 19 1 43 12 1 44 17 45 73 39 9 13 0 19 1 46 6 1 73 29) #1# #2# 0) #Y(nil nil nil (24 45 42 26 13 0 19 1 43 12 1 44 17 45 73 39 11 13 0 19 1 46 12 10 1 17 45 29) #1# #2# 0) #Y(nil nil nil (24 45 42 26 13 0 19 1 43 12 1 44 17 45 73 39 11 13 0 19 1 46 12 10 3 17 45 29) #1# #2# 0) #Y(common-lisp-user::map-imaginal-buffer nil nil (24 45 7 24 45 8 24 45 9 24 45 10 24 45 11 24 45 12 26 13 0 13 4 19 1 13 12 19 2 14 5 45 15 13 1 13 3 19 1 13 12 19 2 14 5 45 16 13 7 19 1 17 45 18 10 0 39 24 13 8 19 1 19 12 19 1 20 12 13 5 19 1 21 12 19 1 22 12 19 2 23 45 24 13 3 15 25 19 2 26 39 8 13 2 15 27 19 2 26 39 304 75 45 28 15 29 15 30 10 5 16 31 12 15 32 19 4 33 12 19 1 34 12 10 8 16 35 12 14 36 15 37 19 4 26 16 35 45 38 15 29 15 39 10 6 16 31 12 15 40 19 4 33 12 19 1 34 12 10 7 4 12 14 36 15 37 19 4 26 16 35 45 41 34 47 12 13 1 19 2 48 12 34 49 12 13 0 19 2 48 12 19 2 50 45 51 13 0 19 1 52 45 53 75 45 54 38 184 10 1 4 51 0 34 55 12 13 4 19 2 56 45 53 75 45 57 38 153 10 1 4 51 0 34 58 12 13 5 19 2 56 45 53 75 45 59 38 122 10 1 4 51 0 13 0 19 1 60 12 13 19 19 2 61 39 81 10 11 39 57 13 2 19 1 60 12 13 19 19 2 61 39 21 13 2 19 1 60 12 13 0 19 1 60 3 12 10 9 3 51 9 38 22 13 2 19 1 60 12 13 10 14 36 15 37 19 4 26 12 10 9 3 51 9 38 19 13 2 19 1 60 12 13 0 19 1 60 3 12 10 9 3 51 9 38 19 13 0 19 1 60 12 13 2 19 1 60 3 12 10 9 3 51 9 10 1 5 51 1 10 1 40 -124 43 2 10 1 5 51 1 10 1 40 -155 43 2 10 1 5 51 1 10 1 40 -186 43 2 10 3 73 43 4 38 1065 13 3 15 62 19 2 26 39 8 13 2 15 63 19 2 26 39 354 75 45 28 15 29 15 64 10 5 16 31 12 15 65 19 4 33 12 19 1 34 12 10 8 4 12 14 36 15 37 19 4 26 16 35 45 66 15 29 15 67 10 6 16 31 12 15 68 19 4 33 12 19 1 34 12 10 9 16 35 12 14 36 15 37 19 4 26 16 35 45 69 15 29 15 70 10 7 16 31 12 15 71 19 4 33 12 19 1 34 12 10 8 4 12 14 36 15 37 19 4 26 16 35 45 41 34 72 12 13 2 19 2 73 12 13 1 19 2 23 45 38 34 74 12 13 0 19 2 48 12 34 75 12 13 1 19 2 48 12 19 2 50 45 51 13 0 19 1 52 45 53 75 45 54 38 184 10 1 4 51 0 34 76 12 13 3 19 2 56 45 53 75 45 57 38 153 10 1 4 51 0 34 77 12 13 6 19 2 56 45 53 75 45 59 38 122 10 1 4 51 0 13 0 19 1 60 12 13 21 19 2 61 39 81 10 13 39 57 13 2 19 1 60 12 13 21 19 2 61 39 21 13 2 19 1 60 12 13 0 19 1 60 3 12 10 11 3 51 11 38 22 13 2 19 1 60 12 13 12 14 36 15 37 19 4 26 12 10 11 3 51 11 38 19 13 2 19 1 60 12 13 0 19 1 60 3 12 10 11 3 51 11 38 19 13 0 19 1 60 12 13 2 19 1 60 3 12 10 11 3 51 11 10 1 5 51 1 10 1 40 -124 43 2 10 1 5 51 1 10 1 40 -155 43 2 10 1 5 51 1 10 1 40 -186 43 2 10 5 73 43 6 38 694 13 3 15 78 19 2 26 39 8 13 2 15 79 19 2 26 39 354 75 45 28 15 29 15 80 10 5 16 31 12 15 81 19 4 33 12 19 1 34 12 10 8 4 12 14 36 15 37 19 4 26 16 35 45 66 15 29 15 82 10 6 16 31 12 15 83 19 4 33 12 19 1 34 12 10 9 16 35 12 14 36 15 37 19 4 26 16 35 45 69 15 29 15 84 10 7 16 31 12 15 85 19 4 33 12 19 1 34 12 10 8 4 12 14 36 15 37 19 4 26 16 35 45 41 34 86 12 13 2 19 2 73 12 13 1 19 2 23 45 38 34 87 12 13 0 19 2 48 12 34 88 12 13 1 19 2 48 12 19 2 50 45 51 13 0 19 1 52 45 53 75 45 54 38 184 10 1 4 51 0 34 89 12 13 3 19 2 56 45 53 75 45 57 38 153 10 1 4 51 0 34 90 12 13 6 19 2 56 45 53 75 45 59 38 122 10 1 4 51 0 13 0 19 1 60 12 13 21 19 2 61 39 81 10 13 39 57 13 2 19 1 60 12 13 21 19 2 61 39 21 13 2 19 1 60 12 13 0 19 1 60 3 12 10 11 3 51 11 38 22 13 2 19 1 60 12 13 12 14 36 15 37 19 4 26 12 10 11 3 51 11 38 19 13 2 19 1 60 12 13 0 19 1 60 3 12 10 11 3 51 11 38 19 13 0 19 1 60 12 13 2 19 1 60 3 12 10 11 3 51 11 10 1 5 51 1 10 1 40 -124 43 2 10 1 5 51 1 10 1 40 -155 43 2 10 1 5 51 1 10 1 40 -186 43 2 10 5 73 43 6 38 323 13 3 15 91 19 2 26 39 8 13 2 15 92 19 2 26 39 303 75 45 28 15 29 15 93 10 5 16 31 12 15 94 19 4 33 12 19 1 34 12 10 8 4 12 14 36 15 37 19 4 26 16 95 45 38 15 29 15 96 10 6 16 31 12 15 97 19 4 33 12 19 1 34 12 10 7 4 12 14 36 15 37 19 4 26 16 95 45 41 34 98 12 13 1 19 2 48 12 34 99 12 13 0 19 2 48 12 19 2 50 45 51 13 0 19 1 52 45 53 75 45 54 38 184 10 1 4 51 0 34 100 12 13 4 19 2 56 45 53 75 45 57 38 153 10 1 4 51 0 34 101 12 13 5 19 2 56 45 53 75 45 59 38 122 10 1 4 51 0 13 0 19 1 60 12 13 19 19 2 61 39 81 10 11 39 57 13 2 19 1 60 12 13 19 19 2 61 39 21 13 2 19 1 60 12 13 0 19 1 60 3 12 10 9 3 51 9 38 22 13 2 19 1 60 12 13 10 14 36 15 37 19 4 26 12 10 9 3 51 9 38 19 13 2 19 1 60 12 13 0 19 1 60 3 12 10 9 3 51 9 38 19 13 0 19 1 60 12 13 2 19 1 60 3 12 10 9 3 51 9 10 1 5 51 1 10 1 40 -124 43 2 10 1 5 51 1 10 1 40 -155 43 2 10 1 5 51 1 10 1 40 -186 43 2 10 3 73 43 4 38 3 75 73 43 4 29) #1# #2# 0) si::fset function "map references from p1 to p2 for imaginal style buffer" si::set-documentation)) #2# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 62 12 19 2 63 1 0 73 29) #3=#A(t (64) (common-lisp-user::compose-imaginal-buffer ext::location (defun common-lisp-user::compose-imaginal-buffer) (#2# . 14088) ext::annotate :lambda-list (common-lisp-user::p1 common-lisp-user::p1-s common-lisp-user::p2 common-lisp-user::p2-s common-lisp-user::buffer) common-lisp-user::p1 common-lisp-user::p1-s common-lisp-user::p2 common-lisp-user::p2-s common-lisp-user::buffer string symbol-name ">" concatenate intern common-lisp-user::bn "=" common-lisp-user::b= "+" common-lisp-user::b+ "?" common-lisp-user::b? "*" common-lisp-user::b* :key car find copy-tree common-lisp-user::c1 common-lisp-user::c2 common-lisp-user::q1 common-lisp-user::q2 second common-lisp-user::a1= common-lisp-user::a2= common-lisp-user::a1+ common-lisp-user::a2+ common-lisp-user::a1* common-lisp-user::a2* common-lisp-user::production-buffer-indices assoc common-lisp-user::it 4 12 13 20 28 29 append common-lisp-user::buffer+-union 0 8 16 24 common-lisp-user::buffer-condition-union 9 40 25 56 common-lisp-user::buffer=-union #Y(common-lisp-user::compose-imaginal-buffer nil nil (24 45 7 24 45 8 24 45 9 24 45 10 24 45 11 26 15 12 10 0 16 13 12 15 14 19 3 15 12 19 1 16 45 17 15 12 15 18 10 0 16 13 12 19 3 15 12 19 1 16 45 19 15 12 15 20 10 1 16 13 12 19 3 15 12 19 1 16 45 21 15 12 15 22 10 2 16 13 12 19 3 15 12 19 1 16 45 23 15 12 15 24 10 3 16 13 12 19 3 15 12 19 1 16 45 25 13 3 10 8 4 12 14 26 15 27 19 4 28 16 29 45 30 13 4 10 7 4 12 14 26 15 27 19 4 28 16 29 45 31 13 3 10 10 4 12 14 26 15 27 19 4 28 16 29 45 32 13 4 10 9 4 12 14 26 15 27 19 4 28 16 29 45 33 13 7 10 12 16 34 12 14 26 15 27 19 4 28 16 29 45 35 13 8 10 11 16 34 12 14 26 15 27 19 4 28 16 29 45 36 13 8 10 14 16 34 12 14 26 15 27 19 4 28 16 29 45 37 13 9 10 13 16 34 12 14 26 15 27 19 4 28 16 29 45 38 13 8 10 16 16 34 12 14 26 15 27 19 4 28 16 29 45 39 13 9 10 15 16 34 12 14 26 15 27 19 4 28 16 29 45 40 13 15 13 19 19 1 41 12 19 2 42 5 45 43 10 0 39 5 10 0 38 3 8 0 43 1 41 44 16 41 45 13 41 46 10 41 47 7 41 48 4 42 49 143 10 9 73 39 6 10 9 6 1 73 12 10 7 73 39 6 10 7 6 1 73 12 19 2 50 12 10 5 40 3 10 1 73 39 17 10 5 39 8 10 5 6 1 73 38 6 10 1 6 1 73 12 10 3 39 3 10 4 39 27 13 3 13 4 19 2 51 45 43 10 0 39 8 10 0 6 1 73 38 3 75 73 43 1 38 48 10 3 39 3 10 0 39 27 13 3 13 0 19 2 51 45 43 10 0 39 8 10 0 6 1 73 38 3 75 73 43 1 38 14 10 3 39 8 10 3 6 1 73 38 3 75 73 12 19 2 50 6 2 73 38 281 41 52 10 41 53 7 41 54 4 42 55 98 13 9 13 8 13 5 19 3 56 45 43 10 0 39 8 10 0 6 1 73 38 3 75 73 12 43 1 10 7 39 8 10 7 6 1 73 38 14 10 6 39 8 10 6 6 1 73 38 3 75 73 12 19 2 50 12 10 4 73 39 6 10 4 6 1 73 12 10 0 73 39 6 10 0 6 1 73 12 10 2 73 39 6 10 2 6 1 73 12 19 3 50 6 2 73 38 172 41 57 10 41 58 7 41 59 4 42 60 158 13 9 13 8 10 5 39 6 10 5 73 38 4 10 1 73 12 19 3 56 45 43 10 0 39 8 10 0 6 1 73 38 3 75 73 12 43 1 10 7 39 8 10 7 6 1 73 38 14 10 6 39 8 10 6 6 1 73 38 3 75 73 12 19 2 50 12 10 5 40 3 10 4 39 27 13 5 13 4 19 2 61 45 43 10 0 39 8 10 0 6 1 73 38 3 75 73 43 1 38 37 10 1 40 3 10 0 39 27 13 1 13 0 19 2 61 45 43 10 0 39 8 10 0 6 1 73 38 3 75 73 43 1 38 3 75 73 12 10 2 73 39 6 10 2 6 1 73 12 19 2 50 6 2 73 38 3 75 73 43 15 29) #3# #2# 14088) si::fset)) #2# 14088) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 43 12 19 2 44 1 0 73 29) #4=#A(t (45) (common-lisp-user::check-imaginal-consistency ext::location (defun common-lisp-user::check-imaginal-consistency) (#2# . 18486) ext::annotate :lambda-list (common-lisp-user::buffer common-lisp-user::module common-lisp-user::p1 common-lisp-user::p2) common-lisp-user::buffer common-lisp-user::module common-lisp-user::p1 common-lisp-user::p2 common-lisp-user::get-buffer-index 4 12 13 20 28 29 common-lisp-user::x common-lisp-user::production-statement-op #\+ eq common-lisp-user::production-statement-target #Y(nil nil nil (24 45 18 26 13 0 19 1 19 12 1 20 17 21 73 39 11 13 0 19 1 22 12 10 4 17 21 29) #4# #2# 18486) common-lisp-user::production-rhs find-if common-lisp-user::compilation-module-previous common-lisp-user::previous-production-bindings #\= #Y(nil nil nil (24 45 18 26 13 0 19 1 19 12 1 28 17 21 73 39 11 13 0 19 1 22 12 10 4 17 21 29) #4# #2# 18486) common-lisp-user::production-lhs common-lisp-user::production-bindings common-lisp-user::check-consistency 9 25 #Y(nil nil nil (24 45 18 26 13 0 19 1 19 12 1 28 17 21 73 39 11 13 0 19 1 22 12 10 4 17 21 29) #4# #2# 18486) #Y(nil nil nil (24 45 18 26 13 0 19 1 19 12 1 28 17 21 73 39 11 13 0 19 1 22 12 10 4 17 21 29) #4# #2# 18486) 40 56 #\* #Y(nil nil nil (24 45 18 26 13 0 19 1 19 12 1 39 17 21 73 39 11 13 0 19 1 22 12 10 4 17 21 29) #4# #2# 18486) #Y(nil nil nil (24 45 18 26 13 0 19 1 19 12 1 28 17 21 73 39 11 13 0 19 1 22 12 10 4 17 21 29) #4# #2# 18486) t #Y(common-lisp-user::check-imaginal-consistency nil nil (24 45 7 24 45 8 24 45 9 24 45 10 26 13 1 13 3 19 2 11 41 12 16 41 13 13 41 14 10 41 15 7 41 16 4 42 17 50 13 2 34 23 12 13 1 19 1 24 12 19 2 25 12 13 2 19 1 26 12 19 1 27 12 34 29 12 13 0 19 1 30 12 19 2 25 12 13 0 19 1 31 12 19 5 32 38 114 41 33 4 42 34 50 13 2 34 35 12 13 1 19 1 24 12 19 2 25 12 13 2 19 1 26 12 19 1 27 12 34 36 12 13 0 19 1 30 12 19 2 25 12 13 0 19 1 31 12 19 5 32 38 59 41 37 4 42 38 50 13 2 34 40 12 13 1 19 1 24 12 19 2 25 12 13 2 19 1 26 12 19 1 27 12 34 41 12 13 0 19 1 30 12 19 2 25 12 13 0 19 1 31 12 19 5 32 38 4 11 42 73 29) #4# #2# 18486) si::fset)) #2# 18486) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 10 12 19 2 11 1 0 73 29) #5=#A(t (12) (common-lisp-user::pre-instantiate-imaginal ext::location (defun common-lisp-user::pre-instantiate-imaginal) (#2# . 20873) ext::annotate :lambda-list (common-lisp-user::buffer-and-index common-lisp-user::p2) common-lisp-user::buffer-and-index common-lisp-user::p2 t #Y(common-lisp-user::pre-instantiate-imaginal nil nil (24 45 7 24 45 8 26 11 9 73 29) #5# #2# 20873) si::fset)) #2# 20873) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 25 12 19 2 26 15 0 15 27 15 28 19 3 29 1 0 73 29) #6=#A(t (30) (common-lisp-user::i-b-c3 ext::location (defun common-lisp-user::i-b-c3) (#2# . 21017) ext::annotate :lambda-list (common-lisp-user::buffer common-lisp-user::p1 common-lisp-user::p2) common-lisp-user::buffer common-lisp-user::p1 common-lisp-user::p2 common-lisp-user::x common-lisp-user::production-statement-op #\? eq common-lisp-user::production-statement-target #Y(nil nil nil (24 45 10 26 13 0 19 1 11 12 1 12 17 13 73 39 11 13 0 19 1 14 12 10 3 17 13 29) #6# #2# 21017) common-lisp-user::production-lhs find-if common-lisp-user::query (= common-lisp-user::state common-lisp-user::free) equalp #Y(nil nil nil (24 45 10 26 13 0 1 19 17 20 29) #6# #2# 21017) common-lisp-user::production-statement-spec common-lisp-user::chunk-spec-slot-spec every #Y(common-lisp-user::i-b-c3 nil nil (24 45 7 24 45 8 24 45 9 26 34 15 12 13 0 19 1 16 12 19 2 17 45 18 34 21 12 13 0 19 1 22 12 19 1 23 12 19 2 24 43 1 29) #6# #2# 21017) si::fset function "Compilation check queries in p2 for 'state free'" si::set-documentation)) #2# 21017) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 26 12 19 2 27 15 0 15 28 15 29 19 3 30 1 0 73 29) #7=#A(t (31) (common-lisp-user::i-b-c1 ext::location (defun common-lisp-user::i-b-c1) (#2# . 21534) ext::annotate :lambda-list (common-lisp-user::buffer common-lisp-user::p1 common-lisp-user::p2) common-lisp-user::buffer common-lisp-user::p1 common-lisp-user::p2 common-lisp-user::x common-lisp-user::production-statement-op #\? eq common-lisp-user::production-statement-target #Y(nil nil nil (24 45 10 26 13 0 19 1 11 12 1 12 17 13 73 39 11 13 0 19 1 14 12 10 3 17 13 29) #7# #2# 21534) common-lisp-user::production-lhs find-if common-lisp-user::query (= common-lisp-user::state common-lisp-user::busy) equalp (= common-lisp-user::buffer common-lisp-user::empty) #Y(nil nil nil (24 45 10 26 13 0 1 19 17 20 73 40 7 13 0 1 21 17 20 29) #7# #2# 21534) common-lisp-user::production-statement-spec common-lisp-user::chunk-spec-slot-spec every #Y(common-lisp-user::i-b-c1 nil nil (24 45 7 24 45 8 24 45 9 26 34 15 12 13 0 19 1 16 12 19 2 17 45 18 34 22 12 13 0 19 1 23 12 19 1 24 12 19 2 25 43 1 29) #7# #2# 21534) si::fset function "Compilation check for queries such that p2 only uses 'buffer empty' or 'state busy'" si::set-documentation)) #2# 21534) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 18 12 19 2 19 15 0 15 20 15 21 19 3 22 1 0 73 29) #8=#A(t (23) (common-lisp-user::no-rhs-imaginal-ref ext::location (defun common-lisp-user::no-rhs-imaginal-ref) (#2# . 22121) ext::annotate :lambda-list (common-lisp-user::buffer common-lisp-user::p1 common-lisp-user::p2) common-lisp-user::buffer common-lisp-user::p1 common-lisp-user::p2 string "=" symbol-name concatenate intern common-lisp-user::production-standard-rep second common-lisp-user::recursive-find #Y(common-lisp-user::no-rhs-imaginal-ref nil nil (24 45 7 24 45 8 24 45 9 26 15 10 15 11 10 2 16 12 12 19 3 13 12 19 1 14 12 13 0 19 1 15 16 16 12 19 2 17 76 73 29) #8# #2# 22121) si::fset function "Can't compile if the variable naming the buffer is used in the actions of p2" si::set-documentation)) #2# 22121) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 12 12 19 2 13 1 0 73 29) #9=#A(t (14) (common-lisp-user::i-b-c4 ext::location (defun common-lisp-user::i-b-c4) (#2# . 22418) ext::annotate :lambda-list (common-lisp-user::buffer common-lisp-user::p1 common-lisp-user::p2) common-lisp-user::buffer common-lisp-user::p1 common-lisp-user::p2 common-lisp-user::i-b-c3 common-lisp-user::no-rhs-imaginal-ref #Y(common-lisp-user::i-b-c4 nil nil (24 45 7 24 45 8 24 45 9 26 13 2 13 1 13 0 19 3 10 73 39 10 13 2 13 1 13 0 19 3 11 29) #9# #2# 22418) si::fset)) #2# 22418) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 30 12 19 2 31 15 0 15 32 15 33 19 3 34 1 0 73 29) #10=#A(t (35) (common-lisp-user::i-b-c2 ext::location (defun common-lisp-user::i-b-c2) (#2# . 22526) ext::annotate :lambda-list (common-lisp-user::buffer common-lisp-user::p1 common-lisp-user::p2) common-lisp-user::buffer common-lisp-user::p1 common-lisp-user::p2 common-lisp-user::x common-lisp-user::production-statement-op #\? eq common-lisp-user::production-statement-target #Y(nil nil nil (24 45 10 26 13 0 19 1 11 12 1 12 17 13 73 39 11 13 0 19 1 14 12 10 3 17 13 29) #10# #2# 22526) common-lisp-user::production-lhs find-if common-lisp-user::it common-lisp-user::production-statement-spec common-lisp-user::chunk-spec-slot-spec #Y(nil nil nil (24 45 10 26 13 0 19 1 11 12 1 12 17 13 73 39 11 13 0 19 1 14 12 10 3 17 13 29) #10# #2# 22526) common-lisp-user::query2 common-lisp-user::query1 length append :test equal remove-duplicates = #Y(common-lisp-user::i-b-c2 nil nil (24 45 7 24 45 8 24 45 9 26 34 15 12 13 1 19 1 16 12 19 2 17 45 18 10 0 39 12 13 0 19 1 19 12 19 1 20 38 3 75 73 12 43 1 34 21 12 13 0 19 1 16 12 19 2 17 45 18 10 0 39 12 13 0 19 1 19 12 19 1 20 38 3 75 73 12 43 1 46 22 46 23 10 0 16 24 12 10 1 16 24 12 13 0 13 1 19 2 25 12 14 26 15 27 19 3 28 16 24 12 19 3 29 43 2 29) #10# #2# 22526) si::fset function "queries in p1 and p2 must be the same
   NOTE: this doesn't take into account any variables at this time" si::set-documentation)) #2# 22526) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 19 4 4 15 0 14 5 77 15 6 19 4 4 15 0 1 65 12 19 2 66 1 0 73 29) #11=#A(t (67) (common-lisp-user::imaginal-reason ext::location (defun common-lisp-user::imaginal-reason) (#2# . 23476) ext::annotate :lambda-list (common-lisp-user::p1-index common-lisp-user::p2-index common-lisp-user::failed-function) common-lisp-user::p1-index common-lisp-user::p2-index common-lisp-user::failed-function common-lisp-user::no-rhs-imaginal-ref eql "the buffer variable cannot be used in the actions of the second production if there is a request in the first production." common-lisp-user::i-b-c1 "when the first production makes a request and the second does not harvest it the second can only query for state busy or buffer empty." common-lisp-user::i-b-c2 "the queries in both productions must be the same." common-lisp-user::i-b-c3 "when the first production makes a request and the second harvests it the second can only query for state free." common-lisp-user::i-b-c4 "when the first production makes a request and the second harvests it the second can only query for state free and the buffer variable cannot be used in the actions of the second." 2 6 10 11 14 15 42 43 46 47 18 22 26 27 30 31 58 59 63 62 "the buffer is explicitly cleared in the first production." 44 45 60 61 "the first production makes both a request and a modification request." 41 57 "the first production makes both a modification and a modification request." "the buffer is explicitly cleared in the second production." "the second production makes both a request and a modification request." "the second production makes both a modification and a modification request." 40 56 "the first production makes a modification and the second makes a modification request." 4 12 13 20 28 29 "both productions make requests." "the first production makes a modification request and the second makes a request." "the first production makes a modification request and the other makes a modification." #Y(common-lisp-user::imaginal-reason nil nil (24 45 7 24 45 8 24 45 9 26 13 0 1 10 17 11 39 6 1 12 73 38 307 13 0 1 13 17 11 39 6 1 14 73 38 294 13 0 1 15 17 11 39 6 1 16 73 38 281 13 0 1 17 17 11 39 6 1 18 73 38 268 13 0 1 19 17 11 39 6 1 20 73 38 255 10 2 41 21 58 41 22 55 41 23 52 41 24 49 41 25 46 41 26 43 41 27 40 41 28 37 41 29 34 41 30 31 41 31 28 41 32 25 41 33 22 41 34 19 41 35 16 41 36 13 41 37 10 41 38 7 41 39 4 42 40 6 1 41 73 38 188 41 42 10 41 43 7 41 44 4 42 45 6 1 46 73 38 171 41 47 4 42 48 6 1 49 73 38 160 10 1 41 21 58 41 22 55 41 23 52 41 24 49 41 25 46 41 26 43 41 27 40 41 28 37 41 29 34 41 30 31 41 31 28 41 32 25 41 33 22 41 34 19 41 35 16 41 36 13 41 37 10 41 38 7 41 39 4 42 40 6 1 50 73 38 93 41 42 10 41 43 7 41 44 4 42 45 6 1 51 73 38 76 41 47 4 42 48 6 1 52 73 38 65 41 53 4 42 54 6 1 55 73 38 54 10 2 41 56 16 41 57 13 41 58 10 41 59 7 41 60 4 42 61 6 1 62 73 38 29 10 1 41 56 16 41 57 13 41 58 10 41 59 7 41 60 4 42 61 6 1 63 73 38 4 1 64 73 29) #11# #2# 23476) si::fset)) #2# 23476) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 15 4 15 5 15 6 77 15 7 19 9 8 29) #A(t (9) (common-lisp-user::imaginal ((56 56 common-lisp-user::i-b-c3) (56 40 t) (56 24 common-lisp-user::i-b-c3) (56 16 common-lisp-user::i-b-c1) (56 8 t) (56 0 t) (40 56 common-lisp-user::i-b-c3) (40 40 t) (40 24 common-lisp-user::i-b-c3) (40 16 common-lisp-user::i-b-c1) (40 8 t) (40 0 t) (29 25 common-lisp-user::i-b-c3) (29 24 common-lisp-user::i-b-c3) (29 16 common-lisp-user::i-b-c1) (29 9 common-lisp-user::no-rhs-imaginal-ref) (29 8 common-lisp-user::no-rhs-imaginal-ref) (29 0 t) (28 56 common-lisp-user::i-b-c4) (28 40 common-lisp-user::no-rhs-imaginal-ref) (28 25 common-lisp-user::i-b-c3) (28 24 common-lisp-user::i-b-c3) (28 16 common-lisp-user::i-b-c1) (28 9 common-lisp-user::no-rhs-imaginal-ref) (28 8 common-lisp-user::no-rhs-imaginal-ref) (28 0 t) (25 29 common-lisp-user::i-b-c2) (25 28 common-lisp-user::i-b-c2) (25 25 common-lisp-user::i-b-c2) (25 24 common-lisp-user::i-b-c2) (25 20 common-lisp-user::i-b-c2) (25 16 common-lisp-user::i-b-c2) (25 13 t) (25 12 t) (25 9 t) (25 8 t) (25 4 t) (25 0 t) (24 56 common-lisp-user::i-b-c2) (24 40 t) (24 29 common-lisp-user::i-b-c2) (24 28 common-lisp-user::i-b-c2) (24 25 common-lisp-user::i-b-c2) (24 24 common-lisp-user::i-b-c2) (24 20 common-lisp-user::i-b-c2) (24 16 common-lisp-user::i-b-c2) (24 13 t) (24 12 t) (24 9 t) (24 8 t) (24 4 t) (24 0 t) (20 56 common-lisp-user::i-b-c4) (20 40 common-lisp-user::no-rhs-imaginal-ref) (20 25 common-lisp-user::i-b-c3) (20 24 common-lisp-user::i-b-c3) (20 16 common-lisp-user::i-b-c1) (20 9 common-lisp-user::no-rhs-imaginal-ref) (20 8 common-lisp-user::no-rhs-imaginal-ref) (20 0 t) (16 56 common-lisp-user::i-b-c2) (16 40 t) (16 29 common-lisp-user::i-b-c2) (16 28 common-lisp-user::i-b-c2) (16 25 common-lisp-user::i-b-c2) (16 24 common-lisp-user::i-b-c2) (16 20 common-lisp-user::i-b-c2) (16 16 common-lisp-user::i-b-c2) (16 13 t) (16 12 t) (16 9 t) (16 8 t) (16 4 t) (16 0 t) (13 25 common-lisp-user::i-b-c3) (13 24 common-lisp-user::i-b-c3) (13 16 common-lisp-user::i-b-c1) (13 9 common-lisp-user::no-rhs-imaginal-ref) (13 8 common-lisp-user::no-rhs-imaginal-ref) (13 0 t) (12 56 common-lisp-user::i-b-c4) (12 40 common-lisp-user::no-rhs-imaginal-ref) (12 25 common-lisp-user::i-b-c3) (12 24 common-lisp-user::i-b-c3) (12 16 common-lisp-user::i-b-c1) (12 9 common-lisp-user::no-rhs-imaginal-ref) (12 8 common-lisp-user::no-rhs-imaginal-ref) (12 0 t) (9 29 t) (9 28 t) (9 25 t) (9 24 t) (9 20 t) (9 16 t) (9 13 t) (9 12 t) (9 9 t) (9 8 t) (9 4 t) (9 0 t) (8 56 t) (8 40 t) (8 29 t) (8 28 t) (8 25 t) (8 24 t) (8 20 t) (8 16 t) (8 13 t) (8 12 t) (8 9 t) (8 8 t) (8 4 t) (8 0 t) (4 56 common-lisp-user::i-b-c4) (4 40 common-lisp-user::no-rhs-imaginal-ref) (4 25 common-lisp-user::i-b-c3) (4 24 common-lisp-user::i-b-c3) (4 16 common-lisp-user::i-b-c1) (4 9 common-lisp-user::no-rhs-imaginal-ref) (4 8 common-lisp-user::no-rhs-imaginal-ref) (4 0 t) (0 56 t) (0 40 t) (0 29 t) (0 28 t) (0 25 t) (0 24 t) (0 20 t) (0 16 t) (0 13 t) (0 12 t) (0 9 t) (0 8 t) (0 4 t)) (common-lisp-user::imaginal) common-lisp-user::map-imaginal-buffer common-lisp-user::compose-imaginal-buffer common-lisp-user::check-imaginal-consistency common-lisp-user::pre-instantiate-imaginal common-lisp-user::imaginal-reason common-lisp-user::define-compilation-type-fct)) #2# 25878))
